#
#  Auto generated by parser_xml.py on  Tue Aug  8 00:00:00 2023
# 

#############################################################
#		i2c_csr.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_Global_Control = ( 
    'Global_Control',
    (0x00000000, 0x00000004),
    'Global Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Interrupt_Status = ( 
    'Interrupt_Status',
    (0x00000004, 0x00000008),
    'Interrupt Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Interrupt_Enable = ( 
    'Interrupt_Enable',
    (0x00000008, 0x0000000c),
    'Interrupt Enable  (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Wait_Timer_Control = ( 
    'Wait_Timer_Control',
    (0x0000000c, 0x00000010),
    'Wait Timer Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_IBML_tTIMEOUT_Control = ( 
    'IBML_tTIMEOUT_Control',
    (0x00000010, 0x00000014),
    'IBML tTIMEOUT Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_IBML_tLOWMEXT_Control = ( 
    'IBML_tLOWMEXT_Control',
    (0x00000014, 0x00000018),
    'IBML tLOW:MEXT Control  (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_IBML_tLOWSEXT_Control = ( 
    'IBML_tLOWSEXT_Control',
    (0x00000018, 0x0000001c),
    'IBML tLOW:SEXT Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Timer_Clock_Divider_Control = ( 
    'Timer_Clock_Divider_Control',
    (0x0000001c, 0x00000020),
    'Timer Clock Divider Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_I2C_Bus_Monitor = ( 
    'I2C_Bus_Monitor',
    (0x00000020, 0x00000024),
    'I2C Bus Monitor (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Soft_Reset_I2C = ( 
    'Soft_Reset_I2C',
    (0x00000024, 0x00000028),
    'Soft Reset_I2C (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Command = ( 
    'Master_Command',
    (0x00000028, 0x0000002c),
    'Master Command (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Rx_Xfer_Length = ( 
    'Master_Rx_Xfer_Length',
    (0x0000002c, 0x00000030),
    'Master Receive Transfer Length (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Tx_Xfer_Len = ( 
    'Master_Tx_Xfer_Len',
    (0x00000030, 0x00000034),
    'Master Transmit Transfer Length (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Address_Register_1 = ( 
    'Master_Address_Register_1',
    (0x00000034, 0x00000038),
    'Master Address Register 1 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Address_Register_2 = ( 
    'Master_Address_Register_2',
    (0x00000038, 0x0000003c),
    'Master Address Register 2 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Data = ( 
    'Master_Data',
    (0x0000003c, 0x00000040),
    'Master Data (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Transmit_FIFO_Status = ( 
    'Master_Transmit_FIFO_Status',
    (0x00000040, 0x00000044),
    'Master Transmit FIFO Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Receive_FIFO_Status = ( 
    'Master_Receive_FIFO_Status',
    (0x00000044, 0x00000048),
    'Master Receive FIFO Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Interrupt_Enable = ( 
    'Master_Interrupt_Enable',
    (0x00000048, 0x0000004c),
    'Master Interrupt Enable (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Interrupt_Status = ( 
    'Master_Interrupt_Status',
    (0x0000004c, 0x00000050),
    'Master Interrupt Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Tx_Bytes_Xferred = ( 
    'Master_Tx_Bytes_Xferred',
    (0x00000050, 0x00000054),
    'Master Transmit Bytes Transferred (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Master_Rx_Bytes_Xferred = ( 
    'Master_Rx_Bytes_Xferred',
    (0x00000054, 0x00000058),
    'Master Receive Bytes Transferred (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_decode_control = ( 
    'Slave_decode_control',
    (0x00000058, 0x0000005c),
    'Slave decode control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Address_1 = ( 
    'Slave_Address_1',
    (0x0000005c, 0x00000060),
    'Slave Address 1 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Address_2 = ( 
    'Slave_Address_2',
    (0x00000060, 0x00000064),
    'Slave Address 2 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Receive_Control = ( 
    'Slave_Receive_Control',
    (0x00000064, 0x00000068),
    'Slave Receive Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Data_Port = ( 
    'Slave_Data_Port',
    (0x00000068, 0x0000006c),
    'Slave Data Port (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Receive_FIFO_status = ( 
    'Slave_Receive_FIFO_status',
    (0x0000006c, 0x00000070),
    'Slave Receive FIFO status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Interrupt_Enable = ( 
    'Slave_Interrupt_Enable',
    (0x00000070, 0x00000074),
    'Slave Interrupt Enable (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Interrupt_Status = ( 
    'Slave_Interrupt_Status',
    (0x00000074, 0x00000078),
    'Slave Interrupt Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_read_dummy_byte = ( 
    'Slave_read_dummy_byte',
    (0x00000078, 0x0000007c),
    'Slave read dummy byte (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Unused_7C = ( 
    'Unused_7C',
    (0x0000007c, 0x00000080),
    'Unused_7C (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SCL_High_Period = ( 
    'SCL_High_Period',
    (0x00000080, 0x00000084),
    'SCL High Period (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SCL_Low_Period = ( 
    'SCL_Low_Period',
    (0x00000084, 0x00000088),
    'SCL Low Period (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Spike_Filter_Control = ( 
    'Spike_Filter_Control',
    (0x00000088, 0x0000008c),
    'Spike Filter Control (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SDA_Setup_Time = ( 
    'SDA_Setup_Time',
    (0x0000008c, 0x00000090),
    'SDA Setup Time (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SDA_Hold_Time = ( 
    'SDA_Hold_Time',
    (0x00000090, 0x00000094),
    'SDA Hold Time (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SMB_Alert = ( 
    'SMB_Alert',
    (0x00000094, 0x00000098),
    'SMB Alert (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word7_UDID_127_112 = ( 
    'UDID_Word7_UDID_127_112',
    (0x00000098, 0x0000009c),
    'UDID_Word7 (UDID 127:112) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word6_UDID_111_96 = ( 
    'UDID_Word6_UDID_111_96',
    (0x0000009c, 0x000000a0),
    'UDID_Word6 (UDID 111:96) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word5_UDID_95_80 = ( 
    'UDID_Word5_UDID_95_80',
    (0x000000a0, 0x000000a4),
    'UDID_Word5 (UDID 95:80) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word4_UDID_79_64 = ( 
    'UDID_Word4_UDID_79_64',
    (0x000000a4, 0x000000a8),
    'UDID_Word4 (UDID 79:64) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word3_UDID_63_48 = ( 
    'UDID_Word3_UDID_63_48',
    (0x000000a8, 0x000000ac),
    'UDID_Word3 (UDID 63:48) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word2_UDID_47_32 = ( 
    'UDID_Word2_UDID_47_32',
    (0x000000ac, 0x000000b0),
    'UDID_Word2 (UDID 47:32) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word1_UDID_31_16 = ( 
    'UDID_Word1_UDID_31_16',
    (0x000000b0, 0x000000b4),
    'UDID_Word1 (UDID 31:16) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UDID_Word0_UDID_15_0 = ( 
    'UDID_Word0_UDID_15_0',
    (0x000000b4, 0x000000b8),
    'UDID_Word0 (UDID 15:0) (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ARP_PEC_Config_and_Stat = ( 
    'ARP_PEC_Config_and_Stat',
    (0x000000b8, 0x000000bc),
    'ARP PEC Configuration and Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ARP_Slave_Interrupt_Enable = ( 
    'ARP_Slave_Interrupt_Enable',
    (0x000000bc, 0x000000c0),
    'ARP Slave Interrupt Enable (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ARP_Slave_Interrupt_Status = ( 
    'ARP_Slave_Interrupt_Status',
    (0x000000c0, 0x000000c4),
    'ARP Slave Interrupt Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ARP_Master_Interrupt_Enable = ( 
    'ARP_Master_Interrupt_Enable',
    (0x000000c4, 0x000000c8),
    'ARP Master Interrupt Enable (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ARP_Master_Interrupt_Status = ( 
    'ARP_Master_Interrupt_Status',
    (0x000000c8, 0x000000cc),
    'ARP Master Interrupt Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SCL_Slowest_Period_LSB = ( 
    'SCL_Slowest_Period_LSB',
    (0x000000cc, 0x000000d0),
    'SCL Slowest Period LSB (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SCL_Slowest_Period_MSB = ( 
    'SCL_Slowest_Period_MSB',
    (0x000000d0, 0x000000d4),
    'SCL Slowest Period MSB (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Unused_D4 = ( 
    'Unused_D4',
    (0x000000d4, 0x000000d8),
    'Unused_D4 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Address_3 = ( 
    'Slave_Address_3',
    (0x000000d4, 0x000000d8),
    'Slave Address 3 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Address_4 = ( 
    'Slave_Address_4',
    (0x000000d8, 0x000000dc),
    'Slave Address 4 (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Interrupt_2_Enable = ( 
    'Slave_Interrupt_2_Enable',
    (0x000000dc, 0x000000e0),
    'Slave Interrupt 2 Enable (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_Slave_Interrupt_2_Status = ( 
    'Slave_Interrupt_2_Status',
    (0x000000e0, 0x000000e4),
    'Slave Interrupt 2 Status (Mytle->HW->External_IPs->Peripherals->ApI2c_datasheet.pdf)',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		gpio_csr.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_GPIODATA = ( 
    'GPIODATA',
    (0x000003fc, 0x00000400),
    'GPIODATA',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIODIR = ( 
    'GPIODIR',
    (0x00000400, 0x00000404),
    'GPIODIR',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOIS = ( 
    'GPIOIS',
    (0x00000404, 0x00000408),
    'GPIOIS',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOIBE = ( 
    'GPIOIBE',
    (0x00000408, 0x0000040c),
    'GPIOIBE',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOIEV = ( 
    'GPIOIEV',
    (0x0000040c, 0x00000410),
    'GPIOIEV',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOIE = ( 
    'GPIOIE',
    (0x00000410, 0x00000414),
    'GPIOIE',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIORIS = ( 
    'GPIORIS',
    (0x00000414, 0x00000418),
    'GPIORIS',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOMIS = ( 
    'GPIOMIS',
    (0x00000418, 0x0000041c),
    'GPIOMIS',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOIC = ( 
    'GPIOIC',
    (0x0000041c, 0x00000420),
    'GPIOIC',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOAFSEL = ( 
    'GPIOAFSEL',
    (0x00000420, 0x00000424),
    'GPIOAFSEL',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPeriphID0 = ( 
    'GPIOPeriphID0',
    (0x00000fe0, 0x00000fe4),
    'GPIOPeriphID0',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPeriphID1 = ( 
    'GPIOPeriphID1',
    (0x00000fe4, 0x00000fe8),
    'GPIOPeriphID1',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPeriphID2 = ( 
    'GPIOPeriphID2',
    (0x00000fe8, 0x00000fec),
    'GPIOPeriphID2',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPeriphID3 = ( 
    'GPIOPeriphID3',
    (0x00000fec, 0x00000ff0),
    'GPIOPeriphID3',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPCellID0 = ( 
    'GPIOPCellID0',
    (0x00000ff0, 0x00000ff4),
    'GPIOPCellID0',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPCellID1 = ( 
    'GPIOPCellID1',
    (0x00000ff4, 0x00000ff8),
    'GPIOPCellID1',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPCellID2 = ( 
    'GPIOPCellID2',
    (0x00000ff8, 0x00000ffc),
    'GPIOPCellID2',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_GPIOPCellID3 = ( 
    'GPIOPCellID3',
    (0x00000ffc, 0x00001000),
    'GPIOPCellID3',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		uart_csr.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_UARTDR = ( 
    'UARTDR',
    (0x00000000, 0x00000004),
    'Data Register UARTDR',
    [ 
       ('val', 0, 11, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTRSR = ( 
    'UARTRSR',
    (0x00000004, 0x00000008),
    'Receive Status Register/Error Clear Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTFR = ( 
    'UARTFR',
    (0x00000018, 0x0000001c),
    'Flag Register UARTFR',
    [ 
       ('val', 0, 8, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTILPR = ( 
    'UARTILPR',
    (0x00000020, 0x00000024),
    'IrDA Low-Power Counter Register UARTILPR',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTIBRD = ( 
    'UARTIBRD',
    (0x00000024, 0x00000028),
    'Integer Baud Rate Register UARTIBRD',
    [ 
       ('val', 0, 15, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTFBRD = ( 
    'UARTFBRD',
    (0x00000028, 0x0000002c),
    'Fractional Baud Rate Register UARTFBRD',
    [ 
       ('val', 0, 5, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTLCR_H = ( 
    'UARTLCR_H',
    (0x0000002c, 0x00000030),
    'Line Control Register UARTLCR_H',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTCR = ( 
    'UARTCR',
    (0x00000030, 0x00000034),
    'Control Register UARTCR',
    [ 
       ('val', 0, 15, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTIFLS = ( 
    'UARTIFLS',
    (0x00000034, 0x00000038),
    'Interrupt FIFO Level Select Register UARTIFLS',
    [ 
       ('val', 0, 5, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTIMSC = ( 
    'UARTIMSC',
    (0x00000038, 0x0000003c),
    'Interrupt Mask Set/Clear Register UARTIMSC',
    [ 
       ('val', 0, 10, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTRIS = ( 
    'UARTRIS',
    (0x0000003c, 0x00000040),
    'Raw Interrupt Status Register UARTRIS',
    [ 
       ('val', 0, 10, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTMIS = ( 
    'UARTMIS',
    (0x00000040, 0x00000044),
    'Masked Interrupt Status Register UARTMIS',
    [ 
       ('val', 0, 10, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTICR = ( 
    'UARTICR',
    (0x00000044, 0x00000048),
    'Interrupt Clear Register UARTICR',
    [ 
       ('val', 0, 10, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTDMACR = ( 
    'UARTDMACR',
    (0x00000048, 0x0000004c),
    'DMA Control Register UARTDMACR',
    [ 
       ('val', 0, 2, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPeriphID0 = ( 
    'UARTPeriphID0',
    (0x00000fe0, 0x00000fe4),
    'UARTPeriphID0 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPeriphID1 = ( 
    'UARTPeriphID1',
    (0x00000fe4, 0x00000fe8),
    'UARTPeriphID1 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPeriphID2 = ( 
    'UARTPeriphID2',
    (0x00000fe8, 0x00000fec),
    'UARTPeriphID2 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPeriphID3 = ( 
    'UARTPeriphID3',
    (0x00000fec, 0x00000ff0),
    'UARTPeriphID3 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPCellID0 = ( 
    'UARTPCellID0',
    (0x00000ff0, 0x00000ff4),
    'UARTPCellID0 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPCellID1 = ( 
    'UARTPCellID1',
    (0x00000ff4, 0x00000ff8),
    'UARTPCellID1 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPCellID2 = ( 
    'UARTPCellID2',
    (0x00000ff8, 0x00000ffc),
    'UARTPCellID2 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_UARTPCellID3 = ( 
    'UARTPCellID3',
    (0x00000ffc, 0x00001000),
    'UARTPCellID3 Register',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		sfl_csr.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_SSPCR0 = ( 
    'SSPCR0',
    (0x30100000, 0x30100004),
    'Control 0 - Default to 8 bit access',
    [ 
       ('val', 0, 15, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCR1 = ( 
    'SSPCR1',
    (0x30100004, 0x30100008),
    'Control 1 - Default Enabled',
    [ 
       ('val', 0, 3, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPDR = ( 
    'SSPDR',
    (0x30100008, 0x3010000c),
    'Receive FIFO and Transmit FIFO data',
    [ 
       ('val', 0, 15, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPSR = ( 
    'SSPSR',
    (0x3010000c, 0x30100010),
    'Status',
    [ 
       ('val', 0, 4, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCPSR = ( 
    'SSPCPSR',
    (0x30100010, 0x30100014),
    'Clock pre-scale',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPIMSC = ( 
    'SSPIMSC',
    (0x30100014, 0x30100018),
    'Interrupt mask set and clear',
    [ 
       ('val', 0, 3, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPRIS = ( 
    'SSPRIS',
    (0x30100018, 0x3010001c),
    'Raw interrupt status',
    [ 
       ('val', 0, 3, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPMIS = ( 
    'SSPMIS',
    (0x3010001c, 0x30100020),
    'Masked interrupt status',
    [ 
       ('val', 0, 3, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPICR = ( 
    'SSPICR',
    (0x30100020, 0x30100024),
    'Interrupt clear',
    [ 
       ('val', 0, 3, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPDMACR = ( 
    'SSPDMACR',
    (0x30100024, 0x30100028),
    'DMA controller',
    [ 
       ('val', 0, 1, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCS_IND_CS = ( 
    'SSPCS_IND_CS',
    (0x30100028, 0x3010002c),
    'Indirect mode Chip select',
    [ 
       ('cs_select', 0, 2, 'value'),
       ('sfl_read_command', 3, 10, 'SFL Read Command'),
       ('ssp_read_byte_mode', 11, 11, 'SFL 3Byte / 4Byte mode'),
       ('ssp_read_dummy_count', 12, 15, 'SFL Dummy Read count'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCS_PAD_CTRL = ( 
    'SSPCS_PAD_CTRL',
    (0x3010002c, 0x30100030),
    'PAD IO control Reserved',
    [ 
       ('val', 0, 10, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPPeriphID0 = ( 
    'SSPPeriphID0',
    (0x30100fe0, 0x30100fe4),
    'Peripheral identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPPeriphID1 = ( 
    'SSPPeriphID1',
    (0x30100fe4, 0x30100fe8),
    'Peripheral identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPPeriphID2 = ( 
    'SSPPeriphID2',
    (0x30100fe8, 0x30100fec),
    'Peripheral identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPPeriphID3 = ( 
    'SSPPeriphID3',
    (0x30100fec, 0x30100ff0),
    'Peripheral identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCellID0 = ( 
    'SSPCellID0',
    (0x30100ff0, 0x30100ff4),
    'Peripheral cell identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCellID1 = ( 
    'SSPCellID1',
    (0x30100ff4, 0x30100ff8),
    'Peripheral cell identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCellID2 = ( 
    'SSPCellID2',
    (0x30100ff8, 0x30100ffc),
    'Peripheral cell identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_SSPCellID3 = ( 
    'SSPCellID3',
    (0x30100ffc, 0x30101000),
    'Peripheral cell identification',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		dfd_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_dfd_debug_sel = ( 
    'dfd_debug_sel',
    (0x8009c000, 0x8009c004),
    'DFD Debug Select Register.',
    [ 
       ('otp_debug_control_sysclk', 0, 6, 'otp_debug_control_sysclk'),
       ('otp_debug_mode_sysclk', 7, 7, 'otp_debug_mode_sysclk'),
       ('sss_valid', 8, 8, 'sss_valid'),
       ('sel_axi_channel', 14, 14, '1:select axi channel is write addr/data 0:select channel is read addr/data'),
       ('sel_tout_mode', 15, 15, '1: select tout is  axi channel   0: select tout is bdg channel'),
       ('sel_ch1', 16, 23, 'Select ch1 input. 0000_0000 : ccs 0000_0001 : sds 0000_0010 : bm 0000_0011 : beace 0000_0100 : be 0000_0101 : feace0 0000_0110 : feace1 0000_0111 : dcs 0000_1000 : fis 0000_1001 : sss 0000_1010 : clkrst 0000_1011 : qspi 0000_1100 : pcie 0000_1101 : lpddr5 0000_1110 : sysdma0 0000_1111 : sysdma1 0001_0000 : gdma Other value : reserved'),
       ('sel_ch0', 24, 31, 'select ch0 input. 0000_0000 : ccs 0000_0001 : sds 0000_0010 : bm 0000_0011 : beace 0000_0100 : be 0000_0101 : feace0 0000_0110 : feace1 0000_0111 : dcs 0000_1000 : fis 0000_1001 : sss 0000_1010 : clkrst 0000_1011 : qspi 0000_1100 : pcie 0000_1101 : lpddr5 0000_1110 : sysdma0 0000_1111 : sysdma1 0001_0000 : gdma Other value : reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dfd_control = ( 
    'dfd_control',
    (0x8009c004, 0x8009c008),
    'DFD Control Register',
    [ 
       ('dfd_en', 0, 0, 'enable debug function.'),
       ('log_mem_write_en', 1, 1, 'enable write log_mem.'),
       ('ch1_en', 2, 2, 'enable channel 1.'),
       ('overwrite_en', 3, 3, 'after log_mem wrote full, enable overwrite from log_mem addr zero'),
       ('valid_mode_en', 4, 4, 'enable if valid assert, write debug data to log_mem'),
       ('start_pattern_mode_en', 5, 5, 'if start pattern match, write debug data to log_mem'),
       ('start_pattern_mode', 6, 6, '0: level-mode, if pattern match, write debug data to log_mem; 1: pulse-mode, pattern match as a start writing signal, then not check start pattern'),
       ('stop_pattern_mode_en', 7, 7, 'if stop pattern match, stop write debug data to log_mem'),
       ('stop_pattern_mode', 8, 8, '0: level-mode, if pattern match, stop write debug data to log_mem; 1: pulse-mode, pattern match as a stop writing signal, then stop write log mem'),
       ('valid_gate_en', 9, 9, '1: use valid gate debug_data, if valid==0, debug_data is zero.'),
       ('start_reg_bit', 10, 10, 'axi start mode 1:data 0:addr.'),
       ('stop_num_mode_en', 11, 11, 'used with debug_data_write_stop_num register, decide when write stop.'),
       ('stop_full_cnt_mode_en', 12, 12, 'used with stop_full_num register, decide when write stop.'),
       ('stop_reg_bit', 13, 13, 'axi stop mode 1:data 0:bresp rresp.'),
       ('log_mem_wdata_test_en', 16, 16, 'used for generating increase value to log_mem, only used for dfd-designer debug. not function.'),
       ('dfd_valid_test_en', 17, 17, 'used for enable generating valid signals by register, only used for dfd-designer debug. not function.'),
       ('dfd_valid_test', 18, 18, 'used for generating valid signals by register, only used for dfd-designer debug. not function.'),
       ('dfd2stp_en', 20, 20, 'when set one,connect dfd debug data to stp tracedata.'),
       ('dfd2stm_en', 21, 21, 'when set one, connect dfd debug data to stm stm_hwevent.'),
       ('dfd_sw_clr', 31, 31, 'sw clear dfd internal logic to default value. after assert, please desert.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dfd_stat = ( 
    'dfd_stat',
    (0x8009c008, 0x8009c00c),
    'DFD State Register',
    [ 
       ('dfd_stat', 0, 0, 'After log_mem wrote full or write log_mem stop, assert. Every time start write log_mem, clear this state.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_start_pattern = ( 
    'start_pattern',
    (0x8009c100, 0x8009c104),
    'Start Pattern Register',
    [ 
       ('start_pattern', 0, 31, 'start pattern'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_start_pattern_maskb = ( 
    'start_pattern_maskb',
    (0x8009c104, 0x8009c108),
    'Start Pattern MaskRegister',
    [ 
       ('start_pattern_maskb', 0, 31, '0:mask 1:not mask'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_stop_pattern = ( 
    'stop_pattern',
    (0x8009c108, 0x8009c10c),
    'Stop Pattern Register',
    [ 
       ('stop_pattern', 0, 31, 'stop pattern'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_stop_pattern_maskb = ( 
    'stop_pattern_maskb',
    (0x8009c10c, 0x8009c110),
    'Stop Pattern Mask Register',
    [ 
       ('stop_pattern_maskb', 0, 31, '0:mask 1:not mask'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dfd_valid_map = ( 
    'dfd_valid_map',
    (0x8009c110, 0x8009c114),
    'DFD Valid Map Register',
    [ 
       ('dfd_valid_map', 0, 31, 'dfd_valid_map[i]==1 means debug_data[i] used as valid.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_debug_data_write_stop_num = ( 
    'debug_data_write_stop_num',
    (0x8009c114, 0x8009c118),
    'Debug Data Write Stop Num Register',
    [ 
       ('debug_data_write_stop_num', 0, 31, 'after write the number of debug_data_write_stop_num is debug_data to log_mem, stop write.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_stop_full_num = ( 
    'stop_full_num',
    (0x8009c118, 0x8009c11c),
    'Stop Full Num Register',
    [ 
       ('stop_full_num', 0, 31, 'after write the full times is debug_data to log_mem, stop write.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_axi_start_pattern_addr = ( 
    'axi_start_pattern_addr',
    (0x8009c11c, 0x8009c120),
    'AXI Start Pattern Addr Rsgister',
    [ 
       ('axi_start_pattern_addr', 0, 31, 'axi channel start address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_axi_stop_pattern_addr = ( 
    'axi_stop_pattern_addr',
    (0x8009c120, 0x8009c124),
    'AXI Stop Pattern Addr Rsgister',
    [ 
       ('axi_stop_pattern_addr', 0, 31, 'axi channel stop address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_axi_start_addr_offset = ( 
    'axi_start_addr_offset',
    (0x8009c124, 0x8009c128),
    'AXI Start  Addr Offset Rsgister',
    [ 
       ('axi_start_addr_offset', 0, 31, 'axi channel input data start address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_axi_start_data_offset = ( 
    'axi_start_data_offset',
    (0x8009c128, 0x8009c12c),
    'AXI Start  Data Offset Rsgister',
    [ 
       ('axi_start_data_offset', 0, 31, 'axi channel input data stop address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_csr_ctrl_log_mem_addr = ( 
    'csr_ctrl_log_mem_addr',
    (0x8009c200, 0x8009c204),
    'Ctrl Log Mem Addr Register',
    [ 
       ('csr_ctrl_log_mem_addr', 0, 31, 'Ctrl Log Mem Addr Register'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_csr_ctrl_log_mem_data = ( 
    'csr_ctrl_log_mem_data',
    (0x8009c204, 0x8009c208),
    'Ctrl Log Mem Data Register',
    [ 
       ('csr_ctrl_log_mem_data', 0, 31, 'Ctrl Log Mem Data Register'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_snapshot_mode_sel = ( 
    'snapshot_mode_sel',
    (0x8009c254, 0x8009c258),
    'Snapshot mode select Register',
    [ 
       ('snap_mode_others', 0, 0, 'To monitor the performance, FW would like to snapshot HW internal status that all signals are latched at the same time. Snapshot mode is not applied for all monitor signals as it requires extra resource to latch the snapshot value. Designers can pick up the critical signals to take a snapshot. 0: legacy mode, HW returns real time signal values 1: snapshot mode, HW returns the signal values in the last snapshot.'),
       ('snap_flag_others', 1, 1, 'This is an auto clear bit. It returns to 0 at the next clock cycle when writing to 1. When write to 1, HW will take a snapshot of all monitors with a snapshot mode, regardless the mode setting at bit 0.'),
       ('snap_mode_beace', 2, 2, 'same as bit0'),
       ('snap_flag_beace', 3, 3, 'same as bit1'),
       ('snap_mode_ccs', 4, 4, 'same as bit0'),
       ('snap_flag_ccs', 5, 5, 'same as bit1'),
       ('snap_mode_sds', 6, 6, 'same as bit0'),
       ('snap_flag_sds', 7, 7, 'same as bit1'),
       ('snap_mode_bm', 8, 8, 'same as bit0'),
       ('snap_flag_bm', 9, 9, 'same as bit1'),
       ('snap_mode_be', 10, 10, 'same as bit0'),
       ('snap_flag_be', 11, 11, 'same as bit1'),
       ('snap_mode_fe', 12, 12, 'same as bit0'),
       ('snap_flag_fe', 13, 13, 'same as bit1'),
       ('snap_mode_dcs', 14, 14, 'same as bit0'),
       ('snap_flag_dcs', 15, 15, 'same as bit1'),
       ('snap_mode_lpddr', 16, 16, 'same as bit0'),
       ('snap_flag_lpddr', 17, 17, 'same as bit1'),
       ('snap_mode_sysdma0', 18, 18, 'same as bit0'),
       ('snap_flag_sysdma0', 19, 19, 'same as bit1'),
       ('snap_mode_sysdma1', 20, 20, 'same as bit0'),
       ('snap_flag_sysdma1', 21, 21, 'same as bit1'),
       ('snap_mode_gdma', 22, 22, 'same as bit0'),
       ('snap_flag_gdma', 23, 23, 'same as bit1'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dfd_debug_data = ( 
    'dfd_debug_data',
    (0x8009c300, 0x8009c304),
    'DFD Debug Data Register',
    [ 
       ('dfd_debug_data', 0, 31, 'debug data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_current_log_mem_write_addr = ( 
    'current_log_mem_write_addr',
    (0x8009c304, 0x8009c308),
    'Current Log Mem Write Addr Register',
    [ 
       ('current_log_mem_write_addr', 0, 31, 'current dfd_log_mem_ram_addr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_log_mem_full_cnt = ( 
    'log_mem_full_cnt',
    (0x8009c308, 0x8009c30c),
    'Log Mem Full Cnt Register',
    [ 
       ('log_mem_full_cnt', 0, 31, 'log_mem_full_cnt'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		ace_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_be_ace_axi_attrib_range0_saddr = ( 
    'be_ace_axi_attrib_range0_saddr',
    (0x83d10000, 0x83d10008),
    'BEACE axi attribute range0 start address.',
    [ 
       ('saddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range1_saddr = ( 
    'be_ace_axi_attrib_range1_saddr',
    (0x83d10008, 0x83d10010),
    'BEACE axi attribute range1 start address.',
    [ 
       ('saddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range2_saddr = ( 
    'be_ace_axi_attrib_range2_saddr',
    (0x83d10010, 0x83d10018),
    'BEACE axi attribute range2 start address.',
    [ 
       ('saddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range3_saddr = ( 
    'be_ace_axi_attrib_range3_saddr',
    (0x83d10018, 0x83d10020),
    'BEACE axi attribute range3 start address.',
    [ 
       ('saddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range0_eaddr = ( 
    'be_ace_axi_attrib_range0_eaddr',
    (0x83d10020, 0x83d10028),
    'BEACE axi attribute range0 end address.',
    [ 
       ('eaddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range1_eaddr = ( 
    'be_ace_axi_attrib_range1_eaddr',
    (0x83d10028, 0x83d10030),
    'BEACE axi attribute range1 end address.',
    [ 
       ('eaddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range2_eaddr = ( 
    'be_ace_axi_attrib_range2_eaddr',
    (0x83d10030, 0x83d10038),
    'BEACE axi attribute range2 end address.',
    [ 
       ('eaddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_range3_eaddr = ( 
    'be_ace_axi_attrib_range3_eaddr',
    (0x83d10038, 0x83d10040),
    'BEACE axi attribute range3 end address.',
    [ 
       ('eaddr', 0, 39, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_ctrl0 = ( 
    'be_ace_axi_attrib_ctrl0',
    (0x83d10040, 0x83d10048),
    'BEACE axi attribute control 0.',
    [ 
       ('awcache0', 0, 3, '.'),
       ('awqos0', 4, 7, '.'),
       ('awprot0', 8, 10, '.'),
       ('awlock0', 12, 12, '.'),
       ('awcache1', 16, 19, '.'),
       ('awqos1', 20, 23, '.'),
       ('awprot1', 24, 26, '.'),
       ('awlock1', 28, 28, '.'),
       ('awcache2', 32, 35, '.'),
       ('awqos2', 36, 39, '.'),
       ('awprot2', 40, 42, '.'),
       ('awlock2', 44, 44, '.'),
       ('awcache3', 48, 51, '.'),
       ('awqos3', 52, 55, '.'),
       ('awprot3', 56, 58, '.'),
       ('awlock3', 60, 60, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_axi_attrib_ctrl1 = ( 
    'be_ace_axi_attrib_ctrl1',
    (0x83d10048, 0x83d10050),
    'BEACE axi attribute control 1.',
    [ 
       ('arcache0', 0, 3, '.'),
       ('arqos0', 4, 7, '.'),
       ('arprot0', 8, 10, '.'),
       ('arlock0', 12, 12, '.'),
       ('arcache1', 16, 19, '.'),
       ('arqos1', 20, 23, '.'),
       ('arprot1', 24, 26, '.'),
       ('arlock1', 28, 28, '.'),
       ('arcache2', 32, 35, '.'),
       ('arqos2', 36, 39, '.'),
       ('arprot2', 40, 42, '.'),
       ('arlock2', 44, 44, '.'),
       ('arcache3', 48, 51, '.'),
       ('arqos3', 52, 55, '.'),
       ('arprot3', 56, 58, '.'),
       ('arlock3', 60, 60, '.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_ld_buf_base_addr = ( 
    'csr_ld_buf_base_addr',
    (0x83d10100, 0x83d10108),
    'landing buffer base address',
    [ 
       ('csr_ld_buf_base_addr', 0, 39, 'landing buffer base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_obuf_base_addr_proc0 = ( 
    'csr_obuf_base_addr_proc0',
    (0x83d10108, 0x83d10110),
    'sdsr obuf base address',
    [ 
       ('csr_obuf_base_addr_proc0', 0, 39, 'sdsr obuf  base address for processor 0'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_obuf_base_addr_proc1 = ( 
    'csr_obuf_base_addr_proc1',
    (0x83d10110, 0x83d10118),
    'sdsr obuf base address',
    [ 
       ('csr_obuf_base_addr_proc1', 0, 39, 'sdsr obuf  base address for processor 1'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_obuf_base_addr_proc2 = ( 
    'csr_obuf_base_addr_proc2',
    (0x83d10118, 0x83d10120),
    'sdsr obuf base address',
    [ 
       ('csr_obuf_base_addr_proc2', 0, 39, 'sdsr obuf  base address for processor 2'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_obuf_base_addr_proc3 = ( 
    'csr_obuf_base_addr_proc3',
    (0x83d10120, 0x83d10128),
    'sdsr obuf base address',
    [ 
       ('csr_obuf_base_addr_proc3', 0, 39, 'sdsr obuf  base address for processor 3'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_csr_folding_ctrl = ( 
    'csr_folding_ctrl',
    (0x83d10200, 0x83d10208),
    'folding control',
    [ 
       ('folding_skip_ldbuf_dis', 0, 0, 'folding skip ldbuf disable'),
       ('folding_skip_msgid_dis', 1, 1, 'folding skip msgid disable'),
       ('folding_flag_clr', 2, 2, 'folding msgid, ld buffer skip flag clear'),
       ('b2n_crdt_ctrl_dis', 3, 3, 'set 1 to disable b2n credit control'),
       ('w2p_fuse_block_folding_dis', 4, 4, 'set 1 to disable feace/beace w2p fuse block folding w2p send to ccs.'),
       ('b2n_crdt_ratio', 8, 11, 'the number of folding corresponding to one outstanding b2n. set 1 for SLC, 2 for MLC, 3 for TLC, 4 for QLC etc.'),
       ('msgid_req_wait_cycles', 16, 31, 'the number of cycles wait for msgid before discarding folding ccp.'),
       ('ldbuf_req_times', 32, 47, 'the number of attempts to request landing buffer before discarding folding ccp.'),
       ('folding_msgid_num_thr', 48, 55, 'the number of available msgid threshold that folding will skip sending w2p.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_config_0 = ( 
    'fcq_config_0',
    (0x83d11000, 0x83d11008),
    'FCQ Configure Register 0',
    [ 
       ('qid', 0, 6, 'Index of queue to be enabled/disabled.'),
       ('qtype', 8, 11, "Queue type,\n              4'h0: erase Q;\n              4'h1: b2n Q;\n              4'h2: w2p (could be Q for GC write/ace_w2p, b2n flush) Q;\n              4'h3: read Q;\n              4'h4: folding Q (include folding cmd, and b2n flush cmd)\n              others: reserved\n              Since quince, HW determine cmd send to different FSM based on Qtype. DCS qtype could not be 2."),
       ('strm_id', 12, 19, 'Stream ID for B2N/folding. For B2N/folding Q, FW could not config two Q with same stream id.\n              For folding Q (qtype=4), the strm_id should be the same as the strm_id of the w2p cmd in the folding FCT, and the strm_id of b2n_flush cmd in the b2n_flush FCT.'),
       ('prio', 20, 21, "Q priority\n              2'b00: lowest priority\n              2'b11: highest priority"),
       ('alfull_thrd', 32, 40, 'almost full threshold. Set almost full bitmap for the Q if the number of valid entries equals or is larger than the alfull_thrd'),
       ('alempty_thrd', 42, 50, 'almost empty threshold. Set almost empty bitmap for the Q if the number of valid entries equals or is less than the alempty_thrd'),
       ('enable', 63, 63, "1'b0: Q is disable\n              1'b1: Q is enable"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_config_1 = ( 
    'fcq_config_1',
    (0x83d11008, 0x83d11010),
    'FCQ Configure Register 1',
    [ 
       ('qid', 0, 6, 'queue index'),
       ('sq_entry_size_dw', 8, 11, 'Submission Queue entry size in DW, 0 base'),
       ('sq_depth', 12, 20, 'Submission Queue Depth, 0 base'),
       ('credit', 21, 23, 'SQ credit, 0 base\n              if the SQ is selected, HW will continue fetching from this SQ until the SQ is empty or the number of commands fetched from this Q reach credit+1.'),
       ('sq_base_addr', 24, 63, 'SQ Base address in bytes.', 2),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_config_2 = ( 
    'fcq_config_2',
    (0x83d11010, 0x83d11018),
    'FCQ Configure Register 2',
    [ 
       ('qid', 0, 6, 'queue index'),
       ('cq_entry_size_dw', 8, 11, 'Completion Queue entry size in DW, 0 base'),
       ('cq_depth', 12, 20, 'Completion Queue Depth, 0 base'),
       ('cq_base_addr', 24, 63, 'CQ Base address in bytes.', 2),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_dbl = ( 
    'fcq_dbl',
    (0x83d11018, 0x83d11020),
    'FCQ Doorbell Register',
    [ 
       ('ptr', 0, 15, 'value of the pointer to update'),
       ('qid', 16, 22, 'queue index'),
       ('mode', 24, 24, "Door bell mode\n              1'b0: incremental mode, internal pointer = internal pointer + ptr\n              1'b1: overwritten mode, internal pointer = ptr"),
       ('sq0_cq1', 25, 25, "1'b0: update SQ pointer\n              1'b1: update CQ pointer"),
       ('hd0_ta1', 26, 26, "1'b0: update header pointer\n              1'b1: update tail pointer"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_sel = ( 
    'fcq_q_sel',
    (0x83d11020, 0x83d11028),
    'FCQ Q Select Register',
    [ 
       ('qid', 0, 6, 'Q index.\n              Program this register to select a Q, then read q_ptr/statistic/property register for the corresponding information'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_property_0 = ( 
    'fcq_q_property_0',
    (0x83d11028, 0x83d11030),
    'FCQ Q Property Register 0',
    [ 
       ('qid', 0, 6, 'Index of queue to be enabled/disabled.'),
       ('qtype', 8, 11, "Queue type,\n              4'h0: erase Q;\n              4'h1: b2n Q;\n              4'h2: w2p (could be Q for GC write/ace_w2p, b2n flush) Q;\n              4'h3: read Q;\n              others: reserved\n              Since quince, HW determine cmd send to different FSM based on Qtype. DCS qtype could not be 2."),
       ('strm_id', 12, 19, 'Stream ID for B2N. For B2N Q, FW could not config two Q with same stream id.'),
       ('prio', 20, 21, "Q priority\n              2'b00: lowest priority\n              2'b11: highest priority"),
       ('alfull_thrd', 32, 40, 'almost full threshold. Set almost full bitmap for the Q if the number of valid entries equals or is larger than the alfull_thrd'),
       ('alempty_thrd', 42, 50, 'almost empty threshold. Set almost empty bitmap for the Q if the number of valid entries equals or is less than the alempty_thrd'),
       ('enable', 63, 63, "1'b0: Q is disable\n              1'b1: Q is enable"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_property_1 = ( 
    'fcq_q_property_1',
    (0x83d11030, 0x83d11038),
    'FCQ Q Property Register 1',
    [ 
       ('qid', 0, 6, 'queue index'),
       ('sq_entry_size_dw', 8, 11, 'Submission Queue entry size in DW, 0 base'),
       ('sq_depth', 12, 20, 'Submission Queue Depth, 0 base'),
       ('credit', 21, 23, 'SQ credit, 0 base\n              if the SQ is selected, HW will continue fetching from this SQ until the SQ is empty or the number of commands fetched from this Q reach credit+1.'),
       ('sq_base_addr', 24, 63, 'SQ Base address in bytes.', 2),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_property_2 = ( 
    'fcq_q_property_2',
    (0x83d11038, 0x83d11040),
    'FCQ Q Property Register 2',
    [ 
       ('qid', 0, 6, 'queue index'),
       ('cq_entry_size_dw', 8, 11, 'Completion Queue entry size in DW, 0 base'),
       ('cq_depth', 12, 20, 'Completion Queue Depth, 0 base'),
       ('cq_base_addr', 24, 63, 'CQ Base address in bytes.', 2),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_ptr = ( 
    'fcq_q_ptr',
    (0x83d11040, 0x83d11048),
    'FCQ Q Pointer Register',
    [ 
       ('sq_hd', 0, 8, 'SQ header pointer'),
       ('sq_tail', 16, 24, 'SQ tail pointer.'),
       ('cq_hd', 32, 40, 'CQ header pointer'),
       ('cq_tail', 48, 56, 'CQ tail pointer.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_statistic_0 = ( 
    'fcq_statistic_0',
    (0x83d11048, 0x83d11050),
    'FCQ statistic Register 0',
    [ 
       ('tot_sq_push', 0, 31, 'total number of cmd pushed to SQ'),
       ('tot_sq_pop', 32, 63, 'total number of cmd poped out from SQ.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_statistic_1 = ( 
    'fcq_statistic_1',
    (0x83d11050, 0x83d11058),
    'FCQ statistic Register 1',
    [ 
       ('tot_cq_push', 0, 31, 'total number of cpl pushed to CQ'),
       ('tot_cq_pop', 32, 63, 'total number of cpl poped out from CQ.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_statistic_2 = ( 
    'fcq_statistic_2',
    (0x83d11058, 0x83d11060),
    'FCQ statistic Register 2',
    [ 
       ('sq_vld_entry', 0, 8, 'number of valid entries in SQ.'),
       ('cq_vld_entry', 16, 24, 'number of valid entries in CQ.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_empty = ( 
    'fcq_sq_empty',
    (0x83d11100, 0x83d11108),
    'FCQ SQ Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_full = ( 
    'fcq_sq_full',
    (0x83d11108, 0x83d11110),
    'FCQ SQ Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_empty = ( 
    'fcq_cq_empty',
    (0x83d11110, 0x83d11118),
    'FCQ CQ Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_full = ( 
    'fcq_cq_full',
    (0x83d11118, 0x83d11120),
    'FCQ CQ Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_al_empty = ( 
    'fcq_sq_al_empty',
    (0x83d11120, 0x83d11128),
    'FCQ SQ Almost Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ almost empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_al_full = ( 
    'fcq_sq_al_full',
    (0x83d11128, 0x83d11130),
    'FCQ SQ Almost Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ almost full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_al_empty = ( 
    'fcq_cq_al_empty',
    (0x83d11130, 0x83d11138),
    'FCQ CQ Almost Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ almost empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_al_full = ( 
    'fcq_cq_al_full',
    (0x83d11138, 0x83d11140),
    'FCQ CQ Almost Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ almost full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_wof = ( 
    'fcq_sq_wof',
    (0x83d11140, 0x83d11148),
    'FCQ SQ Write on Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ write on full status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_roe = ( 
    'fcq_sq_roe',
    (0x83d11148, 0x83d11150),
    'FCQ SQ Read on Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ read on empty status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_wof = ( 
    'fcq_cq_wof',
    (0x83d11150, 0x83d11158),
    'FCQ CQ Write on Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ write on full status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_roe = ( 
    'fcq_cq_roe',
    (0x83d11158, 0x83d11160),
    'FCQ CQ Read on Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ read on empty status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_ost = ( 
    'fcq_q_ost',
    (0x83d11160, 0x83d11168),
    'FCQ Q Command Outstanding Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of outstanding command per Q in HW status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_intr_status = ( 
    'fcq_intr_status',
    (0x83d11200, 0x83d11208),
    'FCQ Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 63, 'Interrupt Status: write 1 to clear\n              Bit 0: cmd_stat_mem correctable error\n              Bit 1: q_prop_mem correctable error\n              Bit 2: sq_prop_mem correctable error\n              Bit 3: cq_prop_mem correctable error\n              Bit 4: q_statistic_mem correctable error\n              Bit 5: rd_stat_mem correctable error\n              Bit 6: gc_wr_mem correctable error\n              Bit 7: linklist_mem correctable error\n              Bit 8: linkbuf_mem correctable error\n              Bit 9: folding_wr_mem correctable error\n              Bit 10: rdcmd_fifo_mem correctable error\n              Bit 11: msgid_fifo_mem correctable error\n              Bit 16: cmd_stat_mem uncorrectable error\n              Bit 17: q_prop_mem uncorrectable error\n              Bit 18: sq_prop_mem uncorrectable error\n              Bit 19: cq_prop_mem uncorrectable error\n              Bit 20: q_statistic_mem uncorrectable error\n              Bit 21: rd_stat_mem uncorrectable error\n              Bit 22: gc_wr_mem uncorrectable error\n              Bit 23: linklist_mem uncorrectable error\n              Bit 24: linkbuf_mem uncorrectable error\n              Bit 25: folding_wr_mem uncorrectable error\n              Bit 26: rdcmd_fifo_mem uncorrectable error\n              Bit 27: msgid_fifo_mem uncorrectable error\n              \n              Bit 32: cmd proc cmd msg axi master write response error\n              Bit 33: rd cpl proc 0 msg axi master response error\n              Bit 34: rd cpl proc 1 msg axi master response error\n              Bit 35: rd cpl proc 2 msg axi master response error \n              Bit 36: response to ccs via msg axi slave port \n              Bit 37: N.A  \n              Bit 38: N.A \n              Bit 39: wr cmd proc dma 0 write response error\n              Bit 40: wr cmd proc dma 1 write response error\n              Bit 41: wr cmd proc dma 2 write response error \n              Bit 42: wr cmd proc dma 3 write response error\n              Bit 43: ccs cpl proc fct axi write response error 1 \n              Bit 44: read cpl proc 0 fct axi write response error  \n              Bit 45: cmd fetch axi read response error \n              Bit 46: cmd proc axi read response error 0 \n              Bit 47: wr cmd proc fct axi read / dma 0 status axi read response error  \n              Bit 48: wr cmd dma 1 status axi read response error  \n              Bit 49: wr cmd dma 2 status axi read response error\n              Bit 50: wr cmd dma 3 status axi read response error\n              others: reserved'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_intr_mask = ( 
    'fcq_intr_mask',
    (0x83d11208, 0x83d11210),
    'FCQ Interrupt Mask Register',
    [ 
       ('vec', 0, 63, "Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_intr_rc = ( 
    'fcq_intr_rc',
    (0x83d11210, 0x83d11218),
    'FCQ Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 63, 'Interrupts read to clear'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_intr_shadow = ( 
    'fcq_intr_shadow',
    (0x83d11218, 0x83d11220),
    'FCQ Interrupt Shadow Register',
    [ 
       ('vec', 0, 63, 'Interrupts shadow register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_empty_2 = ( 
    'fcq_sq_empty_2',
    (0x83d11220, 0x83d11228),
    'FCQ SQ Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_full_2 = ( 
    'fcq_sq_full_2',
    (0x83d11228, 0x83d11230),
    'FCQ SQ Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_empty_2 = ( 
    'fcq_cq_empty_2',
    (0x83d11230, 0x83d11238),
    'FCQ CQ Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_full_2 = ( 
    'fcq_cq_full_2',
    (0x83d11238, 0x83d11240),
    'FCQ CQ Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_al_empty_2 = ( 
    'fcq_sq_al_empty_2',
    (0x83d11240, 0x83d11248),
    'FCQ SQ Almost Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ almost empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_al_full_2 = ( 
    'fcq_sq_al_full_2',
    (0x83d11248, 0x83d11250),
    'FCQ SQ Almost Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ almost full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_al_empty_2 = ( 
    'fcq_cq_al_empty_2',
    (0x83d11250, 0x83d11258),
    'FCQ CQ Almost Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ almost empty status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_al_full_2 = ( 
    'fcq_cq_al_full_2',
    (0x83d11258, 0x83d11260),
    'FCQ CQ Almost Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ almost full status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_wof_2 = ( 
    'fcq_sq_wof_2',
    (0x83d11260, 0x83d11268),
    'FCQ SQ Write on Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ write on full status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_sq_roe_2 = ( 
    'fcq_sq_roe_2',
    (0x83d11268, 0x83d11270),
    'FCQ SQ Read on Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of SQ read on empty status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_wof_2 = ( 
    'fcq_cq_wof_2',
    (0x83d11270, 0x83d11278),
    'FCQ CQ Write on Full Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ write on full status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_cq_roe_2 = ( 
    'fcq_cq_roe_2',
    (0x83d11278, 0x83d11280),
    'FCQ CQ Read on Empty Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of CQ read on empty status. Write 1 to clear.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fcq_q_ost_2 = ( 
    'fcq_q_ost_2',
    (0x83d11280, 0x83d11288),
    'FCQ Q Command Outstanding Register',
    [ 
       ('bitmap', 0, 63, 'Bitmap of outstanding command per Q in HW status.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_rd_cpl_fsm_wait = ( 
    'rd_cpl_fsm_wait',
    (0x83d11288, 0x83d11290),
    'Rd FSM wait counter',
    [ 
       ('cnt', 0, 9, 'A counter which controls a counter in Rd FSM to read Cmdst memory, default 99, count from 0 to 99'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_0_cfg_0 = ( 
    'fct_pool_0_cfg_0',
    (0x83d11300, 0x83d11308),
    'FCT Pool 0 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_0_cfg_1 = ( 
    'fct_pool_0_cfg_1',
    (0x83d11308, 0x83d11310),
    'FCT Pool 0 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_0_alloc = ( 
    'fct_pool_0_alloc',
    (0x83d11310, 0x83d11318),
    'FCT Pool 0 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_0_rls = ( 
    'fct_pool_0_rls',
    (0x83d11318, 0x83d11320),
    'FCT Pool 0 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_1_cfg_0 = ( 
    'fct_pool_1_cfg_0',
    (0x83d11320, 0x83d11328),
    'FCT Pool 1 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_1_cfg_1 = ( 
    'fct_pool_1_cfg_1',
    (0x83d11328, 0x83d11330),
    'FCT Pool 1 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_1_alloc = ( 
    'fct_pool_1_alloc',
    (0x83d11330, 0x83d11338),
    'FCT Pool 1 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_1_rls = ( 
    'fct_pool_1_rls',
    (0x83d11338, 0x83d11340),
    'FCT Pool 1 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_2_cfg_0 = ( 
    'fct_pool_2_cfg_0',
    (0x83d11340, 0x83d11348),
    'FCT Pool 2 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_2_cfg_1 = ( 
    'fct_pool_2_cfg_1',
    (0x83d11348, 0x83d11350),
    'FCT Pool 2 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_2_alloc = ( 
    'fct_pool_2_alloc',
    (0x83d11350, 0x83d11358),
    'FCT Pool 2 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_2_rls = ( 
    'fct_pool_2_rls',
    (0x83d11358, 0x83d11360),
    'FCT Pool 2 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_3_cfg_0 = ( 
    'fct_pool_3_cfg_0',
    (0x83d11360, 0x83d11368),
    'FCT Pool 3 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_3_cfg_1 = ( 
    'fct_pool_3_cfg_1',
    (0x83d11368, 0x83d11370),
    'FCT Pool 3 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_3_alloc = ( 
    'fct_pool_3_alloc',
    (0x83d11370, 0x83d11378),
    'FCT Pool 3 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_3_rls = ( 
    'fct_pool_3_rls',
    (0x83d11378, 0x83d11380),
    'FCT Pool 3 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_4_cfg_0 = ( 
    'fct_pool_4_cfg_0',
    (0x83d11380, 0x83d11388),
    'FCT Pool 4 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_4_cfg_1 = ( 
    'fct_pool_4_cfg_1',
    (0x83d11388, 0x83d11390),
    'FCT Pool 4 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_4_alloc = ( 
    'fct_pool_4_alloc',
    (0x83d11390, 0x83d11398),
    'FCT Pool 4 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_4_rls = ( 
    'fct_pool_4_rls',
    (0x83d11398, 0x83d113a0),
    'FCT Pool 4 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_5_cfg_0 = ( 
    'fct_pool_5_cfg_0',
    (0x83d113a0, 0x83d113a8),
    'FCT Pool 5 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_5_cfg_1 = ( 
    'fct_pool_5_cfg_1',
    (0x83d113a8, 0x83d113b0),
    'FCT Pool 5 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_5_alloc = ( 
    'fct_pool_5_alloc',
    (0x83d113b0, 0x83d113b8),
    'FCT Pool 5 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_5_rls = ( 
    'fct_pool_5_rls',
    (0x83d113b8, 0x83d113c0),
    'FCT Pool 5 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_6_cfg_0 = ( 
    'fct_pool_6_cfg_0',
    (0x83d113c0, 0x83d113c8),
    'FCT Pool 6 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_6_cfg_1 = ( 
    'fct_pool_6_cfg_1',
    (0x83d113c8, 0x83d113d0),
    'FCT Pool 6 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_6_alloc = ( 
    'fct_pool_6_alloc',
    (0x83d113d0, 0x83d113d8),
    'FCT Pool 6 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_6_rls = ( 
    'fct_pool_6_rls',
    (0x83d113d8, 0x83d113e0),
    'FCT Pool 6 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_7_cfg_0 = ( 
    'fct_pool_7_cfg_0',
    (0x83d113e0, 0x83d113e8),
    'FCT Pool 7 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_7_cfg_1 = ( 
    'fct_pool_7_cfg_1',
    (0x83d113e8, 0x83d113f0),
    'FCT Pool 7 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_7_alloc = ( 
    'fct_pool_7_alloc',
    (0x83d113f0, 0x83d113f8),
    'FCT Pool 7 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_7_rls = ( 
    'fct_pool_7_rls',
    (0x83d113f8, 0x83d11400),
    'FCT Pool 7 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_8_cfg_0 = ( 
    'fct_pool_8_cfg_0',
    (0x83d11400, 0x83d11408),
    'FCT Pool 8 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_8_cfg_1 = ( 
    'fct_pool_8_cfg_1',
    (0x83d11408, 0x83d11410),
    'FCT Pool 8 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_8_alloc = ( 
    'fct_pool_8_alloc',
    (0x83d11410, 0x83d11418),
    'FCT Pool 8 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_8_rls = ( 
    'fct_pool_8_rls',
    (0x83d11418, 0x83d11420),
    'FCT Pool 8 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_9_cfg_0 = ( 
    'fct_pool_9_cfg_0',
    (0x83d11420, 0x83d11428),
    'FCT Pool 9 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_9_cfg_1 = ( 
    'fct_pool_9_cfg_1',
    (0x83d11428, 0x83d11430),
    'FCT Pool 9 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_9_alloc = ( 
    'fct_pool_9_alloc',
    (0x83d11430, 0x83d11438),
    'FCT Pool 9 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_9_rls = ( 
    'fct_pool_9_rls',
    (0x83d11438, 0x83d11440),
    'FCT Pool 9 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_10_cfg_0 = ( 
    'fct_pool_10_cfg_0',
    (0x83d11440, 0x83d11448),
    'FCT Pool 10 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_10_cfg_1 = ( 
    'fct_pool_10_cfg_1',
    (0x83d11448, 0x83d11450),
    'FCT Pool 10 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_10_alloc = ( 
    'fct_pool_10_alloc',
    (0x83d11450, 0x83d11458),
    'FCT Pool 10 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_10_rls = ( 
    'fct_pool_10_rls',
    (0x83d11458, 0x83d11460),
    'FCT Pool 10 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_11_cfg_0 = ( 
    'fct_pool_11_cfg_0',
    (0x83d11460, 0x83d11468),
    'FCT Pool 11 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_11_cfg_1 = ( 
    'fct_pool_11_cfg_1',
    (0x83d11468, 0x83d11470),
    'FCT Pool 11 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_11_alloc = ( 
    'fct_pool_11_alloc',
    (0x83d11470, 0x83d11478),
    'FCT Pool 11 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_11_rls = ( 
    'fct_pool_11_rls',
    (0x83d11478, 0x83d11480),
    'FCT Pool 11 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_12_cfg_0 = ( 
    'fct_pool_12_cfg_0',
    (0x83d11480, 0x83d11488),
    'FCT Pool 12 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_12_cfg_1 = ( 
    'fct_pool_12_cfg_1',
    (0x83d11488, 0x83d11490),
    'FCT Pool 12 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_12_alloc = ( 
    'fct_pool_12_alloc',
    (0x83d11490, 0x83d11498),
    'FCT Pool 12 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_12_rls = ( 
    'fct_pool_12_rls',
    (0x83d11498, 0x83d114a0),
    'FCT Pool 12 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_13_cfg_0 = ( 
    'fct_pool_13_cfg_0',
    (0x83d114a0, 0x83d114a8),
    'FCT Pool 13 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_13_cfg_1 = ( 
    'fct_pool_13_cfg_1',
    (0x83d114a8, 0x83d114b0),
    'FCT Pool 13 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_13_alloc = ( 
    'fct_pool_13_alloc',
    (0x83d114b0, 0x83d114b8),
    'FCT Pool 13 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_13_rls = ( 
    'fct_pool_13_rls',
    (0x83d114b8, 0x83d114c0),
    'FCT Pool 13 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_14_cfg_0 = ( 
    'fct_pool_14_cfg_0',
    (0x83d114c0, 0x83d114c8),
    'FCT Pool 14 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_14_cfg_1 = ( 
    'fct_pool_14_cfg_1',
    (0x83d114c8, 0x83d114d0),
    'FCT Pool 14 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_14_alloc = ( 
    'fct_pool_14_alloc',
    (0x83d114d0, 0x83d114d8),
    'FCT Pool 14 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_14_rls = ( 
    'fct_pool_14_rls',
    (0x83d114d8, 0x83d114e0),
    'FCT Pool 14 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_15_cfg_0 = ( 
    'fct_pool_15_cfg_0',
    (0x83d114e0, 0x83d114e8),
    'FCT Pool 15 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_15_cfg_1 = ( 
    'fct_pool_15_cfg_1',
    (0x83d114e8, 0x83d114f0),
    'FCT Pool 15 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_15_alloc = ( 
    'fct_pool_15_alloc',
    (0x83d114f0, 0x83d114f8),
    'FCT Pool 15 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_15_rls = ( 
    'fct_pool_15_rls',
    (0x83d114f8, 0x83d11500),
    'FCT Pool 15 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_0 = ( 
    'be_ace_flow_ctrl_0',
    (0x83d11500, 0x83d11508),
    'BE ACE Flow Control Register 0',
    [ 
       ('wr_crdt', 0, 8, 'write credit'),
       ('rd_crdt', 16, 24, 'read credit'),
       ('b2n_crdt', 32, 40, 'buffer to NAND credit'),
       ('erase_crdt', 48, 55, 'erase credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_1 = ( 
    'be_ace_flow_ctrl_1',
    (0x83d11508, 0x83d11510),
    'BE ACE Flow Control Register 1',
    [ 
       ('b2n_strm0_crdt', 0, 7, 'stream 0 buffer to NAND credit'),
       ('b2n_strm1_crdt', 8, 15, 'stream 1 buffer to NAND credit'),
       ('b2n_strm2_crdt', 16, 23, 'stream 2 buffer to NAND credit'),
       ('b2n_strm3_crdt', 24, 31, 'stream 3 buffer to NAND credit'),
       ('b2n_strm4_crdt', 32, 39, 'stream 4 buffer to NAND credit'),
       ('b2n_strm5_crdt', 40, 47, 'stream 5 buffer to NAND credit'),
       ('b2n_strm6_crdt', 48, 55, 'stream 6 buffer to NAND credit'),
       ('b2n_strm7_crdt', 56, 63, 'stream 7 buffer to NAND credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_2 = ( 
    'be_ace_flow_ctrl_2',
    (0x83d11510, 0x83d11518),
    'BE ACE Flow Control Register 2',
    [ 
       ('b2n_strm8_crdt', 0, 7, 'stream 8 buffer to NAND credit'),
       ('b2n_strm9_crdt', 8, 15, 'stream 9 buffer to NAND credit'),
       ('b2n_strm10_crdt', 16, 23, 'stream 10 buffer to NAND credit'),
       ('b2n_strm11_crdt', 24, 31, 'stream 11 buffer to NAND credit'),
       ('b2n_strm12_crdt', 32, 39, 'stream 12 buffer to NAND credit'),
       ('b2n_strm13_crdt', 40, 47, 'stream 13 buffer to NAND credit'),
       ('b2n_strm14_crdt', 48, 55, 'stream 14 buffer to NAND credit'),
       ('b2n_strm15_crdt', 56, 63, 'stream 15 buffer to NAND credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_3 = ( 
    'be_ace_flow_ctrl_3',
    (0x83d11518, 0x83d11520),
    'BE ACE Flow Control Register 3',
    [ 
       ('b2n_strm16_crdt', 0, 7, 'stream 16 buffer to NAND credit'),
       ('b2n_strm17_crdt', 8, 15, 'stream 17 buffer to NAND credit'),
       ('b2n_strm18_crdt', 16, 23, 'stream 18 buffer to NAND credit'),
       ('b2n_strm19_crdt', 24, 31, 'stream 19 buffer to NAND credit'),
       ('b2n_strm20_crdt', 32, 39, 'stream 20 buffer to NAND credit'),
       ('b2n_strm21_crdt', 40, 47, 'stream 21 buffer to NAND credit'),
       ('b2n_strm22_crdt', 48, 55, 'stream 22 buffer to NAND credit'),
       ('b2n_strm23_crdt', 56, 63, 'stream 23 buffer to NAND credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_4 = ( 
    'be_ace_flow_ctrl_4',
    (0x83d11520, 0x83d11528),
    'BE ACE Flow Control Register 4',
    [ 
       ('b2n_strm24_crdt', 0, 7, 'stream 24 buffer to NAND credit'),
       ('b2n_strm25_crdt', 8, 15, 'stream 25 buffer to NAND credit'),
       ('b2n_strm26_crdt', 16, 23, 'stream 26 buffer to NAND credit'),
       ('b2n_strm27_crdt', 24, 31, 'stream 27 buffer to NAND credit'),
       ('b2n_strm28_crdt', 32, 39, 'stream 28 buffer to NAND credit'),
       ('b2n_strm29_crdt', 40, 47, 'stream 29 buffer to NAND credit'),
       ('b2n_strm30_crdt', 48, 55, 'stream 30 buffer to NAND credit'),
       ('b2n_strm31_crdt', 56, 63, 'stream 31 buffer to NAND credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_flow_ctrl_5 = ( 
    'be_ace_flow_ctrl_5',
    (0x83d11528, 0x83d11530),
    'BE ACE Flow Control Register 5',
    [ 
       ('folding_crdt', 0, 8, 'folding credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_debug = ( 
    'be_ace_debug',
    (0x83d11540, 0x83d11548),
    'BE ACE Debug Register',
    [ 
       ('control', 0, 31, 'debug control\n              bit0: stop on axi resp err\n              bit1: disable lba compare\n              bit2: stop on cmd err\n              bit3: wait for obuf rls\n              bit4: be ace abort\n              bit5: clear duplicate lp_ind in ccs cpl msg error\n              others: reserved'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma_cfg = ( 
    'sys_dma_cfg',
    (0x83d11550, 0x83d11558),
    'System DMA Configure Register',
    [ 
       ('baddr', 0, 39, 'base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_msg_id_cfg = ( 
    'msg_id_cfg',
    (0x83d11558, 0x83d11560),
    'Message ID Configure Register',
    [ 
       ('num', 0, 11, 'number of message id HW could use'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_gc_wr_cfg = ( 
    'gc_wr_cfg',
    (0x83d11560, 0x83d11568),
    'GC Write Configure Register',
    [ 
       ('src_base_addr', 0, 39, 'data source base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma_cfg_ext = ( 
    'sys_dma_cfg_ext',
    (0x83d11568, 0x83d11570),
    'System DMA Configure Extended Register',
    [ 
       ('seg_id', 0, 1, 'landing buffer segmentation id for gc write'),
       ('folding_seg_id', 4, 5, 'landing buffer segmentation id for folding'),
       ('single_ch_wr', 8, 8, 'Only use ch0 for GC/ACE wr from DDR'),
       ('single_ch_rd', 9, 9, 'Only use ch2 for GC/ACE read to DDR'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_lb_mgr_status = ( 
    'lb_mgr_status',
    (0x83d11570, 0x83d11578),
    'Landing Buffer Manager Status Register',
    [ 
       ('seg0_rtn_crdt_cnt', 0, 15, 'landing buffer segment 0 returned credit count'),
       ('seg1_rtn_crdt_cnt', 16, 31, 'landing buffer segment 1 returned credit'),
       ('seg2_rtn_crdt_cnt', 32, 47, 'landing buffer segment 2 returned credit'),
       ('seg3_rtn_crdt_cnt', 48, 63, 'landing buffer segment 3 returned credit'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_gc_wr_cfg_ext = ( 
    'gc_wr_cfg_ext',
    (0x83d11578, 0x83d11580),
    'GC Write Configure Extended  Register',
    [ 
       ('src_base_addr_ext', 0, 39, 'data source base address extended'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch1_ctrl = ( 
    'sdma_ch1_ctrl',
    (0x83d11580, 0x83d11588),
    'System DMA CH1 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to system DMA ch1_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch1_mask = ( 
    'sdma_ch1_mask',
    (0x83d11588, 0x83d11590),
    'System DMA CH1 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sdma_ch1_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sdma_ch1_ctrl will be written to system DMA ch1_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch2_ctrl = ( 
    'sdma_ch2_ctrl',
    (0x83d11590, 0x83d11598),
    'System DMA CH2 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to system DMA ch2_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch2_mask = ( 
    'sdma_ch2_mask',
    (0x83d11598, 0x83d115a0),
    'System DMA CH2 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sdma_ch2_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sdma_ch2_ctrl will be written to system DMA ch2_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch3_ctrl = ( 
    'sdma_ch3_ctrl',
    (0x83d115a0, 0x83d115a8),
    'System DMA CH3 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to system DMA ch3_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch3_mask = ( 
    'sdma_ch3_mask',
    (0x83d115a8, 0x83d115b0),
    'System DMA CH3 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sdma_ch3_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sdma_ch3_ctrl will be written to system DMA ch3_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch4_ctrl = ( 
    'sdma_ch4_ctrl',
    (0x83d115b0, 0x83d115b8),
    'System DMA CH4 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to system DMA ch4_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sdma_ch4_mask = ( 
    'sdma_ch4_mask',
    (0x83d115b8, 0x83d115c0),
    'System DMA CH4 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sdma_ch4_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sdma_ch4_ctrl will be written to system DMA ch4_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_gc_wr_cfg_bm = ( 
    'gc_wr_cfg_bm',
    (0x83d115c0, 0x83d115c8),
    'GC Write Configure BM SRAM  Register',
    [ 
       ('src_base_addr_bm', 0, 39, 'data source base address for bm sram'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_msgid_fifo_rdwr_cnt = ( 
    'msgid_fifo_rdwr_cnt',
    (0x83d115c8, 0x83d115cc),
    'MSG ID FIFO RD/WR Counter Register',
    [ 
       ('msgid_fifo_rdwr_cnt', 0, 31, 'MSG ID FIFO RD/WR Counter Register'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_ace_mem_ctrl_0 = ( 
    'be_ace_mem_ctrl_0',
    (0x83d11600, 0x83d11608),
    'BE ACE Memory Control Register 0',
    [ 
       ('ecc_en', 0, 15, 'ECC enable control\n              Bit 0: cmd_stat_mem\n              Bit 1: q_prop_mem\n              Bit 2: sq_prop_mem\n              Bit 3: cq_prop_mem\n              Bit 4: q_statistic_mem\n              Bit 5: rd_stat_mem\n              Bit 6: gc_wr_mem\n              Bit 7: linklist_mem\n              Bit 8: linkbuf_mem\n              Bit 9: folding_wr_mem\n              Bit 10: rdcmd_fifo_mem\n              Bit 11: msgid_fifo_mem\n              others: reserved'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mem_err_inj_en = ( 
    'be_ace_mem_err_inj_en',
    (0x83d11608, 0x83d11610),
    'BE ACE Memory Error Inject Register',
    [ 
       ('val', 0, 1, "2'h0: no error injection;\n              2'h1: 1 bit ecc error injection;\n              2'h2: 2 bit ecc error injection;\n              others: reserved"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mem_err_inj_sel = ( 
    'be_ace_mem_err_inj_sel',
    (0x83d11610, 0x83d11618),
    'BE ACE Memory Error Inject Select Register',
    [ 
       ('sel', 0, 7, "8'h00: cmd_stat_mem\n              8'h01: q_prop_mem\n              8'h02: sq_prop_mem\n              8'h03: cq_prop_mem\n              8'h04: q_statistic_mem\n              8'h05: rd_stat_mem\n              8'h06: gc_wr_mem\n              8'h07: linklist_mem\n              8'h08: linkbuf_mem\n              8'h09: folding_wr_mem\n              8'h0a: rdcmd_fifo_mem\n              8'h0b: msgid_fifo_mem\n              others: reserved"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mem_err_inj_stat_0 = ( 
    'be_ace_mem_err_inj_stat_0',
    (0x83d11618, 0x83d11620),
    'BE ACE Memory Error Inject Status Register 0',
    [ 
       ('cor_err', 0, 15, 'bit 0: cmd_stat_mem correctable error\n              bit 1: q_prop_mem correctable error\n              bit 2: sq_prop_mem correctable error\n              bit 3: cq_prop_mem correctable error\n              bit 4: q_statistic_mem correctable error\n              bit 5: rd_stat_mem correctable error\n              bit 6: gc_wr_mem correctable error\n              bit 7: linklist_mem correctable error\n              bit 8: linkbuf_mem correctable error\n              bit 9: folding_wr_mem correctable error\n              bit 10: rdcmd_fifo_mem correctable error\n              bit 11: msgid_fifo_mem correctable error\n              others: reserved'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mem_err_inj_stat_1 = ( 
    'be_ace_mem_err_inj_stat_1',
    (0x83d11620, 0x83d11628),
    'BE ACE Memory Error Inject Status Register 1',
    [ 
       ('uncor_err', 0, 15, 'bit 0: cmd_stat_mem uncorrectable error\n              bit 1: q_prop_mem uncorrectable error\n              bit 2: sq_prop_mem uncorrectable error\n              bit 3: cq_prop_mem uncorrectable error\n              bit 4: q_statistic_mem uncorrectable error\n              bit 5: rd_stat_mem uncorrectable error\n              bit 6: gc_wr_mem uncorrectable error\n              bit 7: linklist_mem uncorrectable error\n              bit 8: linkbuf_mem uncorrectable error\n              bit 9: folding_wr_mem uncorrectable error\n              bit 10: rdcmd_fifo_mem uncorrectable error\n              bit 11: msgid_fifo_mem uncorrectable error\n              others: reserved'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mem_acc_en = ( 
    'be_ace_mem_acc_en',
    (0x83d11700, 0x83d11708),
    'BE ACE Memory Access Enable Register',
    [ 
       ('en', 0, 0, "1'b0: disable memory access\n              1'b1: enable memory access"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_ctrl_0 = ( 
    'be_ace_acc_mem_ctrl_0',
    (0x83d11708, 0x83d11710),
    'BE ACE Memory Access Control Register 0',
    [ 
       ('mem_sel', 0, 7, "memory select\n              'h0: cmd_stat_mem\n              'h1: rd_stat_mem, bit[255:0]\n              'h2: gc_wr_mem\n              'h3: linklist_q_mem\n              'h4: linklist_d_mem\n              'h5: folding_wr_mem\n              'h6: rd_stat_mem, bit[511:256]\n              'h7: rd_stat_mem, bit[639:512]\n              others: reserved\n\n              memory access flow:\n              1) select memory by programming be_ace_acc_mem_ctrl_0\n              2) program be_ace_acc_mem_ctrl_1 for starting dumping address\n              3) read be_ace_acc_mem_out_0 ~ be_ace_acc_mem_out_3 for output value. FW can read only 1 or 2 for the desired data width\n              4) repeat step 3) until all entries are red out\n              Rd_stat_mem [127:0] ccp crc bitmap, [255:128] lp crc bitmap, [383:256] lba mismatch bitmap, [511:384] dma error bitmap, [639:512] received lp bitmap\n\n              Cmdst memory common for all cmds:\n                      bit[7:0]   opcode , \n                      bit[11:8]  sub_opcode,  \n                      bit[16:12] length, \n                      bit[29:17] fct_index, \n                      bit[30]    valid, \n                      bit[31]    fuse\n                      bit[118:112] qid\n              For write:\n                     bit[38:32] wr_cnt, \n                     bit[46:40]   nlb, \n                     bit[55:48]   stream_id, \n                     bit[57:56]   seg_id,  \n                     bit[58]   dma_err\n                     bit[120] fecmd\n              For read:\n                     bit[71:32]   base_addr  \n                     bit[78:72]   nlb\n                     bit[79]      lbs4k\n                     bit[86:80]   xfr_cnt //accumulate number of lp received\n                     bit[95:88]   ssv\n                     bit[103:96]  esv\n                     bit[110:104] mlpind  //maximum lp ind, for assign esv \n                     bit[121]     forunc  //for rd dma trig\n                     bit[139:128] act_idx\n             For folding:\n                     bit[63:32]   w2p_dw1\n                     bit[78:72]   nlb\n                     bit[86:80]   xfr_cnt //accumulate number of lp received\n                     bit[159:128] w2p_dw2"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_ctrl_1 = ( 
    'be_ace_acc_mem_ctrl_1',
    (0x83d11710, 0x83d11718),
    'BE ACE Memory Access Control Register 1',
    [ 
       ('mem_addr', 0, 15, 'Memory address.\n              Memory address can be set by FW, or auto-inc when reading be_ace_acc_mem_out_0'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_out_0 = ( 
    'be_ace_acc_mem_out_0',
    (0x83d11718, 0x83d11720),
    'BE ACE Memory Access Output Register 0',
    [ 
       ('data', 0, 63, 'memory output data [63:0]'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_out_1 = ( 
    'be_ace_acc_mem_out_1',
    (0x83d11720, 0x83d11728),
    'BE ACE Memory Access Output Register 1',
    [ 
       ('data', 0, 63, 'memory output data [127:64]'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_out_2 = ( 
    'be_ace_acc_mem_out_2',
    (0x83d11728, 0x83d11730),
    'BE ACE Memory Access Output Register 2',
    [ 
       ('data', 0, 63, 'memory output data [191:128]'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_acc_mem_out_3 = ( 
    'be_ace_acc_mem_out_3',
    (0x83d11730, 0x83d11738),
    'BE ACE Memory Access Output Register 3',
    [ 
       ('data', 0, 63, 'memory output data [255:192]'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mon_ctrl = ( 
    'be_ace_mon_ctrl',
    (0x83d11738, 0x83d11740),
    'BE ACE Monitor Control Register',
    [ 
       ('sel_src', 0, 0, "monitor select source\n              1'b0: from be_ace_mon_sel register;\n              1'b1: from top debug_sel;"),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mon_sel = ( 
    'be_ace_mon_sel',
    (0x83d11740, 0x83d11748),
    'BE ACE Monitor Select Register',
    [ 
       ('mon_sel', 0, 23, 'monitor select'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_mon_sig_out = ( 
    'be_ace_mon_sig_out',
    (0x83d11748, 0x83d11750),
    'BE ACE Monitor output Register',
    [ 
       ('mon_sig_out', 0, 31, 'monitor output'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_be_ace_status = ( 
    'be_ace_status',
    (0x83d11800, 0x83d11808),
    'BE ACE Status Register',
    [ 
       ('idle', 0, 0, 'Set to 1 when there is no pending commands in BE_ACE.\n              BE_ACE is idle when\n              1) no pending commands in enabled SQ\n              2) no outstanding commands in any Q\n              3) message ID all returned'),
       ('ready', 1, 1, 'Set to 1 when all initialization flows finish'),
       ('all_fe_w2p_sent', 2, 2, 'Set to 1 when all fe_w2p received from fe_ace are sending to CCS'),
       ('all_be_w2p_sent', 3, 3, 'Set to 1 when all GC_wr or ace_w2p received from SQs are sending to CCS'),
       ('all_be_folding_w2p_sent', 4, 4, 'Set to 1 when all folding w2p is sent, and the state machine is idle'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_cfg = ( 
    'sys_dma1_cfg',
    (0x83d11880, 0x83d11888),
    'System DMA1 Configure Register',
    [ 
       ('baddr', 0, 39, 'base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch1_ctrl = ( 
    'sys_dma1_ch1_ctrl',
    (0x83d11890, 0x83d11898),
    'System dma1 CH1 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to Sys DMA1 ch1_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch1_mask = ( 
    'sys_dma1_ch1_mask',
    (0x83d11898, 0x83d118a0),
    'Sys DMA1 CH1 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sys_dma1_ch1_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sys_dma1_ch1_ctrl will be written to sys dma1 ch1_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch2_ctrl = ( 
    'sys_dma1_ch2_ctrl',
    (0x83d118a0, 0x83d118a8),
    'Sys dma1 CH2 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to Sys dma1 ch2_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_Sys_dma1_ch2_mask = ( 
    'Sys_dma1_ch2_mask',
    (0x83d118a8, 0x83d118b0),
    'Sys dma1 CH2 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sys_dma1_ch2_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sys_dma1_ch1_ctrl will be written to sys dma1 ch2_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch3_ctrl = ( 
    'sys_dma1_ch3_ctrl',
    (0x83d118b0, 0x83d118b8),
    'Sys dma1 CH3 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to sys dma1 ch3_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch3_mask = ( 
    'sys_dma1_ch3_mask',
    (0x83d118b8, 0x83d118c0),
    'sys dma1 CH3 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sys_dma1_ch3_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sys_dma1_ch3_ctrl will be written to sys dma1 ch3_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch4_ctrl = ( 
    'sys_dma1_ch4_ctrl',
    (0x83d118c0, 0x83d118c8),
    'sys dma1 CH4 Control Register',
    [ 
       ('value', 0, 63, 'value to be written to sys dma1 ch4_ctrl register'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_sys_dma1_ch4_mask = ( 
    'sys_dma1_ch4_mask',
    (0x83d118c8, 0x83d118d0),
    'Sys dma1 CH4 Mask Register',
    [ 
       ('mask', 0, 63, 'Use with sys_dma1_ch4_ctrl register.value of 1 on each bit indicates the value at the corresponding position in sys_dma1_ch4_ctrl will be written to sys dma1 ch4_ctrl.'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_16_cfg_0 = ( 
    'fct_pool_16_cfg_0',
    (0x83d11900, 0x83d11908),
    'FCT Pool 16 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_16_cfg_1 = ( 
    'fct_pool_16_cfg_1',
    (0x83d11908, 0x83d11910),
    'FCT Pool 16 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_16_alloc = ( 
    'fct_pool_16_alloc',
    (0x83d11910, 0x83d11918),
    'FCT Pool 16 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_16_rls = ( 
    'fct_pool_16_rls',
    (0x83d11918, 0x83d11920),
    'FCT Pool 16 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_17_cfg_0 = ( 
    'fct_pool_17_cfg_0',
    (0x83d11920, 0x83d11928),
    'FCT Pool 17 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_17_cfg_1 = ( 
    'fct_pool_17_cfg_1',
    (0x83d11928, 0x83d11930),
    'FCT Pool 17 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_17_alloc = ( 
    'fct_pool_17_alloc',
    (0x83d11930, 0x83d11938),
    'FCT Pool 17 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_17_rls = ( 
    'fct_pool_17_rls',
    (0x83d11938, 0x83d11940),
    'FCT Pool 17 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_18_cfg_0 = ( 
    'fct_pool_18_cfg_0',
    (0x83d11940, 0x83d11948),
    'FCT Pool 18 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_18_cfg_1 = ( 
    'fct_pool_18_cfg_1',
    (0x83d11948, 0x83d11950),
    'FCT Pool 18 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_18_alloc = ( 
    'fct_pool_18_alloc',
    (0x83d11950, 0x83d11958),
    'FCT Pool 18 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_18_rls = ( 
    'fct_pool_18_rls',
    (0x83d11958, 0x83d11960),
    'FCT Pool 18 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_19_cfg_0 = ( 
    'fct_pool_19_cfg_0',
    (0x83d11960, 0x83d11968),
    'FCT Pool 19 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_19_cfg_1 = ( 
    'fct_pool_19_cfg_1',
    (0x83d11968, 0x83d11970),
    'FCT Pool 19 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_19_alloc = ( 
    'fct_pool_19_alloc',
    (0x83d11970, 0x83d11978),
    'FCT Pool 19 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_19_rls = ( 
    'fct_pool_19_rls',
    (0x83d11978, 0x83d11980),
    'FCT Pool 19 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_20_cfg_0 = ( 
    'fct_pool_20_cfg_0',
    (0x83d11980, 0x83d11988),
    'FCT Pool 20 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_20_cfg_1 = ( 
    'fct_pool_20_cfg_1',
    (0x83d11988, 0x83d11990),
    'FCT Pool 20 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_20_alloc = ( 
    'fct_pool_20_alloc',
    (0x83d11990, 0x83d11998),
    'FCT Pool 20 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_20_rls = ( 
    'fct_pool_20_rls',
    (0x83d11998, 0x83d119a0),
    'FCT Pool 20 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_21_cfg_0 = ( 
    'fct_pool_21_cfg_0',
    (0x83d119a0, 0x83d119a8),
    'FCT Pool 21 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_21_cfg_1 = ( 
    'fct_pool_21_cfg_1',
    (0x83d119a8, 0x83d119b0),
    'FCT Pool 21 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_21_alloc = ( 
    'fct_pool_21_alloc',
    (0x83d119b0, 0x83d119b8),
    'FCT Pool 21 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_21_rls = ( 
    'fct_pool_21_rls',
    (0x83d119b8, 0x83d119c0),
    'FCT Pool 21 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_22_cfg_0 = ( 
    'fct_pool_22_cfg_0',
    (0x83d119c0, 0x83d119c8),
    'FCT Pool 22 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_22_cfg_1 = ( 
    'fct_pool_22_cfg_1',
    (0x83d119c8, 0x83d119d0),
    'FCT Pool 22 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_22_alloc = ( 
    'fct_pool_22_alloc',
    (0x83d119d0, 0x83d119d8),
    'FCT Pool 22 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_22_rls = ( 
    'fct_pool_22_rls',
    (0x83d119d8, 0x83d119e0),
    'FCT Pool 22 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_23_cfg_0 = ( 
    'fct_pool_23_cfg_0',
    (0x83d119e0, 0x83d119e8),
    'FCT Pool 23 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_23_cfg_1 = ( 
    'fct_pool_23_cfg_1',
    (0x83d119e8, 0x83d119f0),
    'FCT Pool 23 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_23_alloc = ( 
    'fct_pool_23_alloc',
    (0x83d119f0, 0x83d119f8),
    'FCT Pool 23 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_23_rls = ( 
    'fct_pool_23_rls',
    (0x83d119f8, 0x83d11a00),
    'FCT Pool 23 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_24_cfg_0 = ( 
    'fct_pool_24_cfg_0',
    (0x83d11a00, 0x83d11a08),
    'FCT Pool 24 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_24_cfg_1 = ( 
    'fct_pool_24_cfg_1',
    (0x83d11a08, 0x83d11a10),
    'FCT Pool 24 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_24_alloc = ( 
    'fct_pool_24_alloc',
    (0x83d11a10, 0x83d11a18),
    'FCT Pool 24 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_24_rls = ( 
    'fct_pool_24_rls',
    (0x83d11a18, 0x83d11a20),
    'FCT Pool 24 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_25_cfg_0 = ( 
    'fct_pool_25_cfg_0',
    (0x83d11a20, 0x83d11a28),
    'FCT Pool 25 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_25_cfg_1 = ( 
    'fct_pool_25_cfg_1',
    (0x83d11a28, 0x83d11a30),
    'FCT Pool 25 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_25_alloc = ( 
    'fct_pool_25_alloc',
    (0x83d11a30, 0x83d11a38),
    'FCT Pool 25 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_25_rls = ( 
    'fct_pool_25_rls',
    (0x83d11a38, 0x83d11a40),
    'FCT Pool 25 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_26_cfg_0 = ( 
    'fct_pool_26_cfg_0',
    (0x83d11a40, 0x83d11a48),
    'FCT Pool 26 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_26_cfg_1 = ( 
    'fct_pool_26_cfg_1',
    (0x83d11a48, 0x83d11a50),
    'FCT Pool 26 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_26_alloc = ( 
    'fct_pool_26_alloc',
    (0x83d11a50, 0x83d11a58),
    'FCT Pool 26 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_26_rls = ( 
    'fct_pool_26_rls',
    (0x83d11a58, 0x83d11a60),
    'FCT Pool 26 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_27_cfg_0 = ( 
    'fct_pool_27_cfg_0',
    (0x83d11a60, 0x83d11a68),
    'FCT Pool 27 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_27_cfg_1 = ( 
    'fct_pool_27_cfg_1',
    (0x83d11a68, 0x83d11a70),
    'FCT Pool 27 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_27_alloc = ( 
    'fct_pool_27_alloc',
    (0x83d11a70, 0x83d11a78),
    'FCT Pool 27 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_27_rls = ( 
    'fct_pool_27_rls',
    (0x83d11a78, 0x83d11a80),
    'FCT Pool 27 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_28_cfg_0 = ( 
    'fct_pool_28_cfg_0',
    (0x83d11a80, 0x83d11a88),
    'FCT Pool 28 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_28_cfg_1 = ( 
    'fct_pool_28_cfg_1',
    (0x83d11a88, 0x83d11a90),
    'FCT Pool 28 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_28_alloc = ( 
    'fct_pool_28_alloc',
    (0x83d11a90, 0x83d11a98),
    'FCT Pool 28 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_28_rls = ( 
    'fct_pool_28_rls',
    (0x83d11a98, 0x83d11aa0),
    'FCT Pool 28 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_29_cfg_0 = ( 
    'fct_pool_29_cfg_0',
    (0x83d11aa0, 0x83d11aa8),
    'FCT Pool 29 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_29_cfg_1 = ( 
    'fct_pool_29_cfg_1',
    (0x83d11aa8, 0x83d11ab0),
    'FCT Pool 29 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_29_alloc = ( 
    'fct_pool_29_alloc',
    (0x83d11ab0, 0x83d11ab8),
    'FCT Pool 29 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_29_rls = ( 
    'fct_pool_29_rls',
    (0x83d11ab8, 0x83d11ac0),
    'FCT Pool 29 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_30_cfg_0 = ( 
    'fct_pool_30_cfg_0',
    (0x83d11ac0, 0x83d11ac8),
    'FCT Pool 30 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_30_cfg_1 = ( 
    'fct_pool_30_cfg_1',
    (0x83d11ac8, 0x83d11ad0),
    'FCT Pool 30 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_30_alloc = ( 
    'fct_pool_30_alloc',
    (0x83d11ad0, 0x83d11ad8),
    'FCT Pool 30 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_30_rls = ( 
    'fct_pool_30_rls',
    (0x83d11ad8, 0x83d11ae0),
    'FCT Pool 30 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_31_cfg_0 = ( 
    'fct_pool_31_cfg_0',
    (0x83d11ae0, 0x83d11ae8),
    'FCT Pool 31 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_31_cfg_1 = ( 
    'fct_pool_31_cfg_1',
    (0x83d11ae8, 0x83d11af0),
    'FCT Pool 31 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_31_alloc = ( 
    'fct_pool_31_alloc',
    (0x83d11af0, 0x83d11af8),
    'FCT Pool 31 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_31_rls = ( 
    'fct_pool_31_rls',
    (0x83d11af8, 0x83d11b00),
    'FCT Pool 31 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_32_cfg_0 = ( 
    'fct_pool_32_cfg_0',
    (0x83d11b00, 0x83d11b08),
    'FCT Pool 32 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_32_cfg_1 = ( 
    'fct_pool_32_cfg_1',
    (0x83d11b08, 0x83d11b10),
    'FCT Pool 32 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_32_alloc = ( 
    'fct_pool_32_alloc',
    (0x83d11b10, 0x83d11b18),
    'FCT Pool 32 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_32_rls = ( 
    'fct_pool_32_rls',
    (0x83d11b18, 0x83d11b20),
    'FCT Pool 32 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_33_cfg_0 = ( 
    'fct_pool_33_cfg_0',
    (0x83d11b20, 0x83d11b28),
    'FCT Pool 33 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_33_cfg_1 = ( 
    'fct_pool_33_cfg_1',
    (0x83d11b28, 0x83d11b30),
    'FCT Pool 33 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_33_alloc = ( 
    'fct_pool_33_alloc',
    (0x83d11b30, 0x83d11b38),
    'FCT Pool 33 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_33_rls = ( 
    'fct_pool_33_rls',
    (0x83d11b38, 0x83d11b40),
    'FCT Pool 33 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_34_cfg_0 = ( 
    'fct_pool_34_cfg_0',
    (0x83d11b40, 0x83d11b48),
    'FCT Pool 34 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_34_cfg_1 = ( 
    'fct_pool_34_cfg_1',
    (0x83d11b48, 0x83d11b50),
    'FCT Pool 34 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_34_alloc = ( 
    'fct_pool_34_alloc',
    (0x83d11b50, 0x83d11b58),
    'FCT Pool 34 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_34_rls = ( 
    'fct_pool_34_rls',
    (0x83d11b58, 0x83d11b60),
    'FCT Pool 34 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_35_cfg_0 = ( 
    'fct_pool_35_cfg_0',
    (0x83d11b60, 0x83d11b68),
    'FCT Pool 35 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_35_cfg_1 = ( 
    'fct_pool_35_cfg_1',
    (0x83d11b68, 0x83d11b70),
    'FCT Pool 35 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_35_alloc = ( 
    'fct_pool_35_alloc',
    (0x83d11b70, 0x83d11b78),
    'FCT Pool 35 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_35_rls = ( 
    'fct_pool_35_rls',
    (0x83d11b78, 0x83d11b80),
    'FCT Pool 35 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_36_cfg_0 = ( 
    'fct_pool_36_cfg_0',
    (0x83d11b80, 0x83d11b88),
    'FCT Pool 36 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_36_cfg_1 = ( 
    'fct_pool_36_cfg_1',
    (0x83d11b88, 0x83d11b90),
    'FCT Pool 36 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_36_alloc = ( 
    'fct_pool_36_alloc',
    (0x83d11b90, 0x83d11b98),
    'FCT Pool 36 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_36_rls = ( 
    'fct_pool_36_rls',
    (0x83d11b98, 0x83d11ba0),
    'FCT Pool 36 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_37_cfg_0 = ( 
    'fct_pool_37_cfg_0',
    (0x83d11ba0, 0x83d11ba8),
    'FCT Pool 37 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_37_cfg_1 = ( 
    'fct_pool_37_cfg_1',
    (0x83d11ba8, 0x83d11bb0),
    'FCT Pool 37 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_37_alloc = ( 
    'fct_pool_37_alloc',
    (0x83d11bb0, 0x83d11bb8),
    'FCT Pool 37 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_37_rls = ( 
    'fct_pool_37_rls',
    (0x83d11bb8, 0x83d11bc0),
    'FCT Pool 37 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_38_cfg_0 = ( 
    'fct_pool_38_cfg_0',
    (0x83d11bc0, 0x83d11bc8),
    'FCT Pool 38 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_38_cfg_1 = ( 
    'fct_pool_38_cfg_1',
    (0x83d11bc8, 0x83d11bd0),
    'FCT Pool 38 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_38_alloc = ( 
    'fct_pool_38_alloc',
    (0x83d11bd0, 0x83d11bd8),
    'FCT Pool 38 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_38_rls = ( 
    'fct_pool_38_rls',
    (0x83d11bd8, 0x83d11be0),
    'FCT Pool 38 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_39_cfg_0 = ( 
    'fct_pool_39_cfg_0',
    (0x83d11be0, 0x83d11be8),
    'FCT Pool 39 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_39_cfg_1 = ( 
    'fct_pool_39_cfg_1',
    (0x83d11be8, 0x83d11bf0),
    'FCT Pool 39 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_39_alloc = ( 
    'fct_pool_39_alloc',
    (0x83d11bf0, 0x83d11bf8),
    'FCT Pool 39 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_39_rls = ( 
    'fct_pool_39_rls',
    (0x83d11bf8, 0x83d11c00),
    'FCT Pool 39 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_40_cfg_0 = ( 
    'fct_pool_40_cfg_0',
    (0x83d11c00, 0x83d11c08),
    'FCT Pool 40 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_40_cfg_1 = ( 
    'fct_pool_40_cfg_1',
    (0x83d11c08, 0x83d11c10),
    'FCT Pool 40 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_40_alloc = ( 
    'fct_pool_40_alloc',
    (0x83d11c10, 0x83d11c18),
    'FCT Pool 40 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_40_rls = ( 
    'fct_pool_40_rls',
    (0x83d11c18, 0x83d11c20),
    'FCT Pool 40 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_41_cfg_0 = ( 
    'fct_pool_41_cfg_0',
    (0x83d11c20, 0x83d11c28),
    'FCT Pool 41 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_41_cfg_1 = ( 
    'fct_pool_41_cfg_1',
    (0x83d11c28, 0x83d11c30),
    'FCT Pool 41 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_41_alloc = ( 
    'fct_pool_41_alloc',
    (0x83d11c30, 0x83d11c38),
    'FCT Pool 41 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_41_rls = ( 
    'fct_pool_41_rls',
    (0x83d11c38, 0x83d11c40),
    'FCT Pool 41 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_42_cfg_0 = ( 
    'fct_pool_42_cfg_0',
    (0x83d11c40, 0x83d11c48),
    'FCT Pool 42 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_42_cfg_1 = ( 
    'fct_pool_42_cfg_1',
    (0x83d11c48, 0x83d11c50),
    'FCT Pool 42 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_42_alloc = ( 
    'fct_pool_42_alloc',
    (0x83d11c50, 0x83d11c58),
    'FCT Pool 42 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_42_rls = ( 
    'fct_pool_42_rls',
    (0x83d11c58, 0x83d11c60),
    'FCT Pool 42 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_43_cfg_0 = ( 
    'fct_pool_43_cfg_0',
    (0x83d11c60, 0x83d11c68),
    'FCT Pool 43 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_43_cfg_1 = ( 
    'fct_pool_43_cfg_1',
    (0x83d11c68, 0x83d11c70),
    'FCT Pool 43 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_43_alloc = ( 
    'fct_pool_43_alloc',
    (0x83d11c70, 0x83d11c78),
    'FCT Pool 43 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_43_rls = ( 
    'fct_pool_43_rls',
    (0x83d11c78, 0x83d11c80),
    'FCT Pool 43 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_44_cfg_0 = ( 
    'fct_pool_44_cfg_0',
    (0x83d11c80, 0x83d11c88),
    'FCT Pool 44 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_44_cfg_1 = ( 
    'fct_pool_44_cfg_1',
    (0x83d11c88, 0x83d11c90),
    'FCT Pool 44 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_44_alloc = ( 
    'fct_pool_44_alloc',
    (0x83d11c90, 0x83d11c98),
    'FCT Pool 44 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_44_rls = ( 
    'fct_pool_44_rls',
    (0x83d11c98, 0x83d11ca0),
    'FCT Pool 44 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_45_cfg_0 = ( 
    'fct_pool_45_cfg_0',
    (0x83d11ca0, 0x83d11ca8),
    'FCT Pool 45 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_45_cfg_1 = ( 
    'fct_pool_45_cfg_1',
    (0x83d11ca8, 0x83d11cb0),
    'FCT Pool 45 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_45_alloc = ( 
    'fct_pool_45_alloc',
    (0x83d11cb0, 0x83d11cb8),
    'FCT Pool 45 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_45_rls = ( 
    'fct_pool_45_rls',
    (0x83d11cb8, 0x83d11cc0),
    'FCT Pool 45 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_46_cfg_0 = ( 
    'fct_pool_46_cfg_0',
    (0x83d11cc0, 0x83d11cc8),
    'FCT Pool 46 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_46_cfg_1 = ( 
    'fct_pool_46_cfg_1',
    (0x83d11cc8, 0x83d11cd0),
    'FCT Pool 46 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_46_alloc = ( 
    'fct_pool_46_alloc',
    (0x83d11cd0, 0x83d11cd8),
    'FCT Pool 46 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_46_rls = ( 
    'fct_pool_46_rls',
    (0x83d11cd8, 0x83d11ce0),
    'FCT Pool 46 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_47_cfg_0 = ( 
    'fct_pool_47_cfg_0',
    (0x83d11ce0, 0x83d11ce8),
    'FCT Pool 47 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_47_cfg_1 = ( 
    'fct_pool_47_cfg_1',
    (0x83d11ce8, 0x83d11cf0),
    'FCT Pool 47 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_47_alloc = ( 
    'fct_pool_47_alloc',
    (0x83d11cf0, 0x83d11cf8),
    'FCT Pool 47 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_47_rls = ( 
    'fct_pool_47_rls',
    (0x83d11cf8, 0x83d11d00),
    'FCT Pool 47 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_48_cfg_0 = ( 
    'fct_pool_48_cfg_0',
    (0x83d11d00, 0x83d11d08),
    'FCT Pool 48 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_48_cfg_1 = ( 
    'fct_pool_48_cfg_1',
    (0x83d11d08, 0x83d11d10),
    'FCT Pool 48 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_48_alloc = ( 
    'fct_pool_48_alloc',
    (0x83d11d10, 0x83d11d18),
    'FCT Pool 48 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_48_rls = ( 
    'fct_pool_48_rls',
    (0x83d11d18, 0x83d11d20),
    'FCT Pool 48 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_49_cfg_0 = ( 
    'fct_pool_49_cfg_0',
    (0x83d11d20, 0x83d11d28),
    'FCT Pool 49 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_49_cfg_1 = ( 
    'fct_pool_49_cfg_1',
    (0x83d11d28, 0x83d11d30),
    'FCT Pool 49 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_49_alloc = ( 
    'fct_pool_49_alloc',
    (0x83d11d30, 0x83d11d38),
    'FCT Pool 49 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_49_rls = ( 
    'fct_pool_49_rls',
    (0x83d11d38, 0x83d11d40),
    'FCT Pool 49 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_50_cfg_0 = ( 
    'fct_pool_50_cfg_0',
    (0x83d11d40, 0x83d11d48),
    'FCT Pool 50 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_50_cfg_1 = ( 
    'fct_pool_50_cfg_1',
    (0x83d11d48, 0x83d11d50),
    'FCT Pool 50 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_50_alloc = ( 
    'fct_pool_50_alloc',
    (0x83d11d50, 0x83d11d58),
    'FCT Pool 50 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_50_rls = ( 
    'fct_pool_50_rls',
    (0x83d11d58, 0x83d11d60),
    'FCT Pool 50 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_51_cfg_0 = ( 
    'fct_pool_51_cfg_0',
    (0x83d11d60, 0x83d11d68),
    'FCT Pool 51 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_51_cfg_1 = ( 
    'fct_pool_51_cfg_1',
    (0x83d11d68, 0x83d11d70),
    'FCT Pool 51 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_51_alloc = ( 
    'fct_pool_51_alloc',
    (0x83d11d70, 0x83d11d78),
    'FCT Pool 51 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_51_rls = ( 
    'fct_pool_51_rls',
    (0x83d11d78, 0x83d11d80),
    'FCT Pool 51 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_52_cfg_0 = ( 
    'fct_pool_52_cfg_0',
    (0x83d11d80, 0x83d11d88),
    'FCT Pool 52 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_52_cfg_1 = ( 
    'fct_pool_52_cfg_1',
    (0x83d11d88, 0x83d11d90),
    'FCT Pool 52 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_52_alloc = ( 
    'fct_pool_52_alloc',
    (0x83d11d90, 0x83d11d98),
    'FCT Pool 52 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_52_rls = ( 
    'fct_pool_52_rls',
    (0x83d11d98, 0x83d11da0),
    'FCT Pool 52 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_53_cfg_0 = ( 
    'fct_pool_53_cfg_0',
    (0x83d11da0, 0x83d11da8),
    'FCT Pool 53 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_53_cfg_1 = ( 
    'fct_pool_53_cfg_1',
    (0x83d11da8, 0x83d11db0),
    'FCT Pool 53 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_53_alloc = ( 
    'fct_pool_53_alloc',
    (0x83d11db0, 0x83d11db8),
    'FCT Pool 53 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_53_rls = ( 
    'fct_pool_53_rls',
    (0x83d11db8, 0x83d11dc0),
    'FCT Pool 53 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_54_cfg_0 = ( 
    'fct_pool_54_cfg_0',
    (0x83d11dc0, 0x83d11dc8),
    'FCT Pool 54 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_54_cfg_1 = ( 
    'fct_pool_54_cfg_1',
    (0x83d11dc8, 0x83d11dd0),
    'FCT Pool 54 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_54_alloc = ( 
    'fct_pool_54_alloc',
    (0x83d11dd0, 0x83d11dd8),
    'FCT Pool 54 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_54_rls = ( 
    'fct_pool_54_rls',
    (0x83d11dd8, 0x83d11de0),
    'FCT Pool 54 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_55_cfg_0 = ( 
    'fct_pool_55_cfg_0',
    (0x83d11de0, 0x83d11de8),
    'FCT Pool 55 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_55_cfg_1 = ( 
    'fct_pool_55_cfg_1',
    (0x83d11de8, 0x83d11df0),
    'FCT Pool 55 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_55_alloc = ( 
    'fct_pool_55_alloc',
    (0x83d11df0, 0x83d11df8),
    'FCT Pool 55 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_55_rls = ( 
    'fct_pool_55_rls',
    (0x83d11df8, 0x83d11e00),
    'FCT Pool 55 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_56_cfg_0 = ( 
    'fct_pool_56_cfg_0',
    (0x83d11e00, 0x83d11e08),
    'FCT Pool 56 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_56_cfg_1 = ( 
    'fct_pool_56_cfg_1',
    (0x83d11e08, 0x83d11e10),
    'FCT Pool 56 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_56_alloc = ( 
    'fct_pool_56_alloc',
    (0x83d11e10, 0x83d11e18),
    'FCT Pool 56 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_56_rls = ( 
    'fct_pool_56_rls',
    (0x83d11e18, 0x83d11e20),
    'FCT Pool 56 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_57_cfg_0 = ( 
    'fct_pool_57_cfg_0',
    (0x83d11e20, 0x83d11e28),
    'FCT Pool 57 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_57_cfg_1 = ( 
    'fct_pool_57_cfg_1',
    (0x83d11e28, 0x83d11e30),
    'FCT Pool 57 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_57_alloc = ( 
    'fct_pool_57_alloc',
    (0x83d11e30, 0x83d11e38),
    'FCT Pool 57 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_57_rls = ( 
    'fct_pool_57_rls',
    (0x83d11e38, 0x83d11e40),
    'FCT Pool 57 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_58_cfg_0 = ( 
    'fct_pool_58_cfg_0',
    (0x83d11e40, 0x83d11e48),
    'FCT Pool 58 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_58_cfg_1 = ( 
    'fct_pool_58_cfg_1',
    (0x83d11e48, 0x83d11e50),
    'FCT Pool 58 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_58_alloc = ( 
    'fct_pool_58_alloc',
    (0x83d11e50, 0x83d11e58),
    'FCT Pool 58 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_58_rls = ( 
    'fct_pool_58_rls',
    (0x83d11e58, 0x83d11e60),
    'FCT Pool 58 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_59_cfg_0 = ( 
    'fct_pool_59_cfg_0',
    (0x83d11e60, 0x83d11e68),
    'FCT Pool 59 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_59_cfg_1 = ( 
    'fct_pool_59_cfg_1',
    (0x83d11e68, 0x83d11e70),
    'FCT Pool 59 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_59_alloc = ( 
    'fct_pool_59_alloc',
    (0x83d11e70, 0x83d11e78),
    'FCT Pool 59 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_59_rls = ( 
    'fct_pool_59_rls',
    (0x83d11e78, 0x83d11e80),
    'FCT Pool 59 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_60_cfg_0 = ( 
    'fct_pool_60_cfg_0',
    (0x83d11e80, 0x83d11e88),
    'FCT Pool 60 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_60_cfg_1 = ( 
    'fct_pool_60_cfg_1',
    (0x83d11e88, 0x83d11e90),
    'FCT Pool 60 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_60_alloc = ( 
    'fct_pool_60_alloc',
    (0x83d11e90, 0x83d11e98),
    'FCT Pool 60 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_60_rls = ( 
    'fct_pool_60_rls',
    (0x83d11e98, 0x83d11ea0),
    'FCT Pool 60 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_61_cfg_0 = ( 
    'fct_pool_61_cfg_0',
    (0x83d11ea0, 0x83d11ea8),
    'FCT Pool 61 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_61_cfg_1 = ( 
    'fct_pool_61_cfg_1',
    (0x83d11ea8, 0x83d11eb0),
    'FCT Pool 61 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_61_alloc = ( 
    'fct_pool_61_alloc',
    (0x83d11eb0, 0x83d11eb8),
    'FCT Pool 61 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_61_rls = ( 
    'fct_pool_61_rls',
    (0x83d11eb8, 0x83d11ec0),
    'FCT Pool 61 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_62_cfg_0 = ( 
    'fct_pool_62_cfg_0',
    (0x83d11ec0, 0x83d11ec8),
    'FCT Pool 62 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_62_cfg_1 = ( 
    'fct_pool_62_cfg_1',
    (0x83d11ec8, 0x83d11ed0),
    'FCT Pool 62 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_62_alloc = ( 
    'fct_pool_62_alloc',
    (0x83d11ed0, 0x83d11ed8),
    'FCT Pool 62 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_62_rls = ( 
    'fct_pool_62_rls',
    (0x83d11ed8, 0x83d11ee0),
    'FCT Pool 62 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_63_cfg_0 = ( 
    'fct_pool_63_cfg_0',
    (0x83d11ee0, 0x83d11ee8),
    'FCT Pool 63 Configure Register 0',
    [ 
       ('base_addr', 0, 63, 'FCT base address'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_63_cfg_1 = ( 
    'fct_pool_63_cfg_1',
    (0x83d11ee8, 0x83d11ef0),
    'FCT Pool 63 Configure Register 1',
    [ 
       ('entry_size', 0, 31, 'Entry size of FCT table in DW'),
       ('start_ind', 32, 47, 'Start fct_ind of the pool'),
       ('depth', 48, 63, 'Pool depth'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_63_alloc = ( 
    'fct_pool_63_alloc',
    (0x83d11ef0, 0x83d11ef8),
    'FCT Pool 63 Allocation Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry allocated'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 is valid'),
       ('fct_idx1', 8, 14, 'Index of second fct entry allocated'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 is valid'),
       ('fct_idx2', 16, 22, 'Index of third fct entry allocated'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 is valid'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry allocated'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 is valid'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry allocated'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 is valid'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry allocated'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 is valid'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry allocated'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 is valid'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry allocated'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 is valid'),
    ], 
    0x8,
    0x1,
    1,
    )
reg_fct_pool_63_rls = ( 
    'fct_pool_63_rls',
    (0x83d11ef8, 0x83d11f00),
    'FCT Pool 63 Release Register',
    [ 
       ('fct_idx0', 0, 6, 'Index of first fct entry to be released'),
       ('vld0', 7, 7, 'valid0 to indicate if fct_indx0 should be released'),
       ('fct_idx1', 8, 14, 'Index of second fct entry to be released'),
       ('vld1', 15, 15, 'valid1 to indicate if fct_indx1 should be released'),
       ('fct_idx2', 16, 22, 'Index of third fct entry to be released'),
       ('vld2', 23, 23, 'valid2 to indicate if fct_indx2 should be released'),
       ('fct_idx3', 24, 30, 'Index of fourth fct entry to be released'),
       ('vld3', 31, 31, 'valid3 to indicate if fct_indx3 should be released'),
       ('fct_idx4', 32, 38, 'Index of fifth fct entry to be released'),
       ('vld4', 39, 39, 'valid4 to indicate if fct_indx4 should be released'),
       ('fct_idx5', 40, 46, 'Index of sixth fct entry to be released'),
       ('vld5', 47, 47, 'valid5 to indicate if fct_indx5 should be released'),
       ('fct_idx6', 48, 54, 'Index of seventh fct entry to be released'),
       ('vld6', 55, 55, 'valid6 to indicate if fct_indx6 should be released'),
       ('fct_idx7', 56, 62, 'Index of eighth fct entry to be released'),
       ('vld7', 63, 63, 'valid7 to indicate if fct_indx7 should be released'),
    ], 
    0x8,
    0x1,
    1,
    )
#############################################################
#		wdt_csr.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_WDOGLOAD = ( 
    'WDOGLOAD',
    (0x22220000, 0x22220004),
    'See Watchdog Load Register on page 4-15',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGVALUE = ( 
    'WDOGVALUE',
    (0x22220004, 0x22220008),
    'See Watchdog Value Register on page 4-15',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGCONTROL = ( 
    'WDOGCONTROL',
    (0x22220008, 0x2222000c),
    'See Watchdog Control Register on page 4-15',
    [ 
       ('val', 0, 1, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGINTCLR = ( 
    'WDOGINTCLR',
    (0x2222000c, 0x22220010),
    'See Watchdog Clear Interrupt Register on page 4-15',
    [ 
       ('val', 0, 0, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGRIS = ( 
    'WDOGRIS',
    (0x22220010, 0x22220014),
    'See Watchdog Raw Interrupt Status Register on page 4-16',
    [ 
       ('val', 0, 0, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGMIS = ( 
    'WDOGMIS',
    (0x22220014, 0x22220018),
    'See Watchdog Interrupt Status Register on page 4-16',
    [ 
       ('val', 0, 0, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGLOCK = ( 
    'WDOGLOCK',
    (0x22220c00, 0x22220c04),
    'See Watchdog Lock Register on page 4-17',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGITCR = ( 
    'WDOGITCR',
    (0x22220f00, 0x22220f04),
    'See Watchdog Integration Test Control Register on page 4-18',
    [ 
       ('val', 0, 0, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGITOP = ( 
    'WDOGITOP',
    (0x22220f04, 0x22220f08),
    'See Watchdog Integration Test Output Set Register on page 4-18',
    [ 
       ('val', 0, 1, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPERIPHID0 = ( 
    'WDOGPERIPHID0',
    (0x22220fe0, 0x22220fe4),
    'See Peripheral Identification Register 0 on page 4-20',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPERIPHID1 = ( 
    'WDOGPERIPHID1',
    (0x22220fe4, 0x22220fe8),
    'See Peripheral Identification Register 1 on page 4-20',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPERIPHID2 = ( 
    'WDOGPERIPHID2',
    (0x22220fe8, 0x22220fec),
    'See Peripheral Identification Register 2 on page 4-21',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPERIPHID3 = ( 
    'WDOGPERIPHID3',
    (0x22220fec, 0x22220ff0),
    'See Peripheral Identification Register 3 on page 4-21',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPCELLID0 = ( 
    'WDOGPCELLID0',
    (0x22220ff0, 0x22220ff4),
    'See PrimeCell Identification Register 0 on page 4-22',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPCELLID1 = ( 
    'WDOGPCELLID1',
    (0x22220ff4, 0x22220ff8),
    'See PrimeCell Identification Register 1 on page 4-22',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPCELLID2 = ( 
    'WDOGPCELLID2',
    (0x22220ff8, 0x22220ffc),
    'See PrimeCell Identification Register 2 on page 4-22',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_WDOGPCELLID3 = ( 
    'WDOGPCELLID3',
    (0x22220ffc, 0x22221000),
    'See PrimeCell Identification Register 3 on page 4-23',
    [ 
       ('val', 0, 7, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		dcs_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_dcs_control = ( 
    'dcs_control',
    (0x83470000, 0x83470004),
    'DCS Control Register.',
    [ 
       ('dcs_reset', 0, 0, 'DCS block reset, write 1 to this bit to reset auto clear to 0.'),
       ('dcs_sta_mode', 1, 1, 'DCS standalone mode control. 0: Normal mode. 1: Standalone mode.'),
       ('ddr_direct', 2, 2, 'DDR direct access by DW DMA.'),
       ('int_outbuf', 3, 3, '1:use internal outbuf to access DDR;0:use BM buffers'),
       ('hw_access_disable', 4, 4, '1:key_cache data is from fw;0:key_cache data is from sss hw'),
       ('scratch_ram', 8, 8, "1'b1: outbuf as scratch ram for FIS R/W access; 1'b0: normal DCS mode"),
       ('msg_fw_mode', 9, 9, "1'b1: CPL msg sends to FW SRAM mode, handled by CPL_CNFG0/1/2/3; 1'b0: CPL msg sends to BE_ACE using the CPL_CNFG0/1 for slave address"),
       ('msg_crc_ena', 10, 10, "1'b1: Enable crc received check; 1'b0: disable crc received check"),
       ('msg_chk_byp', 11, 11, "1'b1: msg check crc bypass; 1'b0: check crc"),
       ('msg_trans_err_clr', 12, 12, "1'b1: clear msg trans error; 1'b0: normal mode"),
       ('outbuf_reorder', 16, 16, "1'b1: outbuf reorder to improve performance; 1'b0: normal outbuf mode"),
       ('buffer_init', 17, 17, "1'b1: init inbuffer/outbuffer to the initial state; 1'b0: normal mode"),
       ('awcache', 24, 27, 'MSG AXI AWCACHE'),
       ('awprot', 28, 30, 'MSG AXI AWPROT'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_control1 = ( 
    'dcs_control1',
    (0x83470004, 0x83470008),
    'DCS Control 1 Register.',
    [ 
       ('sw_rst', 0, 0, 'DCS Software reset'),
       ('sw_comp_rst', 1, 1, 'Compressor Software reset'),
       ('sw_decomp_rst', 2, 2, 'Decompressor Software reset'),
       ('sw_rc_rst', 3, 3, 'TBDB(RC) Software reset'),
       ('dce_flush_toggle', 8, 15, 'flush toggle per session'),
       ('dce_flush_done', 16, 23, 'Read Only: flush done per session. Write flush toggle to reset 0'),
       ('ddr_ch_sel', 24, 24, 'ddr channel select'),
       ('debug_clk_en', 25, 25, 'debug clock enable'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_status = ( 
    'intr_status',
    (0x83470010, 0x83470014),
    'DCS Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 2, 'Interrupt Status:\n                bit2:inbuf bitmap status (IRQ 2) \n                bit1:outbuf bitmap status (IRQ 1)\n                bit0:outbuf fuse bitmap status (IRQ 0)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_mask = ( 
    'intr_mask',
    (0x83470014, 0x83470018),
    'DCS Interrupt Mask Register',
    [ 
       ('vec', 0, 2, "Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_rc = ( 
    'intr_rc',
    (0x83470018, 0x8347001c),
    'DCS Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 2, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_shadow = ( 
    'intr_shadow',
    (0x8347001c, 0x83470020),
    'DCS Interrupt Shadow Register',
    [ 
       ('vec', 0, 2, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inbuf_bitmap_intr_status = ( 
    'inbuf_bitmap_intr_status',
    (0x83470020, 0x83470024),
    'DCS Inbuf Bitmap Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 15, 'Interrupt Status:\n                bit15~bit0:inbuf bitmap status (IRQ)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inbuf_bitmap_intr_mask = ( 
    'inbuf_bitmap_intr_mask',
    (0x83470024, 0x83470028),
    'DCS Inbuf Bitmap Interrupt Mask Register',
    [ 
       ('vec', 0, 15, "Inbuf_bitmap_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inbuf_bitmap_intr_rc = ( 
    'inbuf_bitmap_intr_rc',
    (0x83470028, 0x8347002c),
    'DCS Inbuf Bitmap Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inbuf_bitmap_intr_shadow = ( 
    'inbuf_bitmap_intr_shadow',
    (0x8347002c, 0x83470030),
    'DCS Inbuf Bitmap Interrupt Shadow Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_intr_status = ( 
    'outbuf_bitmap_intr_status',
    (0x83470030, 0x83470034),
    'DCS Outbuf Bitmap Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_intr_mask = ( 
    'outbuf_bitmap_intr_mask',
    (0x83470034, 0x83470038),
    'DCS Outbuf Bitmap Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_intr_rc = ( 
    'outbuf_bitmap_intr_rc',
    (0x83470038, 0x8347003c),
    'DCS Outbuf Bitmap Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_intr_shadow = ( 
    'outbuf_bitmap_intr_shadow',
    (0x8347003c, 0x83470040),
    'DCS Outbuf Bitmap Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_fuse_intr_status = ( 
    'outbuf_fuse_intr_status',
    (0x83470040, 0x83470044),
    'DCS Outbuf Fuse Bitmap Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 15, 'Interrupt Status:\n                bit15~bit0:outbuf fuse bitmap status (IRQ)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_fuse_intr_mask = ( 
    'outbuf_fuse_intr_mask',
    (0x83470044, 0x83470048),
    'DCS Outbuf Fuse Bitmap Interrupt Mask Register',
    [ 
       ('vec', 0, 15, "Outbuf_bitmap_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_fuse_intr_rc = ( 
    'outbuf_fuse_intr_rc',
    (0x83470048, 0x8347004c),
    'DCS Outbuf Fuse Bitmap Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_fuse_intr_shadow = ( 
    'outbuf_fuse_intr_shadow',
    (0x8347004c, 0x83470050),
    'DCS Outbuf Fuse Bitmap Interrupt Shadow Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_status = ( 
    'err_stat_intr_status',
    (0x83470050, 0x83470054),
    'Error State Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit29~28:msg_wresp_slv_err, msg_wresp_dec_err,\n                bit27~24:dcs_ddr_wresp_slv_err,dcs_ddr_wresp_dec_err, dcs_ddr_rresp_slv_err,dcs_ddr_rresp_dec_err,\n                bit23~16: mem uncor err bit. mem_key_cache_uncor_err, mem_outbuf_uncor_err, mem_inbuf_uncor_err\n                bit15~8: mem cor err bit. mem_key_cache_cor_err, mem_outbuf_cor_err, mem_inbuf_cor_err\n                bit2~bit0:ACCEL comp err (IRQ)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_mask = ( 
    'err_stat_intr_mask',
    (0x83470054, 0x83470058),
    'Error State Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Error State_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_rc = ( 
    'err_stat_intr_rc',
    (0x83470058, 0x8347005c),
    'Error State Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_shadow = ( 
    'err_stat_intr_shadow',
    (0x8347005c, 0x83470060),
    'Error State Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_mem_control = ( 
    'mem_control',
    (0x83470060, 0x83470064),
    'Memory COntrol Register',
    [ 
       ('err_inj_en', 0, 1, '0: no error injection, default value\n               1: enable 1 bit ecc error injection, or 1 bit parity error injection; \n               2: enable 2-bit ecc err injection.'),
       ('err_inj_sel', 8, 15, 'select memory for error injection'),
       ('ecc_en', 16, 31, 'ecc_en for the memories'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_mem_cor_err = ( 
    'mem_cor_err',
    (0x83470064, 0x83470068),
    'DCS Correctable Error Status.',
    [ 
       ('cor_err', 0, 31, 'Correctable Error'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_mem_uncor_err = ( 
    'mem_uncor_err',
    (0x83470068, 0x8347006c),
    'DCS Uncorrectable Error Status.',
    [ 
       ('uncor_err', 0, 31, 'UNCorrectable Error'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_status = ( 
    'dcs_inbuf_bitmap_status',
    (0x83470080, 0x83470084),
    'DCS Inbuf Bitmap Status Register.',
    [ 
       ('inbuf_bitmap_status', 0, 15, 'Inbuf Bitmap status, 2(two 4KB per session)*8(sessions).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_outbuf_bitmap_status = ( 
    'dcs_outbuf_bitmap_status',
    (0x83470090, 0x83470094),
    'DCS Outbuf Bitmap Status Register.',
    [ 
       ('outbuf_bitmap_status', 0, 15, 'Outbuf Bitmap status, 2(two 4KB per session)*8(sessions).'),
       ('outbuf_fuse_bitmap', 16, 31, 'Outbuf Fuse Bitmap status, 2(two 4KB per session)*8(sessions). 1: last block of this session'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status1 = ( 
    'outbuf_bitmap_status1',
    (0x83470094, 0x83470098),
    'DCS Outbuf Bitmap Status 1 Register.',
    [ 
       ('outbuf_bitmap1', 0, 15, 'Outbuf Bitmap status, 64K for Session 1'),
       ('outbuf_fuse_bitmap1', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 1'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status2 = ( 
    'outbuf_bitmap_status2',
    (0x83470098, 0x8347009c),
    'DCS Outbuf Bitmap Status 2 Register.',
    [ 
       ('outbuf_bitmap2', 0, 15, 'Outbuf Bitmap status, 64K for Session 2'),
       ('outbuf_fuse_bitmap2', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status3 = ( 
    'outbuf_bitmap_status3',
    (0x8347009c, 0x834700a0),
    'DCS Outbuf Bitmap Status 3 Register.',
    [ 
       ('outbuf_bitmap3', 0, 15, 'Outbuf Bitmap status, 64K for Session 3'),
       ('outbuf_fuse_bitmap3', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 3'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status4 = ( 
    'outbuf_bitmap_status4',
    (0x834700a0, 0x834700a4),
    'DCS Outbuf Bitmap Status 4 Register.',
    [ 
       ('outbuf_bitmap4', 0, 15, 'Outbuf Bitmap status, 64K for Session 4'),
       ('outbuf_fuse_bitmap4', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 4'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status5 = ( 
    'outbuf_bitmap_status5',
    (0x834700a4, 0x834700a8),
    'DCS Outbuf Bitmap Status 5 Register.',
    [ 
       ('outbuf_bitmap5', 0, 15, 'Outbuf Bitmap status, 64K for Session 5'),
       ('outbuf_fuse_bitmap5', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 5'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status6 = ( 
    'outbuf_bitmap_status6',
    (0x834700a8, 0x834700ac),
    'DCS Outbuf Bitmap Status 6 Register.',
    [ 
       ('outbuf_bitmap6', 0, 15, 'Outbuf Bitmap status, 64K for Session 6'),
       ('outbuf_fuse_bitmap6', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 6'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap_status7 = ( 
    'outbuf_bitmap_status7',
    (0x834700ac, 0x834700b0),
    'DCS Outbuf Bitmap Status 7 Register.',
    [ 
       ('outbuf_bitmap7', 0, 15, 'Outbuf Bitmap status, 64K for Session 7'),
       ('outbuf_fuse_bitmap7', 16, 31, 'Outbuf Fuse Bitmap status, 64K for Session 7'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap1_intr_status = ( 
    'outbuf_bitmap1_intr_status',
    (0x834700b0, 0x834700b4),
    'DCS Outbuf bitmap1 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap1 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap1 status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap1_intr_mask = ( 
    'outbuf_bitmap1_intr_mask',
    (0x834700b4, 0x834700b8),
    'DCS Outbuf bitmap1 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap1_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap1_intr_rc = ( 
    'outbuf_bitmap1_intr_rc',
    (0x834700b8, 0x834700bc),
    'DCS Outbuf bitmap1 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap1_intr_shadow = ( 
    'outbuf_bitmap1_intr_shadow',
    (0x834700bc, 0x834700c0),
    'DCS Outbuf bitmap1 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap2_intr_status = ( 
    'outbuf_bitmap2_intr_status',
    (0x834700c0, 0x834700c4),
    'DCS Outbuf bitmap2 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap2 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap2 status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap2_intr_mask = ( 
    'outbuf_bitmap2_intr_mask',
    (0x834700c4, 0x834700c8),
    'DCS Outbuf bitmap2 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap2_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap2_intr_rc = ( 
    'outbuf_bitmap2_intr_rc',
    (0x834700c8, 0x834700cc),
    'DCS Outbuf bitmap2 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap2_intr_shadow = ( 
    'outbuf_bitmap2_intr_shadow',
    (0x834700cc, 0x834700d0),
    'DCS Outbuf bitmap2 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap3_intr_status = ( 
    'outbuf_bitmap3_intr_status',
    (0x834700d0, 0x834700d4),
    'DCS Outbuf bitmap3 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap3 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap3_intr_mask = ( 
    'outbuf_bitmap3_intr_mask',
    (0x834700d4, 0x834700d8),
    'DCS Outbuf bitmap3 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap3_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap3_intr_rc = ( 
    'outbuf_bitmap3_intr_rc',
    (0x834700d8, 0x834700dc),
    'DCS Outbuf bitmap3 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap3_intr_shadow = ( 
    'outbuf_bitmap3_intr_shadow',
    (0x834700dc, 0x834700e0),
    'DCS Outbuf bitmap3 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap4_intr_status = ( 
    'outbuf_bitmap4_intr_status',
    (0x834700e0, 0x834700e4),
    'DCS Outbuf bitmap4 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap4 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap4_intr_mask = ( 
    'outbuf_bitmap4_intr_mask',
    (0x834700e4, 0x834700e8),
    'DCS Outbuf bitmap4 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap4_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap4_intr_rc = ( 
    'outbuf_bitmap4_intr_rc',
    (0x834700e8, 0x834700ec),
    'DCS Outbuf bitmap4 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap4_intr_shadow = ( 
    'outbuf_bitmap4_intr_shadow',
    (0x834700ec, 0x834700f0),
    'DCS Outbuf bitmap4 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap5_intr_status = ( 
    'outbuf_bitmap5_intr_status',
    (0x834700f0, 0x834700f4),
    'DCS Outbuf bitmap5 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap5 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap5_intr_mask = ( 
    'outbuf_bitmap5_intr_mask',
    (0x834700f4, 0x834700f8),
    'DCS Outbuf bitmap5 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap5_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap5_intr_rc = ( 
    'outbuf_bitmap5_intr_rc',
    (0x834700f8, 0x834700fc),
    'DCS Outbuf bitmap5 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap5_intr_shadow = ( 
    'outbuf_bitmap5_intr_shadow',
    (0x834700fc, 0x83470100),
    'DCS Outbuf bitmap5 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap6_intr_status = ( 
    'outbuf_bitmap6_intr_status',
    (0x83470100, 0x83470104),
    'DCS Outbuf bitmap6 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap6 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap6_intr_mask = ( 
    'outbuf_bitmap6_intr_mask',
    (0x83470104, 0x83470108),
    'DCS Outbuf bitmap6 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap6_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap6_intr_rc = ( 
    'outbuf_bitmap6_intr_rc',
    (0x83470108, 0x8347010c),
    'DCS Outbuf bitmap6 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap6_intr_shadow = ( 
    'outbuf_bitmap6_intr_shadow',
    (0x8347010c, 0x83470110),
    'DCS Outbuf bitmap6 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap7_intr_status = ( 
    'outbuf_bitmap7_intr_status',
    (0x83470110, 0x83470114),
    'DCS Outbuf bitmap7 Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit15~bit0:outbuf bitmap7 status (IRQ) \n                bit31~bit16: outbuf fuse bitmap status [revB]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap7_intr_mask = ( 
    'outbuf_bitmap7_intr_mask',
    (0x83470114, 0x83470118),
    'DCS Outbuf bitmap7 Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Outbuf_bitmap7_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap7_intr_rc = ( 
    'outbuf_bitmap7_intr_rc',
    (0x83470118, 0x8347011c),
    'DCS Outbuf bitmap7 Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_outbuf_bitmap7_intr_shadow = ( 
    'outbuf_bitmap7_intr_shadow',
    (0x8347011c, 0x83470120),
    'DCS Outbuf bitmap7 Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s0_status = ( 
    'dcs_inbuf_bitmap_s0_status',
    (0x83470150, 0x83470154),
    '[revB]DCS Inbuf Bitmap Session0 Status Register.',
    [ 
       ('inbuf_bitmap_s0_status', 0, 1, 'Inbuf Bitmap Session0 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s1_status = ( 
    'dcs_inbuf_bitmap_s1_status',
    (0x83470154, 0x83470158),
    '[revB]DCS Inbuf Bitmap Session1 Status Register.',
    [ 
       ('inbuf_bitmap_s1_status', 0, 1, 'Inbuf Bitmap Session1 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s2_status = ( 
    'dcs_inbuf_bitmap_s2_status',
    (0x83470158, 0x8347015c),
    '[revB]DCS Inbuf Bitmap Session2 Status Register.',
    [ 
       ('inbuf_bitmap_s2_status', 0, 1, 'Inbuf Bitmap Session2 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s3_status = ( 
    'dcs_inbuf_bitmap_s3_status',
    (0x8347015c, 0x83470160),
    '[revB]DCS Inbuf Bitmap Session3 Status Register.',
    [ 
       ('inbuf_bitmap_s3_status', 0, 1, 'Inbuf Bitmap Session3 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s4_status = ( 
    'dcs_inbuf_bitmap_s4_status',
    (0x83470160, 0x83470164),
    '[revB]DCS Inbuf Bitmap Session4 Status Register.',
    [ 
       ('inbuf_bitmap_s4_status', 0, 1, 'Inbuf Bitmap Session4 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s5_status = ( 
    'dcs_inbuf_bitmap_s5_status',
    (0x83470164, 0x83470168),
    '[revB]DCS Inbuf Bitmap Session5 Status Register.',
    [ 
       ('inbuf_bitmap_s5_status', 0, 1, 'Inbuf Bitmap Session5 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s6_status = ( 
    'dcs_inbuf_bitmap_s6_status',
    (0x83470168, 0x8347016c),
    '[revB]DCS Inbuf Bitmap Session6 Status Register.',
    [ 
       ('inbuf_bitmap_s6_status', 0, 1, 'Inbuf Bitmap Session6 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_inbuf_bitmap_s7_status = ( 
    'dcs_inbuf_bitmap_s7_status',
    (0x8347016c, 0x83470170),
    '[revB]DCS Inbuf Bitmap Session7 Status Register.',
    [ 
       ('inbuf_bitmap_s7_status', 0, 1, 'Inbuf Bitmap Session7 status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_ctrl = ( 
    'sed_ctrl',
    (0x83470200, 0x83470204),
    'sed control register',
    [ 
       ('ddr_key_bps', 0, 0, '0:ddr stored encypred keys. 1:ddr stored decrpted keys ;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_ddr_base_addr0 = ( 
    'sed_ddr_base_addr0',
    (0x83470204, 0x83470208),
    'low 32bits of DDR access base address',
    [ 
       ('addr_lo', 0, 31, 'SED access DDR base address low 32bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_ddr_base_addr1 = ( 
    'sed_ddr_base_addr1',
    (0x83470208, 0x8347020c),
    'high 8bits of DDR access base address',
    [ 
       ('addr_hi', 0, 7, 'SED access DDR base address higher 8bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_ovr = ( 
    'sed_key_idx_ovr',
    (0x8347020c, 0x83470210),
    'sed key idx override control register',
    [ 
       ('sed_key_idx', 0, 23, 'sed key idx override value'),
       ('sed_ram_idx', 24, 27, 'sed ram idx override value'),
       ('sed_key_idx_ovr', 31, 31, 'sed ram idx override mode'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_0 = ( 
    'sed_key_idx_0',
    (0x83470210, 0x83470214),
    'sed key idx for addr0',
    [ 
       ('idx0', 0, 23, 'SED key idx 0'),
       ('cache_idx', 24, 27, 'SED cache mem write idx'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_1 = ( 
    'sed_key_idx_1',
    (0x83470214, 0x83470218),
    'sed key idx for addr1',
    [ 
       ('idx1', 0, 23, 'SED key idx 1'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_2 = ( 
    'sed_key_idx_2',
    (0x83470218, 0x8347021c),
    'sed key idx for addr2',
    [ 
       ('idx2', 0, 23, 'SED key idx 2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_3 = ( 
    'sed_key_idx_3',
    (0x8347021c, 0x83470220),
    'sed key idx for addr3',
    [ 
       ('idx3', 0, 23, 'SED key idx 3'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_4 = ( 
    'sed_key_idx_4',
    (0x83470220, 0x83470224),
    'sed key idx for addr4',
    [ 
       ('idx4', 0, 23, 'SED key idx 4'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_5 = ( 
    'sed_key_idx_5',
    (0x83470224, 0x83470228),
    'sed key idx for addr5',
    [ 
       ('idx5', 0, 23, 'SED key idx 5'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_6 = ( 
    'sed_key_idx_6',
    (0x83470228, 0x8347022c),
    'sed key idx for addr6',
    [ 
       ('idx6', 0, 23, 'SED key idx 6'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_7 = ( 
    'sed_key_idx_7',
    (0x8347022c, 0x83470230),
    'sed key idx for addr7',
    [ 
       ('idx7', 0, 23, 'SED key idx 7'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_8 = ( 
    'sed_key_idx_8',
    (0x83470230, 0x83470234),
    'sed key idx for addr8',
    [ 
       ('idx8', 0, 23, 'SED key idx 8'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_9 = ( 
    'sed_key_idx_9',
    (0x83470234, 0x83470238),
    'sed key idx for addr9',
    [ 
       ('idx9', 0, 23, 'SED key idx 9'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_10 = ( 
    'sed_key_idx_10',
    (0x83470238, 0x8347023c),
    'sed key idx for addr10',
    [ 
       ('idx10', 0, 23, 'SED key idx 10'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_11 = ( 
    'sed_key_idx_11',
    (0x8347023c, 0x83470240),
    'sed key idx for addr11',
    [ 
       ('idx11', 0, 23, 'SED key idx 11'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_12 = ( 
    'sed_key_idx_12',
    (0x83470240, 0x83470244),
    'sed key idx for addr12',
    [ 
       ('idx12', 0, 23, 'SED key idx 12'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_13 = ( 
    'sed_key_idx_13',
    (0x83470244, 0x83470248),
    'sed key idx for addr13',
    [ 
       ('idx13', 0, 23, 'SED key idx 13'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_14 = ( 
    'sed_key_idx_14',
    (0x83470248, 0x8347024c),
    'sed key idx for addr14',
    [ 
       ('idx14', 0, 23, 'SED key idx 14'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sed_key_idx_15 = ( 
    'sed_key_idx_15',
    (0x8347024c, 0x83470250),
    'sed key idx for addr15',
    [ 
       ('idx15', 0, 23, 'SED key idx 15'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sss_control_reg_value = ( 
    'sss_control_reg_value',
    (0x83470250, 0x83470254),
    'sss control reg programmed value',
    [ 
       ('value', 0, 31, 'SSS control reg 0x800 programmed value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_key_cache = ( 
    'key_cache',
    (0x83470400, 0x83470840),
    'Key cache ram Register.\n            17X512 memory.',
    [ 
       ('keys', 0, 31, 'keys'),
    ], 
    0x4,
    0x110,
    1,
    )
reg_aes_tweak = ( 
    'aes_tweak',
    (0x83470900, 0x83470a10),
    'AES Tweak Value. 17X128',
    [ 
       ('tweak_value', 0, 31, 'Tweak Value'),
    ], 
    0x4,
    0x44,
    1,
    )
reg_dcs_cplq_cnfg0 = ( 
    'dcs_cplq_cnfg0',
    (0x83471000, 0x83471004),
    'DCS Completion Queue Register 0.',
    [ 
       ('dcs_cplq_addr_lo', 0, 31, 'DCS completion queue address low 32bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_cplq_cnfg1 = ( 
    'dcs_cplq_cnfg1',
    (0x83471004, 0x83471008),
    'DCS Completion Queue Register 1.',
    [ 
       ('dcs_cplq_addr_hi', 0, 7, 'DCS completion queue address high 8bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_cplq_cnfg2 = ( 
    'dcs_cplq_cnfg2',
    (0x83471008, 0x8347100c),
    'DCS Completion Queue Register 2.',
    [ 
       ('dcs_cplq_size', 0, 15, 'DCS completion queue size in bytes, must be multiple of completion message size which is 24 bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_cplq_cnfg3 = ( 
    'dcs_cplq_cnfg3',
    (0x8347100c, 0x83471010),
    'DCS Completion Queue Register 3.',
    [ 
       ('dcs_cplq_wptr', 0, 15, 'DCS completion queue write pointer, actual memory address is dcs_cplq_addr + dcs_cplq_wptr.\n              Write this register will clear write pointer to 0. Firmware monitor this pointer to avoid queue overflow.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cac_base0 = ( 
    'cac_base0',
    (0x83471080, 0x83471084),
    'CAC Base Addr Register 0.',
    [ 
       ('addr_lo', 0, 31, 'CAC Base address low 32bit.\n               DDR/SRAM connected to the CAC AHB master interface as a source or destination.\n               cac_base defined the base addr of cac to DDR/SRAM. Check NIC Configuration file for detail.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cac_base1 = ( 
    'cac_base1',
    (0x83471084, 0x83471088),
    'CAC Base Addr Register 1.',
    [ 
       ('addr_hi', 0, 7, 'CAC Base address high 8bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddma_ctrl0 = ( 
    'ddma_ctrl0',
    (0x83471090, 0x83471094),
    'INBUF Rd DMA Base Addr Register 0.',
    [ 
       ('inbuf_addr_lo', 0, 31, 'INBUF Rd DMA Base Addr low 32bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddma_ctrl1 = ( 
    'ddma_ctrl1',
    (0x83471094, 0x83471098),
    'INBUF Rd DMA Base Addr Register 1.',
    [ 
       ('inbuf_addr_hi', 0, 7, 'Inbuf RDMA Base address high 8bit.'),
       ('outbuf_addr_hi', 8, 15, 'Outbuf WDMA Base address high 8bit.'),
       ('dma_outbuf_direct', 16, 16, 'Outbuf DMA Direct mode.'),
       ('dma_inbuf_direct', 17, 17, 'Inbuf DMA Direct mode.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddma_ctrl2 = ( 
    'ddma_ctrl2',
    (0x83471098, 0x8347109c),
    'OUTBUF WDMA Base Addr Register 0.',
    [ 
       ('outbuf_addr_lo', 0, 31, 'OUTBUF WDMA Base Addr low 32bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddma_ctrl3 = ( 
    'ddma_ctrl3',
    (0x8347109c, 0x834710a0),
    'DDMA Control Register 3.',
    [ 
       ('inbuf_sqid', 0, 3, 'INBUF RDMA SEQ ID.'),
       ('inbuf_start', 7, 7, 'INBUF RDMA START.'),
       ('outbuf_sqid', 8, 11, 'OUTBUF WDMA SEQ ID.'),
       ('outbuf_start', 15, 15, 'OUTBUF WDMA START.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_mon_out = ( 
    'dcs_mon_out',
    (0x834710a0, 0x834710a4),
    'dcs debug moniotot out',
    [ 
       ('mon_out', 0, 31, 'monitor out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_mon_sel = ( 
    'dcs_mon_sel',
    (0x834710a4, 0x834710a8),
    'dcs debug moniotot select',
    [ 
       ('slt', 0, 31, 'monitor select'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range0_saddr0 = ( 
    'dcs_axi_attrib_range0_saddr0',
    (0x83472280, 0x83472284),
    'DCS axi attribute range0 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range0_saddr1 = ( 
    'dcs_axi_attrib_range0_saddr1',
    (0x83472284, 0x83472288),
    'DCS axi attribute range0 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range1_saddr0 = ( 
    'dcs_axi_attrib_range1_saddr0',
    (0x83472288, 0x8347228c),
    'DCS axi attribute range1 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range1_saddr1 = ( 
    'dcs_axi_attrib_range1_saddr1',
    (0x8347228c, 0x83472290),
    'DCS axi attribute range1 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range2_saddr0 = ( 
    'dcs_axi_attrib_range2_saddr0',
    (0x83472290, 0x83472294),
    'DCS axi attribute range2 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range2_saddr1 = ( 
    'dcs_axi_attrib_range2_saddr1',
    (0x83472294, 0x83472298),
    'DCS axi attribute range2 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range3_saddr0 = ( 
    'dcs_axi_attrib_range3_saddr0',
    (0x83472298, 0x8347229c),
    'DCS axi attribute range3 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range3_saddr1 = ( 
    'dcs_axi_attrib_range3_saddr1',
    (0x8347229c, 0x834722a0),
    'DCS axi attribute range3 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range0_eaddr0 = ( 
    'dcs_axi_attrib_range0_eaddr0',
    (0x834722a0, 0x834722a4),
    'DCS axi attribute range0 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range0_eaddr1 = ( 
    'dcs_axi_attrib_range0_eaddr1',
    (0x834722a4, 0x834722a8),
    'DCS axi attribute range0 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range1_eaddr0 = ( 
    'dcs_axi_attrib_range1_eaddr0',
    (0x834722a8, 0x834722ac),
    'DCS axi attribute range1 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range1_eaddr1 = ( 
    'dcs_axi_attrib_range1_eaddr1',
    (0x834722ac, 0x834722b0),
    'DCS axi attribute range1 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range2_eaddr0 = ( 
    'dcs_axi_attrib_range2_eaddr0',
    (0x834722b0, 0x834722b4),
    'DCS axi attribute range2 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range2_eaddr1 = ( 
    'dcs_axi_attrib_range2_eaddr1',
    (0x834722b4, 0x834722b8),
    'DCS axi attribute range2 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range3_eaddr0 = ( 
    'dcs_axi_attrib_range3_eaddr0',
    (0x834722b8, 0x834722bc),
    'DCS axi attribute range3 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_range3_eaddr1 = ( 
    'dcs_axi_attrib_range3_eaddr1',
    (0x834722bc, 0x834722c0),
    'DCS axi attribute range3 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_ctrl_0 = ( 
    'dcs_axi_attrib_ctrl_0',
    (0x834722c0, 0x834722c4),
    'DCS axi attribute control 0.',
    [ 
       ('axcache0', 0, 3, '.'),
       ('axqos0', 4, 7, '.'),
       ('axcache1', 8, 11, '.'),
       ('axqos1', 12, 15, '.'),
       ('axcache2', 16, 19, '.'),
       ('axqos2', 20, 23, '.'),
       ('axcache3', 24, 27, '.'),
       ('axqos3', 28, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dcs_axi_attrib_ctrl_1 = ( 
    'dcs_axi_attrib_ctrl_1',
    (0x834722c4, 0x834722c8),
    'DCS axi attribute control 1.',
    [ 
       ('axprot0', 0, 2, '.'),
       ('axlock0', 4, 4, '.'),
       ('axprot1', 8, 10, '.'),
       ('axlock1', 12, 12, '.'),
       ('axprot2', 16, 18, '.'),
       ('axlock2', 20, 20, '.'),
       ('axprot3', 24, 26, '.'),
       ('axlock3', 28, 28, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_ctrl_0 = ( 
    'sm3_ctrl_0',
    (0x83472300, 0x83472304),
    'SM3 Control 0',
    [ 
       ('addr', 0, 31, 'SM3 DDR access Base addr[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_ctrl_1 = ( 
    'sm3_ctrl_1',
    (0x83472304, 0x83472308),
    'SM3 Control 1',
    [ 
       ('addr', 0, 7, 'SM3 DDR access Base addr[39:32]'),
       ('endian_mode', 8, 8, 'SM3 DDR access endiaan mode'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_obj_size = ( 
    'sm3_obj_size',
    (0x83472308, 0x8347230c),
    'SM3 Object Size',
    [ 
       ('obj_size', 0, 31, 'SM3 input data size'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_load_msg = ( 
    'sm3_load_msg',
    (0x8347230c, 0x83472310),
    'SM3 msg load',
    [ 
       ('mode', 0, 2, "it's the write pulse bit\n              3'b001:laod first msg; \n              3'b010:load middle msg;\n              3'b011:load end msg;\n              3'b100:load complete msg;"),
       ('load_done', 8, 8, 'msg load done, self clear after the trigger'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data0 = ( 
    'sm3_hash_data0',
    (0x83472310, 0x83472314),
    'SM3 HASH data0',
    [ 
       ('data', 0, 31, 'sm3_hash_data[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data1 = ( 
    'sm3_hash_data1',
    (0x83472314, 0x83472318),
    'SM3 HASH data1',
    [ 
       ('data', 0, 31, 'sm3_hash_data[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data2 = ( 
    'sm3_hash_data2',
    (0x83472318, 0x8347231c),
    'SM3 HASH data2',
    [ 
       ('data', 0, 31, 'sm3_hash_data[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data3 = ( 
    'sm3_hash_data3',
    (0x8347231c, 0x83472320),
    'SM3 HASH data3',
    [ 
       ('data', 0, 31, 'sm3_hash_data[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data4 = ( 
    'sm3_hash_data4',
    (0x83472320, 0x83472324),
    'SM3 HASH data4',
    [ 
       ('data', 0, 31, 'sm3_hash_data[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data5 = ( 
    'sm3_hash_data5',
    (0x83472324, 0x83472328),
    'SM3 HASH data5',
    [ 
       ('data', 0, 31, 'sm3_hash_data[191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data6 = ( 
    'sm3_hash_data6',
    (0x83472328, 0x8347232c),
    'SM3 HASH data6',
    [ 
       ('data', 0, 31, 'sm3_hash_data[223:192]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sm3_hash_data7 = ( 
    'sm3_hash_data7',
    (0x8347232c, 0x83472330),
    'SM3 HASH data7',
    [ 
       ('data', 0, 31, 'sm3_hash_data[255:224]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cac_csr_register = ( 
    'cac_csr_register',
    (0x8347f000, 0x83480000),
    'CAC csr Register Range (0xf000~0xfffc)\n            Register detail reference "SECR-CAC-DS100.pdf"',
    [ 
       ('cac_csr_register', 0, 31, 'cac_csr_register'),
    ], 
    0x4,
    0x400,
    1,
    )
#############################################################
#		feace_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_feace_control = ( 
    'feace_control',
    (0x83460000, 0x83460004),
    'FEACE Control Register.',
    [ 
       ('loc_byp', 0, 0, 'LOC bypass mode'),
       ('aes_en', 1, 1, 'AES Enable'),
       ('force_unc', 2, 2, 'Force UNC'),
       ('td_en', 3, 3, 'Transfer done enable'),
       ('fcq_start', 4, 4, 'FCQ fetch enable'),
       ('feace_flush', 5, 5, 'FEACE flush mode'),
       ('loc_fuse_fw_mode', 8, 8, 'FW clear fuse counter mode'),
       ('acq1_bp_e2e', 9, 9, 'bp_e2e bit from beace trigger'),
       ('acq1_bp_aes', 10, 10, 'bp_aes bit from beace trigger'),
       ('last_trig_sel', 16, 18, "debug select for last trig data, use wcq_sdsw0/1/2/3 regs to log data:\n               3'h0: last prp trig \n               3'h1: last rd dma trig \n               3'h2: last rcpl0 \n               3'h3: last rcpl1 \n               3'h4: last wcq trig \n               3'h5: last wcq sdsw trig \n               3'h6: last wcpl \n               others: reserverd"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_feace_ctrl1 = ( 
    'feace_ctrl1',
    (0x83460004, 0x83460008),
    'FEACE Control 1 Register.',
    [ 
       ('pwr_fail', 0, 0, 'Power fail mode'),
       ('pwr_done', 1, 1, 'Power Done. HW set 1, FW write pwr_fail 0 to clear'),
       ('flush_done', 8, 8, 'flush Done. HW set'),
       ('acq1_flush', 16, 16, 'ACQ1 Flush mode'),
       ('acq1_flush_done', 17, 17, 'ACQ1 flush Done. HW set 1, FW write acq_flush 0 to clear'),
       ('iocmd_hot_write', 24, 24, 'IOCMD hot write mode'),
       ('hot_write_sector', 25, 26, "IOCMD hot write mode Sector settings \n             2'b00: 4K sector\n             2'b01: 8K sector\n             2'b10: 16K sector"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_feace_ctrl2 = ( 
    'feace_ctrl2',
    (0x83460008, 0x8346000c),
    'ACE FEACE CTRL2 Register.',
    [ 
       ('awcache', 0, 3, 'ACQ AXI AWCACHE'),
       ('arcache', 4, 7, 'ACQ AXI ARCACHE'),
       ('awprot', 8, 10, 'ACQ AXI AWPROT'),
       ('arprot', 12, 14, 'ACQ AXI ARPROT'),
       ('cmd_submit_num', 16, 19, 'number of cmd continously submitted to one Q'),
       ('beace_ch_intlv', 20, 20, 'BEACE Rd DMA trigger Channel interleave'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_acecsr_to = ( 
    'acecsr_to',
    (0x83460010, 0x83460014),
    'ACE CSR Timeout Register.',
    [ 
       ('acecsr_to', 0, 31, 'ace csr timeout'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_beace_ch0_base_addr = ( 
    'beace_ch0_base_addr',
    (0x83460014, 0x83460018),
    'beace ch0(sds_s1) base addr',
    [ 
       ('addr', 0, 31, 'base addr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_beace_ch1_base_addr = ( 
    'beace_ch1_base_addr',
    (0x83460018, 0x8346001c),
    'beace ch1(sds_s2) base addr',
    [ 
       ('addr', 0, 31, 'base addr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set0_l = ( 
    'aes_set0_l',
    (0x83460020, 0x83460024),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas0_l', 0, 31, 'lbas0[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set0_m = ( 
    'aes_set0_m',
    (0x83460024, 0x83460028),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae0_l', 0, 31, 'lbae0[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set0_h = ( 
    'aes_set0_h',
    (0x83460028, 0x8346002c),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas0_h', 0, 7, 'lbas0[39:32]'),
       ('lbae0_h', 8, 15, 'lbae0[39:32]'),
       ('aes0_idx', 16, 19, 'AES Key IDX 0'),
       ('aes0_vld', 31, 31, 'AES Key IDX set0 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set1_l = ( 
    'aes_set1_l',
    (0x8346002c, 0x83460030),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas1_l', 0, 31, 'lbas1[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set1_m = ( 
    'aes_set1_m',
    (0x83460030, 0x83460034),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae1_l', 0, 31, 'lbae1[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set1_h = ( 
    'aes_set1_h',
    (0x83460034, 0x83460038),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas1_h', 0, 7, 'lbas1[39:32]'),
       ('lbae1_h', 8, 15, 'lbae1[39:32]'),
       ('aes1_idx', 16, 19, 'AES Key IDX 1'),
       ('aes1_vld', 31, 31, 'AES Key IDX set1 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set2_l = ( 
    'aes_set2_l',
    (0x83460038, 0x8346003c),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas2_l', 0, 31, 'lbas2[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set2_m = ( 
    'aes_set2_m',
    (0x8346003c, 0x83460040),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae2_l', 0, 31, 'lbae2[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set2_h = ( 
    'aes_set2_h',
    (0x83460040, 0x83460044),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas2_h', 0, 7, 'lbas2[39:32]'),
       ('lbae2_h', 8, 15, 'lbae2[39:32]'),
       ('aes2_idx', 16, 19, 'AES Key IDX 2'),
       ('aes2_vld', 31, 31, 'AES Key IDX set2 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set3_l = ( 
    'aes_set3_l',
    (0x83460044, 0x83460048),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas3_l', 0, 31, 'lbas3[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set3_m = ( 
    'aes_set3_m',
    (0x83460048, 0x8346004c),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae3_l', 0, 31, 'lbae3[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set3_h = ( 
    'aes_set3_h',
    (0x8346004c, 0x83460050),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas3_h', 0, 7, 'lbas3[39:32]'),
       ('lbae3_h', 8, 15, 'lbae3[39:32]'),
       ('aes3_idx', 16, 19, 'AES Key IDX 3'),
       ('aes3_vld', 31, 31, 'AES Key IDX set3 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set4_l = ( 
    'aes_set4_l',
    (0x83460050, 0x83460054),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas4_l', 0, 31, 'lbas4[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set4_m = ( 
    'aes_set4_m',
    (0x83460054, 0x83460058),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae4_l', 0, 31, 'lbae4[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set4_h = ( 
    'aes_set4_h',
    (0x83460058, 0x8346005c),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas4_h', 0, 7, 'lbas4[39:32]'),
       ('lbae4_h', 8, 15, 'lbae4[39:32]'),
       ('aes4_idx', 16, 19, 'AES Key IDX 4'),
       ('aes4_vld', 31, 31, 'AES Key IDX set4 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set5_l = ( 
    'aes_set5_l',
    (0x8346005c, 0x83460060),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas5_l', 0, 31, 'lbas5[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set5_m = ( 
    'aes_set5_m',
    (0x83460060, 0x83460064),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae5_l', 0, 31, 'lbae5[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set5_h = ( 
    'aes_set5_h',
    (0x83460064, 0x83460068),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas5_h', 0, 7, 'lbas5[39:32]'),
       ('lbae5_h', 8, 15, 'lbae5[39:32]'),
       ('aes5_idx', 16, 19, 'AES Key IDX set5'),
       ('aes5_vld', 31, 31, 'AES Key IDX set5 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set6_l = ( 
    'aes_set6_l',
    (0x83460068, 0x8346006c),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas6_l', 0, 31, 'lbas6[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set6_m = ( 
    'aes_set6_m',
    (0x8346006c, 0x83460070),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae6_l', 0, 31, 'lbae6[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set6_h = ( 
    'aes_set6_h',
    (0x83460070, 0x83460074),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas6_h', 0, 7, 'lbas6[39:32]'),
       ('lbae6_h', 8, 15, 'lbae6[39:32]'),
       ('aes6_idx', 16, 19, 'AES Key IDX set6'),
       ('aes6_vld', 31, 31, 'AES Key IDX set6 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set7_l = ( 
    'aes_set7_l',
    (0x83460074, 0x83460078),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas7_l', 0, 31, 'lbas7[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set7_m = ( 
    'aes_set7_m',
    (0x83460078, 0x8346007c),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae7_l', 0, 31, 'lbae7[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set7_h = ( 
    'aes_set7_h',
    (0x8346007c, 0x83460080),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas7_h', 0, 7, 'lbas7[39:32]'),
       ('lbae7_h', 8, 15, 'lbae7[39:32]'),
       ('aes7_idx', 16, 19, 'AES Key IDX set7'),
       ('aes7_vld', 31, 31, 'AES Key IDX set7 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set8_l = ( 
    'aes_set8_l',
    (0x83460080, 0x83460084),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas8_l', 0, 31, 'lbas8[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set8_m = ( 
    'aes_set8_m',
    (0x83460084, 0x83460088),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae8_l', 0, 31, 'lbae8[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set8_h = ( 
    'aes_set8_h',
    (0x83460088, 0x8346008c),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas8_h', 0, 7, 'lbas8[39:32]'),
       ('lbae8_h', 8, 15, 'lbae8[39:32]'),
       ('aes8_idx', 16, 19, 'AES Key IDX set8'),
       ('aes8_vld', 31, 31, 'AES Key IDX set8 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set9_l = ( 
    'aes_set9_l',
    (0x8346008c, 0x83460090),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas9_l', 0, 31, 'lbas9[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set9_m = ( 
    'aes_set9_m',
    (0x83460090, 0x83460094),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae9_l', 0, 31, 'lbae9[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set9_h = ( 
    'aes_set9_h',
    (0x83460094, 0x83460098),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas9_h', 0, 7, 'lbas9[39:32]'),
       ('lbae9_h', 8, 15, 'lbae9[39:32]'),
       ('aes9_idx', 16, 19, 'AES Key IDX set9'),
       ('aes9_vld', 31, 31, 'AES Key IDX set9 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set10_l = ( 
    'aes_set10_l',
    (0x83460098, 0x8346009c),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas10_l', 0, 31, 'lbas10[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set10_m = ( 
    'aes_set10_m',
    (0x8346009c, 0x834600a0),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae10_l', 0, 31, 'lbae10[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set10_h = ( 
    'aes_set10_h',
    (0x834600a0, 0x834600a4),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas10_h', 0, 7, 'lbas10[39:32]'),
       ('lbae10_h', 8, 15, 'lbae10[39:32]'),
       ('aes10_idx', 16, 19, 'AES Key IDX set10'),
       ('aes10_vld', 31, 31, 'AES Key IDX set10 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set11_l = ( 
    'aes_set11_l',
    (0x834600a4, 0x834600a8),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas11_l', 0, 31, 'lbas11[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set11_m = ( 
    'aes_set11_m',
    (0x834600a8, 0x834600ac),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae11_l', 0, 31, 'lbae11[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set11_h = ( 
    'aes_set11_h',
    (0x834600ac, 0x834600b0),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas11_h', 0, 7, 'lbas11[39:32]'),
       ('lbae11_h', 8, 15, 'lbae11[39:32]'),
       ('aes11_idx', 16, 19, 'AES Key IDX set11'),
       ('aes11_vld', 31, 31, 'AES Key IDX set11 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set12_l = ( 
    'aes_set12_l',
    (0x834600b0, 0x834600b4),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas12_l', 0, 31, 'lbas12[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set12_m = ( 
    'aes_set12_m',
    (0x834600b4, 0x834600b8),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae12_l', 0, 31, 'lbae12[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set12_h = ( 
    'aes_set12_h',
    (0x834600b8, 0x834600bc),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas12_h', 0, 7, 'lbas12[39:32]'),
       ('lbae12_h', 8, 15, 'lbae12[39:32]'),
       ('aes12_idx', 16, 19, 'AES Key IDX set12'),
       ('aes12_vld', 31, 31, 'AES Key IDX set12 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set13_l = ( 
    'aes_set13_l',
    (0x834600bc, 0x834600c0),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas13_l', 0, 31, 'lbas13[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set13_m = ( 
    'aes_set13_m',
    (0x834600c0, 0x834600c4),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae13_l', 0, 31, 'lbae13[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set13_h = ( 
    'aes_set13_h',
    (0x834600c4, 0x834600c8),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas13_h', 0, 7, 'lbas13[39:32]'),
       ('lbae13_h', 8, 15, 'lbae13[39:32]'),
       ('aes13_idx', 16, 19, 'AES Key IDX set13'),
       ('aes13_vld', 31, 31, 'AES Key IDX set13 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set14_l = ( 
    'aes_set14_l',
    (0x834600c8, 0x834600cc),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas14_l', 0, 31, 'lbas14[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set14_m = ( 
    'aes_set14_m',
    (0x834600cc, 0x834600d0),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae14_l', 0, 31, 'lbae14[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set14_h = ( 
    'aes_set14_h',
    (0x834600d0, 0x834600d4),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas14_h', 0, 7, 'lbas14[39:32]'),
       ('lbae14_h', 8, 15, 'lbae14[39:32]'),
       ('aes14_idx', 16, 19, 'AES Key IDX set14'),
       ('aes14_vld', 31, 31, 'AES Key IDX set14 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set15_l = ( 
    'aes_set15_l',
    (0x834600d4, 0x834600d8),
    'AES key idx sets Low Bits Register.',
    [ 
       ('lbas15_l', 0, 31, 'lbas15[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set15_m = ( 
    'aes_set15_m',
    (0x834600d8, 0x834600dc),
    'AES key idx sets Middle Bits Register.',
    [ 
       ('lbae15_l', 0, 31, 'lbae15[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_aes_set15_h = ( 
    'aes_set15_h',
    (0x834600dc, 0x834600e0),
    'AES key idx sets High Bits Register.',
    [ 
       ('lbas15_h', 0, 7, 'lbas15[39:32]'),
       ('lbae15_h', 8, 15, 'lbae15[39:32]'),
       ('aes15_idx', 16, 19, 'AES Key IDX set15'),
       ('aes15_vld', 31, 31, 'AES Key IDX set15 valid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmd_qid0 = ( 
    'cmd_qid0',
    (0x834600e0, 0x834600e4),
    'CMD QID bitmap',
    [ 
       ('iocmd_qid0l', 0, 5, 'IO qid0 low'),
       ('iocmd_qid0h', 8, 13, 'IO qid0 high'),
       ('iocmd_qid1l', 16, 21, 'IO qid1 low'),
       ('iocmd_qid1h', 24, 29, 'IO qid1 high'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmd_qid1 = ( 
    'cmd_qid1',
    (0x834600e4, 0x834600e8),
    'CMD QID bitmap',
    [ 
       ('iocmd_qid2l', 0, 5, 'IO qid2 low'),
       ('iocmd_qid2h', 8, 13, 'IO qid2 high'),
       ('iocmd_qid3l', 16, 21, 'IO qid3 low'),
       ('iocmd_qid3h', 24, 29, 'IO qid3 high'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmd_qid2 = ( 
    'cmd_qid2',
    (0x834600e8, 0x834600ec),
    'CMD QID bitmap',
    [ 
       ('iocmd_qid4l', 0, 5, 'IO qid4 low'),
       ('iocmd_qid4h', 8, 13, 'IO qid4 high'),
       ('iocmd_qid5l', 16, 21, 'IO qid5 low'),
       ('iocmd_qid5h', 24, 29, 'IO qid5 high'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmd_qid3 = ( 
    'cmd_qid3',
    (0x834600ec, 0x834600f0),
    'CMD QID bitmap',
    [ 
       ('iocmd_qid6l', 0, 5, 'IO qid6 low'),
       ('iocmd_qid6h', 8, 13, 'IO qid6 high'),
       ('iocmd_qid7l', 16, 21, 'IO qid7 low'),
       ('iocmd_qid7h', 24, 29, 'IO qid7 high'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmd_qid4 = ( 
    'cmd_qid4',
    (0x834600f0, 0x834600f4),
    'CMD QID bitmap',
    [ 
       ('admincmd_qid', 0, 5, 'admincmd qid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap0 = ( 
    'qidmap0',
    (0x834600f4, 0x834600f8),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid0', 0, 7, 'qidmap for nsid 0'),
       ('qidmap_nsid1', 8, 15, 'qidmap for nsid 1'),
       ('qidmap_nsid2', 16, 23, 'qidmap for nsid 2'),
       ('qidmap_nsid3', 24, 31, 'qidmap for nsid 3'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap1 = ( 
    'qidmap1',
    (0x834600f8, 0x834600fc),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid4', 0, 7, 'qidmap for nsid 4'),
       ('qidmap_nsid5', 8, 15, 'qidmap for nsid 5'),
       ('qidmap_nsid6', 16, 23, 'qidmap for nsid 6'),
       ('qidmap_nsid7', 24, 31, 'qidmap for nsid 7'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap2 = ( 
    'qidmap2',
    (0x834600fc, 0x83460100),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid8', 0, 7, 'qidmap for nsid 8'),
       ('qidmap_nsid9', 8, 15, 'qidmap for nsid 9'),
       ('qidmap_nsid10', 16, 23, 'qidmap for nsid 10'),
       ('qidmap_nsid11', 24, 31, 'qidmap for nsid 11'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap3 = ( 
    'qidmap3',
    (0x83460100, 0x83460104),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid12', 0, 7, 'qidmap for nsid 12'),
       ('qidmap_nsid13', 8, 15, 'qidmap for nsid 13'),
       ('qidmap_nsid14', 16, 23, 'qidmap for nsid 14'),
       ('qidmap_nsid15', 24, 31, 'qidmap for nsid 15'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap4 = ( 
    'qidmap4',
    (0x83460104, 0x83460108),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid16', 0, 7, 'qidmap for nsid 16'),
       ('qidmap_nsid17', 8, 15, 'qidmap for nsid 17'),
       ('qidmap_nsid18', 16, 23, 'qidmap for nsid 18'),
       ('qidmap_nsid19', 24, 31, 'qidmap for nsid 19'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap5 = ( 
    'qidmap5',
    (0x83460108, 0x8346010c),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid20', 0, 7, 'qidmap for nsid 20'),
       ('qidmap_nsid21', 8, 15, 'qidmap for nsid 21'),
       ('qidmap_nsid22', 16, 23, 'qidmap for nsid 22'),
       ('qidmap_nsid23', 24, 31, 'qidmap for nsid 23'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap6 = ( 
    'qidmap6',
    (0x8346010c, 0x83460110),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid24', 0, 7, 'qidmap for nsid 24'),
       ('qidmap_nsid25', 8, 15, 'qidmap for nsid 25'),
       ('qidmap_nsid26', 16, 23, 'qidmap for nsid 26'),
       ('qidmap_nsid27', 24, 31, 'qidmap for nsid 27'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap7 = ( 
    'qidmap7',
    (0x83460120, 0x83460124),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid28', 0, 7, 'qidmap for nsid 28'),
       ('qidmap_nsid29', 8, 15, 'qidmap for nsid 29'),
       ('qidmap_nsid30', 16, 23, 'qidmap for nsid 30'),
       ('qidmap_nsid31', 24, 31, 'qidmap for nsid 31'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap8 = ( 
    'qidmap8',
    (0x83460124, 0x83460128),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid32', 0, 7, 'qidmap for nsid 32'),
       ('qidmap_nsid33', 8, 15, 'qidmap for nsid 33'),
       ('qidmap_nsid34', 16, 23, 'qidmap for nsid 34'),
       ('qidmap_nsid35', 24, 31, 'qidmap for nsid 35'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap9 = ( 
    'qidmap9',
    (0x83460128, 0x8346012c),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid36', 0, 7, 'qidmap for nsid 36'),
       ('qidmap_nsid37', 8, 15, 'qidmap for nsid 37'),
       ('qidmap_nsid38', 16, 23, 'qidmap for nsid 38'),
       ('qidmap_nsid39', 24, 31, 'qidmap for nsid 39'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap10 = ( 
    'qidmap10',
    (0x8346012c, 0x83460130),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid40', 0, 7, 'qidmap for nsid 40'),
       ('qidmap_nsid41', 8, 15, 'qidmap for nsid 41'),
       ('qidmap_nsid42', 16, 23, 'qidmap for nsid 42'),
       ('qidmap_nsid43', 24, 31, 'qidmap for nsid 43'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap11 = ( 
    'qidmap11',
    (0x83460130, 0x83460134),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid44', 0, 7, 'qidmap for nsid 44'),
       ('qidmap_nsid45', 8, 15, 'qidmap for nsid 45'),
       ('qidmap_nsid46', 16, 23, 'qidmap for nsid 46'),
       ('qidmap_nsid47', 24, 31, 'qidmap for nsid 47'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap12 = ( 
    'qidmap12',
    (0x83460134, 0x83460138),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid48', 0, 7, 'qidmap for nsid 48'),
       ('qidmap_nsid49', 8, 15, 'qidmap for nsid 49'),
       ('qidmap_nsid50', 16, 23, 'qidmap for nsid 50'),
       ('qidmap_nsid51', 24, 31, 'qidmap for nsid 51'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap13 = ( 
    'qidmap13',
    (0x83460138, 0x8346013c),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid52', 0, 7, 'qidmap for nsid 52'),
       ('qidmap_nsid53', 8, 15, 'qidmap for nsid 53'),
       ('qidmap_nsid54', 16, 23, 'qidmap for nsid 54'),
       ('qidmap_nsid55', 24, 31, 'qidmap for nsid55'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap14 = ( 
    'qidmap14',
    (0x8346013c, 0x83460140),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid56', 0, 7, 'qidmap for nsid 56'),
       ('qidmap_nsid57', 8, 15, 'qidmap for nsid 57'),
       ('qidmap_nsid58', 16, 23, 'qidmap for nsid 58'),
       ('qidmap_nsid59', 24, 31, 'qidmap for nsid 59'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap15 = ( 
    'qidmap15',
    (0x83460140, 0x83460144),
    'QID bitmap for each NSID',
    [ 
       ('qidmap_nsid60', 0, 7, 'qidmap for nsid 60'),
       ('qidmap_nsid61', 8, 15, 'qidmap for nsid 61'),
       ('qidmap_nsid62', 16, 23, 'qidmap for nsid 62'),
       ('qidmap_nsid63', 24, 31, 'qidmap for nsid 63'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_qidmap16 = ( 
    'qidmap16',
    (0x83460144, 0x83460148),
    'QID bitmap16 for each NSID',
    [ 
       ('qidmap_nsid_other', 0, 7, 'qidmap for non-0~63 nsid'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_control0 = ( 
    'loc_control0',
    (0x83460200, 0x83460204),
    'LOC Control 0 Register.',
    [ 
       ('waw_chk_en', 0, 0, 'LOC WAW(write after write) check enable'),
       ('war_chk_en', 1, 1, 'LOC WAR(write after read) check enable'),
       ('raw_chk_en', 2, 2, 'LOC RAW(read after write) check enable'),
       ('loc_nsid_byp', 8, 15, "Bypass LOC for certain NSID in 0~7. 1'b0: enable loc; 1'b1:bypass LOC"),
       ('loc_decouple_ns', 16, 16, "1'b1 decouple ns mode"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_control1 = ( 
    'loc_control1',
    (0x83460204, 0x83460208),
    'LOC Control 1 Register.',
    [ 
       ('nsid_clr_cnt', 8, 15, 'FW Clear Fuse counters of that NS to unlock'),
       ('nsid_rcv', 16, 23, 'FW recover the NS'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_status0 = ( 
    'loc_status0',
    (0x83460208, 0x8346020c),
    'LOC Status 0 Register.',
    [ 
       ('accum_cnt0', 0, 31, 'bit23~16: nsid_skip. the NS is skipped LOC \n                bit5~0: blocked cmds number'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_status1 = ( 
    'loc_status1',
    (0x8346020c, 0x83460210),
    'LOC Status 1 Register.',
    [ 
       ('accum_cnt1', 0, 31, 'bit9~0: number of valid LOC cmds including blocked or not released'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_status2 = ( 
    'loc_status2',
    (0x83460210, 0x83460214),
    'LOC Status 2 Register.',
    [ 
       ('accum_cnt2', 0, 31, 'Accumulator Counter 2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_loc_status3 = ( 
    'loc_status3',
    (0x83460214, 0x83460218),
    'LOC Status 3 Register.',
    [ 
       ('accum_cnt3', 0, 31, 'Accumulator Counter 3'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_act_status0 = ( 
    'act_status0',
    (0x83460220, 0x83460224),
    'ACT process module Status 0 Register.',
    [ 
       ('act_status0', 0, 31, '[16] act FIFO initial done,push 512 act \n                       [9:0] acttag_acc: available acttag number\n                                others, reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_act_status1 = ( 
    'act_status1',
    (0x83460224, 0x83460228),
    'ACT process module Status 1 Register.',
    [ 
       ('act_status1', 0, 31, 'reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_seqid0_base_addr = ( 
    'seqid0_base_addr',
    (0x83460300, 0x83460304),
    'SEQID 0 Base Address Register.',
    [ 
       ('seqid0_base_addr', 0, 31, 'SEQID 0 base address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_seqid1_base_addr = ( 
    'seqid1_base_addr',
    (0x83460304, 0x83460308),
    'SEQID 1 Base Address Register.',
    [ 
       ('seqid1_base_addr', 0, 31, 'SEQID 1 base address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_seqid2_base_addr = ( 
    'seqid2_base_addr',
    (0x83460308, 0x8346030c),
    'SEQID 2 Base Address Register.',
    [ 
       ('seqid2_base_addr', 0, 31, 'SEQID 2 base address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_seqid3_base_addr = ( 
    'seqid3_base_addr',
    (0x8346030c, 0x83460310),
    'SEQID 3 Base Address Register.',
    [ 
       ('seqid3_base_addr', 0, 31, 'SEQID 3 base address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_acq1_qid_bitmap_0 = ( 
    'acq1_qid_bitmap_0',
    (0x83460310, 0x83460314),
    'QID bitmap 0 Register.',
    [ 
       ('qid_bitmap_0', 0, 31, "{2'b0,QID3[5:0],2'b0,QID2[5:0],2'b0,QID1[5:0],2'b0,QID0[5:0]}"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_acq1_qid_bitmap_1 = ( 
    'acq1_qid_bitmap_1',
    (0x83460314, 0x83460318),
    'QID bitmap 1 Register.',
    [ 
       ('qid_bitmap_1', 0, 31, "{2'b0,QID7[5:0],2'b0,QID6[5:0],2'b0,QID5[5:0],2'b0,QID4[5:0]}"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_acq1_qid_bitmap_2 = ( 
    'acq1_qid_bitmap_2',
    (0x83460318, 0x8346031c),
    'QID bitmap 2 Register.',
    [ 
       ('qid_bitmap_2', 0, 31, "{2'b0,QID11[5:0],2'b0,QID10[5:0],2'b0,QID9[5:0],2'b0,QID8[5:0]}"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_acq1_qid_bitmap_3 = ( 
    'acq1_qid_bitmap_3',
    (0x8346031c, 0x83460320),
    'QID bitmap 3 Register.',
    [ 
       ('qid_bitmap_3', 0, 31, "{2'b0,QID15[5:0],2'b0,QID14[5:0],2'b0,QID13[5:0],2'b0,QID12[5:0]}"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fe_ace_mem_ctrl_0 = ( 
    'fe_ace_mem_ctrl_0',
    (0x83460320, 0x83460324),
    'FE ACE Memory Control Register 0',
    [ 
       ('ecc_en', 0, 15, 'ECC enable control\n              Bit 0: ACQ_MGR q property mem\n              Bit 1: ACQ_MGR sq property mem\n              Bit 2: ACQ_MGR cq property mem\n              Bit 3: ACQ_MGR acq dbl mem\n              Bit 4: ACQ0 act_acttag_mem\n              Bit 5: ACQ0 act_ctag_mem\n              Bit 6: ACQ0 loc_cmd_tbl_mem\n              Bit 7: ACQ0 loc_ll_mem\n              Bit 8: ACQ0 loc_bcmd_mem\n              Bit 9: ACQ1 acq1_ll mem \n              Bit A: ACQ1 acq1 db mem\n              others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fe_ace_mem_err_inj_en = ( 
    'fe_ace_mem_err_inj_en',
    (0x83460324, 0x83460328),
    'FE ACE Memory Error Inject Register',
    [ 
       ('val', 0, 1, "2'h0: no error injection;\n              2'h1: 1 bit ecc error injection;\n              2'h2: 2 bit ecc error injection;\n              others: reserved"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fe_ace_mem_err_inj_sel = ( 
    'fe_ace_mem_err_inj_sel',
    (0x83460328, 0x8346032c),
    'FE ACE Memory Error Inject Select Register',
    [ 
       ('sel', 0, 7, "8'h0: ACQ_MGR q property mem\n              8'h1: ACQ_MGR sq property mem\n              8'h2: ACQ_MGR cq property mem\n              8'h3: ACQ_MGR acq dbl mem\n              8'h4: ACQ0 act_acttag_mem\n              8'h5: ACQ0 act_ctag_mem\n              8'h6: ACQ0 loc_cmd_tbl_mem\n              8'h7: ACQ0 loc_ll_mem\n              8'h8: ACQ0 loc_bcmd_mem\n              8'h9: ACQ1 acq1_ll mem \n              8'hA: ACQ1 acq1 db mem\n              others: reserved"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fe_ace_mem_err_inj_stat_0 = ( 
    'fe_ace_mem_err_inj_stat_0',
    (0x8346032c, 0x83460330),
    'FE ACE Memory Error Inject Status Register 0',
    [ 
       ('cor_err', 0, 15, 'Bit 0: ACQ_MGR q property correctable error\n              Bit 1: ACQ_MGR sq property correctable error\n              Bit 2: ACQ_MGR cq property correctable error\n              Bit 3: ACQ_MGR acq dbl mem correctable error\n              Bit 4: ACQ0 act_acttag_mem correctable error\n              Bit 5: ACQ0 act_ctag_mem correctable error\n              Bit 6: ACQ0 loc_cmd_tbl_mem correctable error\n              Bit 7: ACQ0 loc_ll_mem correctable error\n              Bit 8: ACQ0 loc_bcmd_mem correctable error\n              Bit 9: ACQ1 acq1_ll mem correctable error\n              Bit A: ACQ1 acq1 db mem correctable error\n              others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fe_ace_mem_err_inj_stat_1 = ( 
    'fe_ace_mem_err_inj_stat_1',
    (0x83460330, 0x83460334),
    'FE ACE Memory Error Inject Status Register 1',
    [ 
       ('uncor_err', 0, 15, 'Bit 0: ACQ_MGR q property mem uncorrectable error\n              Bit 1: ACQ_MGR sq property mem uncorrectable error\n              Bit 2: ACQ_MGR cq property mem uncorrectable error\n              Bit 3: ACQ_MGR acq dbl mem uncorrectable error\n              Bit 4: ACQ0 act_acttag_mem uncorrectable error\n              Bit 5: ACQ0 act_ctag_mem uncorrectable error\n              Bit 6: ACQ0 loc_cmd_tbl_mem uncorrectable error\n              Bit 7: ACQ0 loc_ll_mem uncorrectable error\n              Bit 8: ACQ0 loc_bcmd_mem uncorrectable error\n              Bit 9: ACQ1 acq1_ll mem  uncorrectable error\n              Bit A: ACQ1 acq1 db mem uncorrectable error\n              others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcq_sdsw0 = ( 
    'wcq_sdsw0',
    (0x83460340, 0x83460344),
    'Last to SDSW WCQ log 0 Register.',
    [ 
       ('log_data', 0, 31, 'log data [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcq_sdsw1 = ( 
    'wcq_sdsw1',
    (0x83460344, 0x83460348),
    'Last to SDSW WCQ log 1 Register.',
    [ 
       ('log_data', 0, 31, 'log data [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcq_sdsw2 = ( 
    'wcq_sdsw2',
    (0x83460348, 0x8346034c),
    'Last to SDSW WCQ log 2 Register.',
    [ 
       ('log_data', 0, 31, 'log data [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcq_sdsw3 = ( 
    'wcq_sdsw3',
    (0x8346034c, 0x83460350),
    'Last to SDSW WCQ log 3 Register.',
    [ 
       ('log_data', 0, 31, 'log data [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fcq_cnt = ( 
    'fcq_cnt',
    (0x83460350, 0x83460354),
    'FCQ counter.',
    [ 
       ('cnt', 0, 31, 'fcq counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cplq_cnt = ( 
    'cplq_cnt',
    (0x83460354, 0x83460358),
    'CPLQ counter.',
    [ 
       ('cnt', 0, 31, 'cplq counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rcq_cnt = ( 
    'rcq_cnt',
    (0x83460358, 0x8346035c),
    'RCQ counter.',
    [ 
       ('cnt', 0, 31, 'rcq counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcq_cnt = ( 
    'wcq_cnt',
    (0x8346035c, 0x83460360),
    'WCQ counter.',
    [ 
       ('cnt', 0, 31, 'wcq counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wcpl_cnt = ( 
    'wcpl_cnt',
    (0x83460360, 0x83460364),
    'WCPL counter.',
    [ 
       ('cnt', 0, 31, 'wcpl counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_apurcq_cnt = ( 
    'apurcq_cnt',
    (0x83460364, 0x83460368),
    'APURCQ counter.',
    [ 
       ('cnt', 0, 31, 'apurcq counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rcpl0_cnt = ( 
    'rcpl0_cnt',
    (0x83460368, 0x8346036c),
    'RCPL0 counter.',
    [ 
       ('cnt', 0, 31, 'RCPL0 counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rcpl1_cnt = ( 
    'rcpl1_cnt',
    (0x8346036c, 0x83460370),
    'RCPL1 counter.',
    [ 
       ('cnt', 0, 31, 'RCPL1 counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_actwr_cnt = ( 
    'actwr_cnt',
    (0x83460370, 0x83460374),
    'ACT Wrcounter.',
    [ 
       ('cnt', 0, 31, 'ACT WR counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cmdwr_cnt = ( 
    'cmdwr_cnt',
    (0x83460374, 0x83460378),
    'CMD WR counter.',
    [ 
       ('cnt', 0, 31, 'CMD WR counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cplrd_cnt = ( 
    'cplrd_cnt',
    (0x83460378, 0x8346037c),
    'CPL RD counter.',
    [ 
       ('cnt', 0, 31, 'CPL RD counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dmatrig_cnt = ( 
    'dmatrig_cnt',
    (0x8346037c, 0x83460380),
    'DMA TRIG counter.',
    [ 
       ('cnt', 0, 31, 'DMA TRIG counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dmacpl_cnt = ( 
    'dmacpl_cnt',
    (0x83460380, 0x83460384),
    'DMA CPL counter.',
    [ 
       ('cnt', 0, 31, 'DMA CPL counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_status = ( 
    'intr_status',
    (0x83460400, 0x83460404),
    'DCS Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit[21] mem uncor err, detail checked fe_ace_mem_err_inj_stat_1 \n                bit[20] mem cor err, detail checked fe_ace_mem_err_inj_stat_0 \n                bit[19:18]csr_acq1cpl_cq_prop_rd_err, \n                bit[17:16]:csr_acq1cmdf_sq_prop_rd_err,\n                bit[15:14]csr_acq0cpl_sq_prop_rd_err, \n                bit[13:12]:csr_acq0cmdf_cq_prop_rd_err,\n                bit11~10:reserved, \n                bit9:acq0_actt_resp_slv_err,ACQ0 ACT write slv error \n                bit8:acq0_actt_resp_dec_err,ACQ0 ACT write dec error\n                bit7:acq0_cmd_resp_slv_err, ACQ0 cmd write slv error\n                bit6:acq0_cmd_resp_dec_err, ACQ0 cmd write dec error\n                bit5:acq0_cpl_resp_slv_err, ACQ0 CPL fetch slv error\n                bit4:acq0_cpl_resp_dec_err, ACQ0 CPL fetch dec error\n                bit3:acq1_cmd_resp_slv_err, ACQ1 CMD fetch slv error\n                bit2:acq1_cmd_resp_dec_err, ACQ1 CMD fetch dec error\n                bit1:acq1_cpl_resp_slv_err, ACQ1 CPL Write slv error\n                bit0:acq1_cpl_resp_dec_err. ACQ1 CPL write dec error\n                others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_mask = ( 
    'intr_mask',
    (0x83460404, 0x83460408),
    'Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_rc = ( 
    'intr_rc',
    (0x83460408, 0x8346040c),
    'Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_intr_shadow = ( 
    'intr_shadow',
    (0x8346040c, 0x83460410),
    'Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_strm_id_lut = ( 
    'strm_id_lut',
    (0x83460500, 0x83460600),
    'Strm ID LUT ram Register.\n            64X32 memory.',
    [ 
       ('strm_id', 0, 31, 'strm_id 4/3/2/1, each has 8bits, totally 256NS'),
    ], 
    0x4,
    0x40,
    1,
    )
#############################################################
#		fce_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_fce_control_0 = ( 
    'fce_control_0',
    (0x83410000, 0x83410004),
    'FCE Control Register 0.',
    [ 
       ('nand_legacy_mode', 0, 0, 'NAND legacy mode enable. Set 1 to enable NAND controller to latch DQ with delayed RE (instead of DQS). Micron NAND is legacy (asynchronous) mode active in default.'),
       ('abort_mode', 1, 4, "Abort mode in NPS\n              2'b00: abort all commands.\n              2'b01: abort no commands.\n              2'b10: only abort erase commands.\n              2'b11: only abort erase and program commands."),
       ('csr_abort_en', 5, 5, 'Register controlled PF abort enable signal. OR together with abort enable from CCS.'),
       ('mp_prog_mode', 6, 6, 'Multi-plane prog command: whether status polling between planes need to be executed.'),
       ('mpage_prog_mode', 7, 7, 'Multi-page program on one-shot program: whether page address need to add 1.'),
       ('mp_read_mode', 8, 8, 'Multi-plane read command: whether status polling between planes need to be executed.'),
       ('mp_erase_mode', 9, 9, 'Multi-plane erase command: whether status polling between planes need to be executed.'),
       ('susp_mode', 10, 10, 'Suspend mode: after suspend is issued, whether resume command is required or rely on suspend status.'),
       ('qlc_pre_mode', 11, 11, 'Whether qlc prefix need to be applied on every plane(1) or just first plane(0).'),
       ('wpb_control', 12, 12, 'wpb PIN control, global signal for all channels'),
       ('dqs_chk_skip', 13, 13, 'Skip DQS valid count and RE sent count check for read data transfer.'),
       ('force_tight_chain', 14, 14, 'Force chain command executed as tight chain.'),
       ('nand_stas_skip', 15, 15, 'Set 1 to skip NAND status checking and NAND read status command issuing after NAND command is issued.'),
       ('polling_cnt_en', 16, 16, 'Set to 1 to enable NAND status polling counter for each NAND related command. When this bit is 1, flash controller returns 12-bit polling counter value instead of NAND status byte.'),
       ('poll_timeout_en', 17, 17, 'polling time-out check/handling enable, global signal for all channels'),
       ('soft_decode_mode', 18, 18, "soft decoding mode.\n              1'b0: 1-bit hard-bit with 1-bit soft-bit\n              1'b1: 1-bit hard-bit with 2-bit soft-bit"),
       ('mp_poll_en', 19, 19, "multi-plane polling enable.\n              1'b0: only poll and return the status of the last plane\n              1'b1: poll and return status of all planes"),
       ('ce_poll_mode', 20, 20, "Read status command for CE polling mode (micron 'h72)"),
       ('smp_poll_en', 21, 21, "multi-plane polling command (micron 'h73, only supported in MU B58R)"),
       ('prefix_skip_fst', 22, 22, 'Skip first entry in main sequence when prefix is applied'),
       ('data_toggle', 23, 23, 'Toggle data to/from NAND.'),
       ('rxfr_poll_en', 24, 24, 'Enable status polling before read data transfer in mjob_proc.'),
       ('init_poll_dis', 25, 25, 'Bypass initial status polling for commands in mjob_proc.'),
       ('job_log_admin_en', 26, 26, 'Set to 1 to log admin jobs in mjob_proc.'),
       ('job_log_erase_en', 27, 27, 'Set to 1 to log erase jobs in mjob_proc.'),
       ('job_log_read_en', 28, 28, 'Set to 1 to log read jobs in mjob_proc.'),
       ('job_log_prog_en', 29, 29, 'Set to 1 to log prog jobs in mjob_proc.'),
       ('job_log_en', 30, 30, 'Set to 1 to log jobs in mjob_proc.'),
       ('main_phase_flex_only', 31, 31, 'Only apply flexible command flow on the main phase of read/prog/erase commands. Suspend and abort flow still use legacy mode.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_control_1 = ( 
    'fce_control_1',
    (0x83410004, 0x83410008),
    'FCE Control Register 1.',
    [ 
       ('dqs_timeout_thr', 0, 15, 'DQS waiting threshold until DQS valid count matches RE count'),
       ('rdsr_re_delay', 16, 20, "RE delay in terms of dqs cycles for read status command, valid range is 0~5'h10. In Legacy NAND, data is ready after RE falling edge, use this register to adjust data read strobe."),
       ('DQS_delay', 21, 23, "DQS delay in terms of app_clk cycles on the write direction, valid range is 0~2'h11. DQS will be DQS_delay behind the DQ to the NDPHY"),
       ('wr_warmup_cycle', 24, 27, "number of warmup DQS on the program direction\n              4'h0: no warmup DQS;\n              4'h1: reserved;\n              4'h2: 2 cycles of warmup DQS;\n              4'h3, 4'h4: 4 cycles of warmup DQS;\n              4'h5-4'hf: wrap up even cycle number"),
       ('rd_warmup_cycle', 28, 31, "number of warmup RE on the read direction\n              4'h0: no warmup RE;\n              4'h1: reserved;\n              4'h2: 2 cycles of warmup RE;\n              4'h3, 4'h4: 4 cycles of warmup RE;\n              4'h5-4'hf: wrap up even cycle number"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_control_2 = ( 
    'fce_control_2',
    (0x83410008, 0x8341000c),
    'Flash Controller Control Register 2.',
    [ 
       ('nand_mirror_en', 4, 11, 'NAND electronic mirroring enable. When set to 1, DQ on corresponding CE is mirrored.'),
       ('short_poll_thr', 12, 15, 'Short polling threshold in mjob_proc(in unit of 16).'),
       ('CE_0_remap', 16, 17, 'NAND CE remapping for CE 0.'),
       ('CE_1_remap', 18, 19, 'NAND CE remapping for CE 1.'),
       ('CE_2_remap', 20, 21, 'NAND CE remapping for CE 2.'),
       ('CE_3_remap', 22, 23, 'NAND CE remapping for CE 3.'),
       ('encoded_ce', 24, 24, 'NAND encoded CE.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_status_0 = ( 
    'fce_status_0',
    (0x8341000c, 0x83410010),
    'FCE Status Register 0.',
    [ 
       ('ndphy_rdy', 0, 15, 'NDPHY is ready. The FW/SW needs to make sure the NDPHY ready bit is set before issuing any NAND command upon power-on.'),
       ('fce_status_bsy', 16, 16, '0: Flash controller engine is idle, 1: Flash controller engine is busy, i.e., there are outstanding jobs in controller.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_data_xfr_pause_ctrl_0 = ( 
    'data_xfr_pause_ctrl_0',
    (0x83410010, 0x83410014),
    'Data Transfer Pause Control Register 0.',
    [ 
       ('pause_mode', 0, 0, '0: no specific resume sequence needed, just hold bus;\n              1: need to stop data transfer and issue resume command;'),
       ('pause_post_cmd', 8, 15, 'Post command byte for program pause command.'),
       ('resume_post_cmd_0', 16, 23, 'Post command byte for program pause command last plane.'),
       ('resume_post_cmd_1', 24, 31, 'Post command byte for program resume command non-last plane.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_data_xfr_pause_ctrl_1 = ( 
    'data_xfr_pause_ctrl_1',
    (0x83410014, 0x83410018),
    'Data Transfer Pause Control Register 1.',
    [ 
       ('pause_timer_thr', 0, 7, 'The minimum pause time for data burst (in unit of 16 sclk cycles).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_addr_config_0 = ( 
    'nand_addr_config_0',
    (0x83410020, 0x83410024),
    'NAND address configuration 0.',
    [ 
       ('lun_addr_ofst', 24, 31, 'NAND address LUN address bit offset.'),
       ('lun_addr_width', 16, 23, 'NAND address LUN address bit width.'),
       ('block_addr_ofst', 8, 15, 'NAND address Block address bit offset.'),
       ('block_addr_width', 0, 7, 'NAND address Block address bit width.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_addr_config_1 = ( 
    'nand_addr_config_1',
    (0x83410024, 0x83410028),
    'NAND address configuration 1.',
    [ 
       ('plane_addr_ofst', 24, 31, 'NAND address Plane address bit offset.'),
       ('plane_addr_width', 16, 23, 'NAND address Plane address bit width.'),
       ('page_addr_ofst', 8, 15, 'NAND address Page address bit offset.'),
       ('page_addr_width', 0, 7, 'NAND address Page address bit width.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_iwl_multi_link_cfg = ( 
    'iwl_multi_link_cfg',
    (0x8341002c, 0x83410030),
    'IWL Read Multi-Link mode config.',
    [ 
       ('die3', 28, 31, 'NAND Link Die 3.'),
       ('die2', 24, 27, 'NAND Link Die 2.'),
       ('die1', 20, 23, 'NAND Link Die 1.'),
       ('die0', 16, 19, 'NAND Link Die 0.'),
       ('link_mode', 0, 1, "IWL Multi-Link Mode.\n                                  2'b00: Disabled;\n                                  2'b01: 32-die mode;\n                                  2'b10: 64-die mode;\n                                  2'b11: Reserved;"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_info_cfg = ( 
    'nand_info_cfg',
    (0x83410030, 0x83410034),
    'NAND information configuration register.',
    [ 
       ('page_size_b', 0, 15, 'NAND page size in (byte).'),
       ('sub_deck_size_p', 16, 29, 'Sub-block deck size in page number.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_adv_read_control = ( 
    'adv_read_control',
    (0x83410034, 0x83410038),
    'Advanced Read feature control register.',
    [ 
       ('iwl_read_en', 0, 0, 'independent wordline read enbale.'),
       ('retry_iwl_en', 1, 1, 'Read retry command can do iwl read.'),
       ('die_pattern_sel', 4, 5, "Die pattern select\n               2'b00: only CE0 and CE1 exist\n               2'b01: only CE0 and CE2 exist\n               2'b10: only CE2 and CE3 exist\n               2'b11: CE0-CE3 all exist"),
       ('die_num', 6, 7, "num of die exist in one CE\n               2'b00: 1 die (IWLx8)\n               2'b01: 2 die (IWLx8)\n               2'b10: 4 die (IWLx4)\n               2'b11: 8 die (IWLx2)"),
       ('iwl_grp_mode', 8, 9, 'IWL group mode:\n                0: snap read required. (Micron NAND requirement)\n                1: all read can do IWL.(BICS NAND)\n                2: B47R mode.\n                3: Reserved.'),
       ('snap_rd_en', 16, 16, 'Snap read enable.'),
       ('snap_seq_rd_dis', 17, 17, 'Sequential read disabled for snap read'),
       ('snap_rd_chk_mode', 18, 19, 'Snap read check:\n                0: check disabled;\n                1: 16K snap read check;\n                2: 8K snap read check;\n                3: 4K snap read check;'),
       ('mp_snap_rd_mode', 20, 20, 'Multi-Plane snap read need inter-plane status polling or not: (0: no status read; 1: status read required)'),
       ('seq_rd_en', 24, 24, 'Enable sequential read feature:\n               Perform full plane read for non-snap read.'),
       ('xfr_only_read', 25, 25, 'Enable sequential read feature:\n               The address of last read for each die. \n               Make use of the data in the NAND data buffer when possible.'),
       ('seq_rd_dis_id_chk', 26, 26, 'Sequential read does not check flexible sequence id.'),
       ('seq_rd_dis_on_retry', 27, 27, 'Sequential read is disabled on read retry command.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_iwl_group_mask_0 = ( 
    'iwl_group_mask_0',
    (0x83410038, 0x8341003c),
    'NAND IWL group mask control register 0.',
    [ 
       ('plane_0', 0, 7, 'Plane group mask for plane 0.'),
       ('plane_1', 8, 15, 'Plane group mask for plane 1.'),
       ('plane_2', 16, 23, 'Plane group mask for plane 2.'),
       ('plane_3', 24, 31, 'Plane group mask for plane 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_iwl_group_mask_1 = ( 
    'iwl_group_mask_1',
    (0x8341003c, 0x83410040),
    'NAND IWL group mask control register 1.',
    [ 
       ('plane_4', 0, 7, 'Plane group mask for plane 4.'),
       ('plane_5', 8, 15, 'Plane group mask for plane 5.'),
       ('plane_6', 16, 23, 'Plane group mask for plane 6.'),
       ('plane_7', 24, 31, 'Plane group mask for plane 7.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_rd_owl_feat_addr = ( 
    'nand_rd_owl_feat_addr',
    (0x83410040, 0x83410044),
    'NAND read owl set feature address configure.',
    [ 
       ('rdowl_feat_addr', 0, 7, 'NAND owl feature address.'),
       ('retry_resu_feat_addr', 8, 15, 'NAND prog feature address.'),
       ('prog_setf_addr', 16, 23, 'NAND prog feature address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_rd_owl_feat_bytes = ( 
    'nand_rd_owl_feat_bytes',
    (0x83410044, 0x83410048),
    'NAND read owl set feature bytes configure.',
    [ 
       ('feat_bytes', 0, 31, 'NAND owl feature bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_rd_owl_back_feat_bytes = ( 
    'nand_rd_owl_back_feat_bytes',
    (0x83410048, 0x8341004c),
    'NAND read owl set feature bytes back configure.',
    [ 
       ('feat_bytes', 0, 31, 'NAND owl feature bytes when set back.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_retry_resu_feat_bytes = ( 
    'nand_retry_resu_feat_bytes',
    (0x8341004c, 0x83410050),
    'NAND retry resume set feature bytes back configure.',
    [ 
       ('feat_bytes', 0, 31, 'NAND retry resume feature bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_sts_config_0 = ( 
    'nand_sts_config_0',
    (0x83410050, 0x83410054),
    'NAND status pass bit configure.',
    [ 
       ('psus_bit', 0, 7, 'NAND status bit mask for program suspend status bit.'),
       ('esus_bit', 8, 15, 'NAND status bit mask for erase suspend status bit.'),
       ('pafa_bit', 16, 23, 'NAND status bit mask for pass/fail status bit.'),
       ('pafa_slc_bit', 24, 31, 'NAND status bit mask for pass/fail slc command status bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_sts_config_1 = ( 
    'nand_sts_config_1',
    (0x83410054, 0x83410058),
    'NAND status ready bit configure.',
    [ 
       ('read_rdy_bit', 0, 7, 'NAND status bit mask for read command. (before data transfer)'),
       ('prog_rdy_bit', 8, 15, 'NAND status bit mask for program command.'),
       ('erase_rdy_bit', 16, 23, 'NAND status bit mask for erase command.'),
       ('misc_rdy_bit', 24, 31, 'NAND status bit mask for misc command.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_sts_config_2 = ( 
    'nand_sts_config_2',
    (0x83410058, 0x8341005c),
    'NAND status ready bit configure.',
    [ 
       ('psus_rdy_bit', 0, 7, 'NAND status bit mask for program suspend command.'),
       ('esus_rdy_bit', 8, 15, 'NAND status bit mask for erase suspend command.'),
       ('rdsus_rdy_bit', 16, 23, 'NAND status bit mask for read command during suspend.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_sts_config_3 = ( 
    'nand_sts_config_3',
    (0x8341005c, 0x83410060),
    'NAND status ready bit configure.',
    [ 
       ('init_poll_rdy_bit', 0, 7, 'NAND status bit mask for init polling.'),
       ('init_poll_susp_rdy_bit', 8, 15, 'NAND status bit mask for init polling during suspend.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_susp_control = ( 
    'susp_control',
    (0x83410060, 0x83410064),
    'Flash Controller suspend Register.',
    [ 
       ('hp_rd_en', 0, 0, 'high priority read enable, allows the read command executed earlier'),
       ('erase_susp_en', 4, 4, 'erase suspend enable, only valid when hp_rd_en is set'),
       ('prog_susp_en', 5, 5, 'program suspend enable, only valid when hp_rd_en is set'),
       ('prog_max_susp_num', 6, 10, 'max number of suspend for each program operation. \n              If a program operation has been suspended for prog_max_susp_num of times, do not suspend anymore.'),
       ('erase_max_susp_num', 11, 15, 'max number of suspend for each erase operation. \n              If an erase operation has been suspended for erase_max_susp_num of times, do not suspend anymore.'),
       ('erase_susp_dist', 16, 23, 'Erase suspend check distance. Erase suspend could only happen at the point of n x erase_susp_dis.\n              The distance is counted in the unit of polling time out counter'),
       ('prog_susp_dist', 24, 31, 'Program suspend check distance. Program suspend could only happen at the point of n x prog_susp_dis.\n              The distance is counted in the unit of polling time out counter'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_traf_bal_control = ( 
    'traf_bal_control',
    (0x83410064, 0x83410068),
    'Traffic Balance Control',
    [ 
       ('susp_rd_cmd_thr', 0, 4, 'Max read command count threshold during suspend.'),
       ('nor_grant_thr', 8, 15, 'Timer unit count threshold to grant normal link job access'),
       ('mid_grant_thr', 16, 20, 'Max number of hpr read command to be processed consecutively when mid read is waiting.'),
       ('nor_timer_sel', 28, 31, 'Timer unit select'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_table_config = ( 
    'retry_table_config',
    (0x83410070, 0x83410074),
    'Retry Table configure register.',
    [ 
       ('wr', 0, 0, 'write values in registers to table entry.(write 1 clear)'),
       ('rd', 1, 1, 'Load values from table entry to registers.(write 1 clear)'),
       ('tbl_sel', 2, 3, 'Table to edit or read from. \n                                 0: vt_option value table \n                                 1: vt_option address table\n                                 2: page type table\n                                 3: Reserved'),
       ('vt_level', 8, 13, 'vt level when editing or reading vt_option value table'),
       ('ptype', 16, 19, 'page type when editing or reading page type table'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_control = ( 
    'retry_control',
    (0x83410074, 0x83410078),
    'Retry control register.',
    [ 
       ('flex_sid', 0, 7, 'Generated flexible command sid.'),
       ('retry_post', 8, 8, 'Generated flexible command after read command.'),
       ('retry_mode', 9, 9, 'Whether 1(0) or 4(1) bytes are valid in a single set feature command.'),
       ('resume_setf', 10, 10, 'A set feature command to reset offsets is required after resume.'),
       ('retry_pre', 11, 11, 'Generate flexible command before read command.'),
       ('retry_tight_chain', 12, 12, 'Retry command chain is using tight chain option.'),
       ('retry_prefix', 13, 13, 'Force retry command to add prefix.'),
       ('retry_xfr_len', 16, 19, 'Retry flexible command transfer length.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl0 = ( 
    'retry_options_tbl0',
    (0x83410080, 0x83410084),
    'Retry table entry DW0.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl1 = ( 
    'retry_options_tbl1',
    (0x83410084, 0x83410088),
    'Retry table entry DW1.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl2 = ( 
    'retry_options_tbl2',
    (0x83410088, 0x8341008c),
    'Retry table entry DW2.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl3 = ( 
    'retry_options_tbl3',
    (0x8341008c, 0x83410090),
    'Retry table entry DW3.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl4 = ( 
    'retry_options_tbl4',
    (0x83410090, 0x83410094),
    'Retry table entry DW4.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl5 = ( 
    'retry_options_tbl5',
    (0x83410094, 0x83410098),
    'Retry table entry DW5.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl6 = ( 
    'retry_options_tbl6',
    (0x83410098, 0x8341009c),
    'Retry table entry DW6.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_retry_options_tbl7 = ( 
    'retry_options_tbl7',
    (0x8341009c, 0x834100a0),
    'Retry table entry DW7.',
    [ 
       ('table_value', 0, 31, 'table value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_erase_page_thr = ( 
    'erase_page_thr',
    (0x834100a0, 0x834100a4),
    'erase page threshold.',
    [ 
       ('erase_page_thr', 0, 7, 'erase page threshold. \n            If the number of bit "0" in a read ransfer is equal or less than the erase page threshold, the FCE will report erase page to the CCS.'),
       ('zero_page_thr', 8, 15, 'zero page threshold.\n            If the number of bit "1" in a read ransfer is equal or less than the zero page threshold, the FCE will report zero page to the CCS.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_prog_feat_bytes = ( 
    'nand_prog_feat_bytes',
    (0x834100a4, 0x834100a8),
    'NAND program set feature bytes configure.',
    [ 
       ('feat_bytes', 0, 31, 'NAND program set feature bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_prog_feat_back_bytes = ( 
    'nand_prog_feat_back_bytes',
    (0x834100a8, 0x834100ac),
    'NAND program set feature bytes back configure.',
    [ 
       ('feat_bytes', 0, 31, 'NAND program feature bytes when set back.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_gen_cmd_cfg = ( 
    'nand_gen_cmd_cfg',
    (0x834100b0, 0x834100b4),
    'NAND General Command configure.',
    [ 
       ('slc_prefix1', 0, 7, 'prefix command1 to enter SLC mode.'),
       ('slc_prefix2', 8, 15, 'prefix command to exit SLC mode.'),
       ('gen_cmd0', 16, 23, 'General command 0.'),
       ('gen_cmd1', 24, 31, 'Page type 0x7 prefix.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_erase_cmd_cfg = ( 
    'nand_erase_cmd_cfg',
    (0x834100b4, 0x834100b8),
    'NAND Erase Command configure.',
    [ 
       ('erase_cmd0', 0, 7, 'Erase command 0.'),
       ('erase_cmd1', 8, 15, 'Erase command 1.'),
       ('erase_cmd2', 16, 23, 'Erase command 0.'),
       ('erase_cmd3', 24, 31, 'Erase command 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_prog_cmd_cfg = ( 
    'nand_prog_cmd_cfg',
    (0x834100b8, 0x834100bc),
    'NAND Program Command configure.',
    [ 
       ('prog_cmd0', 0, 7, 'Program command 0.'),
       ('prog_cmd1', 8, 15, 'Program command 1.'),
       ('prog_cmd2', 16, 23, 'Program command ending byte for non-last page.'),
       ('prog_cmd3', 24, 31, 'Program command ending byte for last page.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_read_cmd_cfg = ( 
    'nand_read_cmd_cfg',
    (0x834100bc, 0x834100c0),
    'NAND Read Command configure.',
    [ 
       ('read_cmd0', 0, 7, 'General command 0.'),
       ('read_cmd1', 8, 15, 'General command 1.'),
       ('read_cmd2', 16, 23, 'Snap Read command 0'),
       ('read_cmd3', 24, 31, 'Snap Read command 1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_misc_cmd_cfg = ( 
    'nand_misc_cmd_cfg',
    (0x834100c0, 0x834100c4),
    'NAND Misc(Admin) Command configure.',
    [ 
       ('misc_cmd0', 0, 7, 'Misc command 0.'),
       ('misc_cmd1', 8, 15, 'Misc command 1.'),
       ('misc_cmd2', 16, 23, 'Misc command 2.'),
       ('misc_cmd3', 24, 31, 'Misc command 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_prot_ctrl = ( 
    'fce_prot_ctrl',
    (0x834100d0, 0x834100d4),
    'FCE message and data protection control.',
    [ 
       ('msg_crc_en', 0, 0, 'AXI message bus master port CRC generation enable.'),
       ('msg_crc_bypass', 1, 1, 'AXI message bus slave port CRC check bypass.'),
       ('job_info_ecc_en', 2, 2, 'Job info Buffer memory ECC protection enable.'),
       ('wfm_ecc_en', 3, 3, 'WFM memory ECC protection enable.'),
       ('fmem_ecc_en', 4, 4, 'Job flexible command sequence memory ECC protection enable.'),
       ('disp_ll_ecc_en', 5, 5, 'Job Dispatcher linked-list memory ECC protection enable.'),
       ('disp_cmem_ecc_en', 6, 6, 'Job Dispatcher command memory ECC protection enable.'),
       ('lidx_fifo_ecc_en', 7, 7, 'Job Dispatcher linked-list index fifo ECC protection enable.'),
       ('msg_err_clr', 16, 16, 'AXI message bus slave port transaction error clear.'),
       ('data_trans_err_clr', 17, 17, 'AXI data bus slave port transaction error clear.'),
       ('job_info_ecc_err_clr', 18, 18, 'Job info Buffer memory ECC error clear.'),
       ('wfm_ecc_err_clr', 19, 19, 'WFM memory ECC error clear.'),
       ('fmem_ecc_err_clr', 20, 20, 'Job flexible command sequence memory ECC error clear.'),
       ('disp_ll_ecc_err_clr', 21, 21, 'Job Dispatcher linked-list memory ECC error clear.'),
       ('disp_cmem_ecc_err_clr', 22, 22, 'Job Dispatcher command memory ECC error clear.'),
       ('lidx_fifo_ecc_err_clr', 23, 23, 'Job Dispatcher link index mem ECC error clear.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_cfg = ( 
    'fce_indir_mode_cfg',
    (0x834100e0, 0x834100e4),
    'FCE Indirect mode config Register',
    [ 
       ('indir_mode_en', 0, 0, 'Indirect mode enable.'),
       ('indir_mode_cpl_rdy', 1, 1, 'Indirect mode completion ready to read.'),
       ('indir_mode_rdata_rdy', 2, 2, 'Indirect mode read data ready to read.'),
       ('indir_mode_pdata_full', 3, 3, 'Indirect mode program data fifo full.'),
       ('cmd_fifo_full', 4, 4, 'Indirect mode command fifo full flag.'),
       ('cpl_fifo_full', 5, 5, 'Indirect mode completion fifo full flag.'),
       ('cmd_fifo_cnt', 8, 11, 'Indirect mode command fifo count.'),
       ('cpl_fifo_cnt', 12, 15, 'Indirect mode completion fifo count.'),
       ('xfer_cnt', 16, 31, 'Indirect mode data transaction count.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_status = ( 
    'fce_indir_mode_status',
    (0x834100e4, 0x834100e8),
    'FCE Indirect mode status Register',
    [ 
       ('cmd_cnt', 0, 15, 'FCE indirect mode command DW count'),
       ('cpl_cnt', 16, 31, 'FCE indirect mode completion DW count'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_cmd = ( 
    'fce_indir_mode_cmd',
    (0x834100e8, 0x834100ec),
    'FCE Indirect mode command Register',
    [ 
       ('cmd_in', 0, 31, 'FCE indirect mode command input'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_cpl = ( 
    'fce_indir_mode_cpl',
    (0x834100ec, 0x834100f0),
    'FCE Indirect mode completion Register',
    [ 
       ('cpl_out', 0, 31, 'FCE indirect mode completion output'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_pdata = ( 
    'fce_indir_mode_pdata',
    (0x834100f0, 0x834100f4),
    'FCE Indirect mode program data input Register',
    [ 
       ('pdata_in', 0, 31, 'FCE indirect mode pdata input'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_indir_mode_rdata = ( 
    'fce_indir_mode_rdata',
    (0x834100f4, 0x834100f8),
    'FCE Indirect mode read data output Register',
    [ 
       ('rdata_out', 0, 31, 'FCE indirect mode rdata output'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_smem_acc_control = ( 
    'smem_acc_control',
    (0x83410100, 0x83410104),
    'NAND sequence memory access control.',
    [ 
       ('seq_id', 0, 6, 'Sequence ID. Up to 128 sequences are supported.'),
       ('smem_addr', 8, 11, 'Each sequence consists of up to 16 DW entries, this register is to address an entry in selected sequence.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_smem_acc_io = ( 
    'smem_acc_io',
    (0x83410104, 0x83410108),
    'NAND sequence memory access io.',
    [ 
       ('seq_data_io', 0, 31, 'Data io register. Every write or read this register increments register smem_acc_control field smem_addr by 1. Sequence memory width is 4B.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fmem_acc_control = ( 
    'fmem_acc_control',
    (0x83410108, 0x8341010c),
    'Flexible command sequence memory access control.',
    [ 
       ('mem_addr', 0, 8, 'Flexible sequence memory access address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fmem_acc_io = ( 
    'fmem_acc_io',
    (0x8341010c, 0x83410110),
    'Flexible command sequence memory access io.',
    [ 
       ('fmem_data', 0, 31, 'Data io register. Every write or read this register increments register fmem_acc_control field fmem_addr by 1. Sequence memory width is 4B.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer_base_control = ( 
    'rs_timer_base_control',
    (0x83410118, 0x8341011c),
    'Flash Controller Read Status Timer Control Register 0.',
    [ 
       ('timeout_base', 0, 15, 'The threshold to trigger the increasing of the time out counter.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer0_control0 = ( 
    'rs_timer0_control0',
    (0x83410120, 0x83410124),
    'Flash Controller Read Status Timer0 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer0_control1 = ( 
    'rs_timer0_control1',
    (0x83410124, 0x83410128),
    'Flash Controller Read Status Timer0 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer1_control0 = ( 
    'rs_timer1_control0',
    (0x83410128, 0x8341012c),
    'Flash Controller Read Status Timer1 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer1_control1 = ( 
    'rs_timer1_control1',
    (0x8341012c, 0x83410130),
    'Flash Controller Read Status Timer1 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer2_control0 = ( 
    'rs_timer2_control0',
    (0x83410130, 0x83410134),
    'Flash Controller Read Status Timer2 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer2_control1 = ( 
    'rs_timer2_control1',
    (0x83410134, 0x83410138),
    'Flash Controller Read Status Timer2 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer3_control0 = ( 
    'rs_timer3_control0',
    (0x83410138, 0x8341013c),
    'Flash Controller Read Status Timer3 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer3_control1 = ( 
    'rs_timer3_control1',
    (0x8341013c, 0x83410140),
    'Flash Controller Read Status Timer3 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer4_control0 = ( 
    'rs_timer4_control0',
    (0x83410140, 0x83410144),
    'Flash Controller Read Status Timer4 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer4_control1 = ( 
    'rs_timer4_control1',
    (0x83410144, 0x83410148),
    'Flash Controller Read Status Timer4 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer5_control0 = ( 
    'rs_timer5_control0',
    (0x83410148, 0x8341014c),
    'Flash Controller Read Status Timer5 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer5_control1 = ( 
    'rs_timer5_control1',
    (0x8341014c, 0x83410150),
    'Flash Controller Read Status Timer5 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer6_control0 = ( 
    'rs_timer6_control0',
    (0x83410150, 0x83410154),
    'Flash Controller Read Status Timer6 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer6_control1 = ( 
    'rs_timer6_control1',
    (0x83410154, 0x83410158),
    'Flash Controller Read Status Timer6 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer7_control0 = ( 
    'rs_timer7_control0',
    (0x83410158, 0x8341015c),
    'Flash Controller Read Status Timer7 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer7_control1 = ( 
    'rs_timer7_control1',
    (0x8341015c, 0x83410160),
    'Flash Controller Read Status Timer7 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer8_control0 = ( 
    'rs_timer8_control0',
    (0x83410160, 0x83410164),
    'Flash Controller Read Status Timer8 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer8_control1 = ( 
    'rs_timer8_control1',
    (0x83410164, 0x83410168),
    'Flash Controller Read Status Timer8 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer9_control0 = ( 
    'rs_timer9_control0',
    (0x83410168, 0x8341016c),
    'Flash Controller Read Status Timer9 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer9_control1 = ( 
    'rs_timer9_control1',
    (0x8341016c, 0x83410170),
    'Flash Controller Read Status Timer9 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer10_control0 = ( 
    'rs_timer10_control0',
    (0x83410170, 0x83410174),
    'Flash Controller Read Status Timer10 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer10_control1 = ( 
    'rs_timer10_control1',
    (0x83410174, 0x83410178),
    'Flash Controller Read Status Timer10 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer11_control0 = ( 
    'rs_timer11_control0',
    (0x83410178, 0x8341017c),
    'Flash Controller Read Status Timer11 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer11_control1 = ( 
    'rs_timer11_control1',
    (0x8341017c, 0x83410180),
    'Flash Controller Read Status Timer11 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer12_control0 = ( 
    'rs_timer12_control0',
    (0x83410180, 0x83410184),
    'Flash Controller Read Status Timer12 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer12_control1 = ( 
    'rs_timer12_control1',
    (0x83410184, 0x83410188),
    'Flash Controller Read Status Timer12 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer13_control0 = ( 
    'rs_timer13_control0',
    (0x83410188, 0x8341018c),
    'Flash Controller Read Status Timer13 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer13_control1 = ( 
    'rs_timer13_control1',
    (0x8341018c, 0x83410190),
    'Flash Controller Read Status Timer13 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer14_control0 = ( 
    'rs_timer14_control0',
    (0x83410190, 0x83410194),
    'Flash Controller Read Status Timer14 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer14_control1 = ( 
    'rs_timer14_control1',
    (0x83410194, 0x83410198),
    'Flash Controller Read Status Timer14 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer15_control0 = ( 
    'rs_timer15_control0',
    (0x83410198, 0x8341019c),
    'Flash Controller Read Status Timer15 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer15_control1 = ( 
    'rs_timer15_control1',
    (0x8341019c, 0x834101a0),
    'Flash Controller Read Status Timer15 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer_select = ( 
    'rs_timer_select',
    (0x834101a0, 0x834101a4),
    'Flash Controller Read Status Timer select.',
    [ 
       ('reset_timer_sel', 0, 4, 'PF reset and timeout reset timer select.'),
       ('prog_susp_timer_sel', 8, 12, 'Program suspend timer select.'),
       ('erase_susp_timer_sel', 16, 20, 'Erase suspend timer select.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scrambler_control = ( 
    'scrambler_control',
    (0x834101b0, 0x834101b4),
    'Scrambler control register.',
    [ 
       ('bypass_scrambler', 0, 0, 'Scrambler bypass.'),
       ('bypass_descrambler', 1, 1, 'Descrambler bypass.'),
       ('seed_source', 2, 2, 'Scrambler/Descrambler seed source selection.'),
       ('scramb_resume', 3, 3, 'Scrambler/Descrambler resume.'),
       ('scramb_debug_mode', 4, 7, 'Scrambler/Descrambler debug mode.'),
       ('scramb_addr_mode', 8, 11, 'Scrambler/Descrambler address mode.\n              0: effective address = page_addr;\n              1: effective address = page_addrx3+page_type;\n              2: effective address = page_addrx4+page_type;\n              others: reserved;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scr_seed_0 = ( 
    'scr_seed_0',
    (0x834101b4, 0x834101b8),
    'Scrambler seed lower 32 bit.',
    [ 
       ('scrambler_seed_l', 0, 31, 'Scrambler seed lower 32 bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scr_seed_1 = ( 
    'scr_seed_1',
    (0x834101b8, 0x834101bc),
    'Scrambler seed upper 32 bit.',
    [ 
       ('scrambler_seed_h', 0, 31, 'Scrambler seed upper 32 bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_0 = ( 
    'ecc_control_0',
    (0x834101c0, 0x834101c4),
    'ECC Control Register 0.',
    [ 
       ('bypass_codec', 0, 0, 'Bypass LDPC codec.'),
       ('post_process_disable', 1, 1, 'Disable LDPC decoder post processing.'),
       ('ldpc_parity_out', 2, 2, '1: LDPC decoder output parity data, error count will be accurate, but lower the throughput. 0: LDPC decoder does not output parity data.'),
       ('save_fail_raw_data', 3, 3, 'save_failed_raw_data'),
       ('questionable_sense', 4, 4, 'The value provided by NAND when the soft read of a bit is questionable/weak.'),
       ('circulant_parity_en', 5, 5, 'Enable the circulant parity feature: the parity of each 256-bit block in the message is calculated in the encoder, and the resulting 8B is inserted in the codeword, allowing the decoder the ability to decode some difficult error patterns.'),
       ('ldpc_debug_mode', 6, 6, 'LDPC debug mode enable.'),
       ('ldpc_test_mode', 7, 7, "If it's 1, HW inject soft errors into hard code words, and do soft-decision decoding on them, to allow faster test of the soft-decision decoder."),
       ('ldpc_matrix_sel', 8, 11, 'LDPC matrix selection for both encoder/decoder.'),
       ('post_trigger_iter', 16, 31, 'After this iterartion, post processing will be triggered..'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_1 = ( 
    'ecc_control_1',
    (0x834101c4, 0x834101c8),
    'ECC Control Register 1.',
    [ 
       ('err_inj_en', 0, 0, 'Enable inject error before write to NAND.'),
       ('err_inj_bits', 4, 13, 'Specify how many bits of error to inject.'),
       ('lfsr_seed', 16, 31, 'lfsr seed. Write to this register will initialize lfsr with specified seed.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_2 = ( 
    'ecc_control_2',
    (0x834101c8, 0x834101cc),
    'ECC Control Register 2.',
    [ 
       ('max_dec_iter_0', 0, 15, 'Maximum number of decoding iteration 0.'),
       ('max_dec_iter_1', 16, 31, 'Maximum number of decoding iteration 1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_3 = ( 
    'ecc_control_3',
    (0x834101cc, 0x834101d0),
    'ECC Control register 3.',
    [ 
       ('dec_ctrl', 0, 31, 'LDPC decoder control field'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_4 = ( 
    'ecc_control_4',
    (0x834101d0, 0x834101d4),
    'LDPC Post process control.',
    [ 
       ('weight_threshold_post', 0, 7, 'LDPC decoder post weight threshold'),
       ('weight_threshold_circ', 8, 15, 'LDPC decoder circulant weight threshold'),
       ('likelihood_threshold', 16, 23, 'LDPC decoder likelihood threshold'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_5 = ( 
    'ecc_control_5',
    (0x834101d4, 0x834101d8),
    'LDPC control 5.',
    [ 
       ('weight_max_224_hd', 0, 11, 'LDPC decoder weight_max_hd for matrix_sel=0'),
       ('weight_max_224_sd', 12, 23, 'LDPC decoder weight_max_sd for matrix_sel=0'),
       ('miscorrection_detection_dis', 24, 24, 'set 1 to disable the LDPC decoder miscorrection dectection with parity circulant.'),
       ('dec_early_terminate_dis', 25, 25, 'set 1 to disable the LDPC decoder early termination with large error.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_0 = ( 
    'ecc_status_0',
    (0x834101d8, 0x834101dc),
    'ECC Status Register 0.',
    [ 
       ('fail_cw_mem_id', 0, 3, 'Mem id where failed raw codeword is stored.\n               0: memory address 0\n               1: memory address 72\n               2: memory address 144\n               3: memory address 216\n               4: memory address 288\n               5: memory address 360'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_1 = ( 
    'ecc_status_1',
    (0x834101dc, 0x834101e0),
    'ECC Status Register 1.',
    [ 
       ('fail_tag_l', 0, 31, 'The tag[31:0] of the failed codeword.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_2 = ( 
    'ecc_status_2',
    (0x834101e0, 0x834101e4),
    'ECC Status Register 2.',
    [ 
       ('fail_tag_h', 0, 26, 'The tag[58:32] of the failed codeword.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_3 = ( 
    'ecc_status_3',
    (0x834101e4, 0x834101e8),
    'ECC Status Register 3.',
    [ 
       ('status', 0, 31, 'LDPC status register 3 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_4 = ( 
    'ecc_status_4',
    (0x834101e8, 0x834101ec),
    'ECC Status Register 4.',
    [ 
       ('status', 0, 31, 'LDPC status register 4 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_5 = ( 
    'ecc_status_5',
    (0x834101ec, 0x834101f0),
    'ECC Status Register 5.',
    [ 
       ('status', 0, 31, 'LDPC status register 5 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_6 = ( 
    'ecc_status_6',
    (0x834101f0, 0x834101f4),
    'ECC Status Register 6.',
    [ 
       ('status', 0, 31, 'LDPC status register 6 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_status_7 = ( 
    'ecc_status_7',
    (0x834101f4, 0x834101f8),
    'ECC Status Register 7.',
    [ 
       ('status', 0, 31, 'LDPC status register 7 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_6 = ( 
    'ecc_control_6',
    (0x834101f8, 0x834101fc),
    'LDPC control 6.',
    [ 
       ('weight_max_288_hd', 0, 11, 'LDPC decoder weight_max_hd for matrix_sel=1'),
       ('weight_max_288_sd', 12, 23, 'LDPC decoder weight_max_sd for matrix_sel=1'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ecc_control_7 = ( 
    'ecc_control_7',
    (0x834101fc, 0x83410200),
    'LDPC control 7.',
    [ 
       ('control', 0, 31, 'reserved for LDPC decoder control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_control_0 = ( 
    'ndphy_control_0',
    (0x83410200, 0x83410204),
    'NDPHY Control Register 0.',
    [ 
       ('ndphy_cal_mode', 0, 2, "Xilinx FPGA (Haps)\n                NDPHY calibration mode\n                3'b00: SDR mode;\n                3'b01: NVDDR2/3 mode;\n                3'b10: Reserved;\n                3'b11: Reserved;\n              BRCM ASIC\n                NDPHY calibration mode\n                3'b00: SDR mode;\n                3'b01: Reserved;\n                3'b10: NVDDR2/3 mode;\n                3'b11: Reserved;"),
       ('ndphy_clkce', 4, 5, 'Xilinx NANDPHY clock enable'),
       ('ndphy_clk_lock', 6, 6, 'Xilinx NANDPHY pll lock status'),
       ('ndphy_rst', 7, 7, 'Xilinx NANDPHY pll clock reset'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_rank_config_0 = ( 
    'ndphy_rank_config_0',
    (0x83410208, 0x8341020c),
    'NDPHY rank configuration 0.',
    [ 
       ('rank_die_7', 28, 31, 'Rank for die 7.'),
       ('rank_die_6', 24, 27, 'Rank for die 6.'),
       ('rank_die_5', 20, 23, 'Rank for die 5.'),
       ('rank_die_4', 16, 19, 'Rank for die 4.'),
       ('rank_die_3', 12, 15, 'Rank for die 3.'),
       ('rank_die_2', 8, 11, 'Rank for die 2.'),
       ('rank_die_1', 4, 7, 'Rank for die 1.'),
       ('rank_die_0', 0, 3, 'Rank for die 0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_rank_config_1 = ( 
    'ndphy_rank_config_1',
    (0x8341020c, 0x83410210),
    'NDPHY rank configuration 1.',
    [ 
       ('rank_die_15', 28, 31, 'Rank for die 15.'),
       ('rank_die_14', 24, 27, 'Rank for die 14.'),
       ('rank_die_13', 20, 23, 'Rank for die 13.'),
       ('rank_die_12', 16, 19, 'Rank for die 12.'),
       ('rank_die_11', 12, 15, 'Rank for die 11.'),
       ('rank_die_10', 8, 11, 'Rank for die 10.'),
       ('rank_die_9', 4, 7, 'Rank for die 9.'),
       ('rank_die_8', 0, 3, 'Rank for die 8.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_brcm_ndphy_dir_ctrl0 = ( 
    'brcm_ndphy_dir_ctrl0',
    (0x83410210, 0x83410214),
    'Broadcom NAND PHY Direct Control Register 0.',
    [ 
       ('dcc_en', 0, 0, 'DCC training enable.'),
       ('rddq_en', 1, 1, 'Read DQ training state machine enable.'),
       ('wrtx_en', 2, 2, 'Tx write DQ training state machine enable.'),
       ('wrtx_cmp', 8, 15, 'Indicate that data read from NAND matches data written. 1: passing comparison; 0: failing comparison.'),
       ('wrtx_cmp_vld', 3, 3, 'Indicate that wrtx_cmp is valid to consider.'),
       ('dq_bypass_sel', 4, 4, "DQ bypass selection. '1' means that DQ IO's are controlled directly with mc_dq_oe_bypass and mc_dq_bypass"),
       ('dq_oe_bypass', 16, 23, 'DQ OE when in bypass mode.'),
       ('dq_bypass', 24, 31, 'DQ value output when OE=1 and in bypass mode.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_brcm_ndphy_dir_ctrl1 = ( 
    'brcm_ndphy_dir_ctrl1',
    (0x83410214, 0x83410218),
    'Broadcom NAND PHY Direct Control Register 1.',
    [ 
       ('dqs_bypass_sel', 0, 0, "DQS Bypass selection. '1' means that DQS IO is controlled directly by mc_dqs_oe_bypass and dqs_bypass"),
       ('dqs_oe_bypass', 1, 1, 'DQS OE when in bypass mode.'),
       ('dqs_bypass', 2, 2, 'DQS value output when OE=1 in bypass mode.'),
       ('cp_bypass_sel', 3, 3, "CP bypass selection. '1' means that CMD IO's are  controlled directly by mc_cp_oe_bypass and mc_cp_bypass"),
       ('cp_oe_bypass', 4, 12, 'CP OE in bypass mode'),
       ('cp_bypass', 16, 24, 'CP value output when OE=1 in bypass mode'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_brcm_ndphy_dir_stat = ( 
    'brcm_ndphy_dir_stat',
    (0x83410218, 0x8341021c),
    'Broadcom NAND PHY Direct Status Register.',
    [ 
       ('rddq_next_rd', 0, 0, 'PHY is awaiting next 32B read when in continuous read DQ training mode.'),
       ('rddq_done', 1, 1, 'PHY has completed read DQ training.'),
       ('wrtx_done', 2, 2, 'PHY has completed Tx write DQ training.'),
       ('r_dq_bypass', 4, 11, 'Output DQ bypass read signals.'),
       ('r_dqs_bypass', 3, 3, 'Output DQS bypass read signals.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_riu_control = ( 
    'ndphy_riu_control',
    (0x83410220, 0x83410224),
    'NDPHY RIU Control Register.',
    [ 
       ('riu_en', 0, 0, 'Enable RIU, user must toggle this bit (rising edge) to trigger RIU access.'),
       ('riu_w1r0', 1, 1, 'Set to 1 to write RIU, and 0 to read RIU.'),
       ('riu_addr', 8, 13, 'RIU read or write address.'),
       ('riu_sel', 16, 21, "RIU select:\n              6'h00-6'h1f: data byte nibble select.\n              6'h20-6'h3f: control byte nibble select.\n\n              6'h00: CH0 data lower nibble.\n              6'h01: CH0 data upper nibble.\n              6'h02: CH1 data lower nibble.\n              6'h03: CH1 data upper nibble.\n              ...\n              6'h1e: CH15 data lower nibble.\n              6'h1f: CH15 data upper nibble.\n\n              6'h20: CH0 control lower nibble.\n              6'h21: CH0 control upper nibble.\n              6'h22: CH1 control lower nibble.\n              6'h23: CH1 control upper nibble.\n              6'h3e: CH15 control lower nibble.\n              6'h3f: CH15 control upper nibble."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_riu_wdata = ( 
    'ndphy_riu_wdata',
    (0x83410224, 0x83410228),
    'NDPHY RIU Write Data.',
    [ 
       ('riu_wdata', 0, 15, 'RIU write data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ndphy_riu_rdata = ( 
    'ndphy_riu_rdata',
    (0x83410228, 0x8341022c),
    'NDPHY RIU Read Data.',
    [ 
       ('riu_rdata', 0, 15, 'RIU read data.'),
       ('riu_ready', 16, 16, 'RIU status bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_intr_status = ( 
    'fce_intr_status',
    (0x83410230, 0x83410234),
    'FCE Error Interrupt Status Register.',
    [ 
       ('vec', 0, 15, 'Bit15: Reserved.\n               Bit14: Reserved.\n               Bit13: AXI data path transfer error\n               Bit12: AXI msg path crc error.\n               Bit11: Dispatcher command memory correctable error.\n               Bit10: Dispatcher command memory uncorrectable error.\n               Bit9:  Dispatcher linked-list memory correctable error.\n               Bit8:  Dispatcher linked-list memory uncorrectable error.\n               Bit7:  Flexible sequence memory correctable error.\n               Bit6:  Flexible sequence memory uncorrectable error.\n               Bit5:  WFM sequence memory correctable error.\n               Bit4:  WFM sequence memory uncorrectable error.\n               Bit3:  Job info buffer status memory correctable error.\n               Bit2:  Job info buffer command memory correctable error.\n               Bit1:  Job info buffer status memory uncorrectable error.\n               Bit0:  Job info Buffer command memory uncorrectable error.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_intr_mask = ( 
    'fce_intr_mask',
    (0x83410234, 0x83410238),
    'FCE Interrupt Mask Register',
    [ 
       ('vec', 0, 15, "Error Interrupt Mask\n              Mask out Error bits\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_intr_rc = ( 
    'fce_intr_rc',
    (0x83410238, 0x8341023c),
    'FCE Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_intr_shadow = ( 
    'fce_intr_shadow',
    (0x8341023c, 0x83410240),
    'FCE Interrupt Shadow Register',
    [ 
       ('vec', 0, 15, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg0 = ( 
    'wfm_index_cfg0',
    (0x83410250, 0x83410254),
    'WFM Sequence Index Configuration Register 0',
    [ 
       ('reset_ce', 0, 7, 'Reset CE command sequence index.'),
       ('reset_lun', 8, 15, 'Reset LUN command sequence index.'),
       ('setf_ce', 16, 23, 'Set Feature CE command sequence index.'),
       ('setf_lun', 24, 31, 'Set Feature LUN command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg1 = ( 
    'wfm_index_cfg1',
    (0x83410254, 0x83410258),
    'WFM Sequence Index Configuration Register 1',
    [ 
       ('getf_ce', 0, 7, 'Get Feature CE command sequence index.'),
       ('getf_lun', 8, 15, 'Get Feature LUN command sequence index.'),
       ('rd_id', 16, 23, 'Read ID command sequence index.'),
       ('rd_uniq', 24, 31, 'Read Unique ID command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg2 = ( 
    'wfm_index_cfg2',
    (0x83410258, 0x8341025c),
    'WFM Sequence Index Configuration Register 0',
    [ 
       ('rd_stat_0', 0, 7, 'Read Status 0 command sequence index.'),
       ('rd_stat_1', 8, 15, 'Read Status 1 command sequence index.'),
       ('rd_stat_2', 16, 23, 'Read Status 2 command sequence index.'),
       ('rd_stat_3', 24, 31, 'Read Status 3 command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg3 = ( 
    'wfm_index_cfg3',
    (0x8341025c, 0x83410260),
    'WFM Sequence Index Configuration Register 3',
    [ 
       ('prog_susp_slc_prefix', 0, 7, 'SLC Program suspend command prefix sequence index.'),
       ('prog_susp_prefix', 8, 15, 'Program suspend command prefix sequence index.'),
       ('prog_slc_prefix', 16, 23, 'SLC Program command prefix sequence index.'),
       ('prog_prefix', 24, 31, 'Program command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg4 = ( 
    'wfm_index_cfg4',
    (0x83410260, 0x83410264),
    'WFM Sequence Index Configuration Register 4',
    [ 
       ('prog_qpre_prefix', 0, 7, 'QLC Program command prefix sequence index.'),
       ('prog_pause_prefix', 8, 15, 'Program command pause sequence index.'),
       ('prog_resu_slc_prefix', 16, 23, 'SLC Program resume command prefix sequence index.'),
       ('prog_resu_prefix', 24, 31, 'Program resume command prefix sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg5 = ( 
    'wfm_index_cfg5',
    (0x83410264, 0x83410268),
    'WFM Sequence Index Configuration Register 5',
    [ 
       ('prog_mp_fp_slc', 0, 7, 'SLC Multi-plane Program command first plane sequence index.'),
       ('prog_sp_slc', 8, 15, 'SLC Single-plane Program sequence index.'),
       ('prog_mp_fp', 16, 23, 'Multi-plane Program command first plane sequence index.'),
       ('prog_sp', 24, 31, 'Single-plane Program command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg6 = ( 
    'wfm_index_cfg6',
    (0x83410268, 0x8341026c),
    'WFM Sequence Index Configuration Register 6',
    [ 
       ('prog_mp_lp_slc', 0, 7, 'SLC Multi-plane Program command last plane sequence index.'),
       ('prog_mp_mp_slc', 8, 15, 'SLC Multi-plane Program command middle plane sequence index.'),
       ('prog_mp_lp', 16, 23, 'Multi-plane Program command last plane sequence index.'),
       ('prog_mp_mp', 24, 31, 'Multi-plane Program command middle plane sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg7 = ( 
    'wfm_index_cfg7',
    (0x8341026c, 0x83410270),
    'WFM Sequence Index Configuration Register 7',
    [ 
       ('prog_resu_slc', 0, 7, 'SLC Program resume command sequence index.'),
       ('prog_resu', 8, 15, 'Set Feature LUN command sequence index.'),
       ('prog_susp_slc', 16, 23, 'SLC Program suspend command sequence index.'),
       ('prog_susp', 24, 31, 'Program suspend command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg8 = ( 
    'wfm_index_cfg8',
    (0x83410270, 0x83410274),
    'WFM Sequence Index Configuration Register 8',
    [ 
       ('erase_susp_slc_prefix', 0, 7, 'SLC Erase suspend command prefix sequence index.'),
       ('erase_susp_prefix', 8, 15, 'Erase suspend command prefix sequence index.'),
       ('erase_slc_prefix', 16, 23, 'SLC Erase command prefix sequence index.'),
       ('erase_prefix', 24, 31, 'Erase command prefix sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg9 = ( 
    'wfm_index_cfg9',
    (0x83410274, 0x83410278),
    'WFM Sequence Index Configuration Register 9',
    [ 
       ('erase_resu_slc_prefix', 16, 23, 'SLC Erase resume command prefix sequence index.'),
       ('erase_resu_prefix', 24, 31, 'Erase resume command prefix sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg10 = ( 
    'wfm_index_cfg10',
    (0x83410278, 0x8341027c),
    'WFM Sequence Index Configuration Register 10',
    [ 
       ('erase_mp_fp_slc', 0, 7, 'SLC Multi-plane Erase command first plane sequence index.'),
       ('erase_sp_slc', 8, 15, 'SLC Single-plane Erase command sequence index.'),
       ('erase_mp_fp', 16, 23, 'Multi-plane Erase command first plane sequence index.'),
       ('erase_sp', 24, 31, 'Single-plane Erase LUN command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg11 = ( 
    'wfm_index_cfg11',
    (0x8341027c, 0x83410280),
    'WFM Sequence Index Configuration Register 11',
    [ 
       ('erase_mp_lp_slc', 0, 7, 'SLC Multi-plane Erase last plane command sequence index.'),
       ('erase_mp_mp_slc', 8, 15, 'SLC Multi-plane Erase command middle plane sequence index.'),
       ('erase_mp_lp', 16, 23, 'Multi-plane Erase last plane command sequence index.'),
       ('erase_mp_mp', 24, 31, 'Multi-plane Erase command middle plane sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg12 = ( 
    'wfm_index_cfg12',
    (0x83410280, 0x83410284),
    'WFM Sequence Index Configuration Register 12',
    [ 
       ('erase_susp_slc', 16, 23, 'SLC Erase suspend command sequence index.'),
       ('erase_susp', 24, 31, 'Erase suspend command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg13 = ( 
    'wfm_index_cfg13',
    (0x83410284, 0x83410288),
    'WFM Sequence Index Configuration Register 13',
    [ 
       ('erase_resu_mp_fp_slc', 0, 7, 'SLC Multi-plane Erase resume command first plane sequence index.'),
       ('erase_resu_sp_slc', 8, 15, 'SLC Single plane Erase resume command sequence index.'),
       ('erase_resu_mp_fp', 16, 23, 'Multi-plane Erase resume command first plane sequence index.'),
       ('erase_resu_sp', 24, 31, 'Single-plane erase resume command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg14 = ( 
    'wfm_index_cfg14',
    (0x83410288, 0x8341028c),
    'WFM Sequence Index Configuration Register 14',
    [ 
       ('erase_resu_mp_lp_slc', 0, 7, 'SLC Multi-plane Erase resume command last plane sequence index.'),
       ('erase_resu_mp_mp_slc', 8, 15, 'SLC Multi-plane Erase resume command middle plane sequence index.'),
       ('erase_resu_mp_lp', 16, 23, 'Multi-plane Erase resume command last plane sequence index.'),
       ('erase_resu_mp_mp', 24, 31, 'Multi-plane Erase resume command middle plane sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg15 = ( 
    'wfm_index_cfg15',
    (0x8341028c, 0x83410290),
    'WFM Sequence Index Configuration Register 15',
    [ 
       ('read_snap_slc_prefix', 0, 7, 'SLC Snap Read command prefix sequence index.'),
       ('read_snap_prefix', 8, 15, 'Snap Read command prefix sequence index.'),
       ('read_slc_prefix', 16, 23, 'SLC Read command prefix sequence index.'),
       ('read_prefix', 24, 31, 'Read command prefix sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg16 = ( 
    'wfm_index_cfg16',
    (0x83410290, 0x83410294),
    'WFM Sequence Index Configuration Register 16',
    [ 
       ('read_mp_fp_slc', 0, 7, 'SLC Multi-plane Read command first plane sequence index.'),
       ('read_sp_slc', 8, 15, 'SLC Single-plane Read command sequence index.'),
       ('read_mp_fp', 16, 23, 'Multi-plane Read command first plane sequence index.'),
       ('read_sp', 24, 31, 'Single-plane Read command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg17 = ( 
    'wfm_index_cfg17',
    (0x83410294, 0x83410298),
    'WFM Sequence Index Configuration Register 17',
    [ 
       ('read_mp_lp_slc', 0, 7, 'SLC Multi-plane Read command last plane sequence index.'),
       ('read_mp_mp_slc', 8, 15, 'SLC Multi-plane Read command middle plane sequence index.'),
       ('read_mp_lp', 16, 23, 'Multi-plane Read command last plane sequence index.'),
       ('read_mp_mp', 24, 31, 'Multi-plane Read command middle plane sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg18 = ( 
    'wfm_index_cfg18',
    (0x83410298, 0x8341029c),
    'WFM Sequence Index Configuration Register 18',
    [ 
       ('read_snap', 0, 7, 'Snap Read command sequence index.'),
       ('read_snap_slc', 8, 15, 'SLC Snap Read command sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_wfm_index_cfg19 = ( 
    'wfm_index_cfg19',
    (0x8341029c, 0x834102a0),
    'WFM Sequence Index Configuration Register 19',
    [ 
       ('slow_xfr', 0, 7, 'Slow speed data transfer command sequence index.'),
       ('fast_xfr', 8, 15, 'Fast speed data transfer command sequence index.'),
       ('prog_pause', 16, 23, 'Program command pause sequence index.'),
       ('data_xfr_prefix', 24, 31, 'Data transfer command command prefix sequence index.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer16_control0 = ( 
    'rs_timer16_control0',
    (0x834102a0, 0x834102a4),
    'Flash Controller Read Status Timer16 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer16_control1 = ( 
    'rs_timer16_control1',
    (0x834102a4, 0x834102a8),
    'Flash Controller Read Status Timer16 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer17_control0 = ( 
    'rs_timer17_control0',
    (0x834102a8, 0x834102ac),
    'Flash Controller Read Status Timer17 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer17_control1 = ( 
    'rs_timer17_control1',
    (0x834102ac, 0x834102b0),
    'Flash Controller Read Status Timer17 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer18_control0 = ( 
    'rs_timer18_control0',
    (0x834102b0, 0x834102b4),
    'Flash Controller Read Status Timer18 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer18_control1 = ( 
    'rs_timer18_control1',
    (0x834102b4, 0x834102b8),
    'Flash Controller Read Status Timer18 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer19_control0 = ( 
    'rs_timer19_control0',
    (0x834102b8, 0x834102bc),
    'Flash Controller Read Status Timer19 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer19_control1 = ( 
    'rs_timer19_control1',
    (0x834102bc, 0x834102c0),
    'Flash Controller Read Status Timer19 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer20_control0 = ( 
    'rs_timer20_control0',
    (0x834102c0, 0x834102c4),
    'Flash Controller Read Status Timer20 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer20_control1 = ( 
    'rs_timer20_control1',
    (0x834102c4, 0x834102c8),
    'Flash Controller Read Status Timer20 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer21_control0 = ( 
    'rs_timer21_control0',
    (0x834102c8, 0x834102cc),
    'Flash Controller Read Status Timer21 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer21_control1 = ( 
    'rs_timer21_control1',
    (0x834102cc, 0x834102d0),
    'Flash Controller Read Status Timer21 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer22_control0 = ( 
    'rs_timer22_control0',
    (0x834102d0, 0x834102d4),
    'Flash Controller Read Status Timer22 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer22_control1 = ( 
    'rs_timer22_control1',
    (0x834102d4, 0x834102d8),
    'Flash Controller Read Status Timer22 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer23_control0 = ( 
    'rs_timer23_control0',
    (0x834102d8, 0x834102dc),
    'Flash Controller Read Status Timer23 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer23_control1 = ( 
    'rs_timer23_control1',
    (0x834102dc, 0x834102e0),
    'Flash Controller Read Status Timer23 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer24_control0 = ( 
    'rs_timer24_control0',
    (0x834102e0, 0x834102e4),
    'Flash Controller Read Status Timer24 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer24_control1 = ( 
    'rs_timer24_control1',
    (0x834102e4, 0x834102e8),
    'Flash Controller Read Status Timer24 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer25_control0 = ( 
    'rs_timer25_control0',
    (0x834102e8, 0x834102ec),
    'Flash Controller Read Status Timer25 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer25_control1 = ( 
    'rs_timer25_control1',
    (0x834102ec, 0x834102f0),
    'Flash Controller Read Status Timer25 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer26_control0 = ( 
    'rs_timer26_control0',
    (0x834102f0, 0x834102f4),
    'Flash Controller Read Status Timer26 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer26_control1 = ( 
    'rs_timer26_control1',
    (0x834102f4, 0x834102f8),
    'Flash Controller Read Status Timer26 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer27_control0 = ( 
    'rs_timer27_control0',
    (0x834102f8, 0x834102fc),
    'Flash Controller Read Status Timer27 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer27_control1 = ( 
    'rs_timer27_control1',
    (0x834102fc, 0x83410300),
    'Flash Controller Read Status Timer27 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer28_control0 = ( 
    'rs_timer28_control0',
    (0x83410300, 0x83410304),
    'Flash Controller Read Status Timer28 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer28_control1 = ( 
    'rs_timer28_control1',
    (0x83410304, 0x83410308),
    'Flash Controller Read Status Timer28 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer29_control0 = ( 
    'rs_timer29_control0',
    (0x83410308, 0x8341030c),
    'Flash Controller Read Status Timer29 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer29_control1 = ( 
    'rs_timer29_control1',
    (0x8341030c, 0x83410310),
    'Flash Controller Read Status Timer29 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer30_control0 = ( 
    'rs_timer30_control0',
    (0x83410310, 0x83410314),
    'Flash Controller Read Status Timer30 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer30_control1 = ( 
    'rs_timer30_control1',
    (0x83410314, 0x83410318),
    'Flash Controller Read Status Timer30 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer31_control0 = ( 
    'rs_timer31_control0',
    (0x83410318, 0x8341031c),
    'Flash Controller Read Status Timer31 Control Register 0.',
    [ 
       ('tim_thr0', 0, 15, 'The threshold to trigger timer first interrupt.'),
       ('tim_thrx', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_rs_timer31_control1 = ( 
    'rs_timer31_control1',
    (0x8341031c, 0x83410320),
    'Flash Controller Read Status Timer31 Control Register 1.',
    [ 
       ('tim_step_size', 0, 7, 'The threshold to trigger timer first interrupt.'),
       ('timeout_thr', 16, 31, 'The threshold to trigger timer after first interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_volume_cfg0 = ( 
    'nand_volume_cfg0',
    (0x83410340, 0x83410344),
    'NAND Volume addressing configuration register 0.',
    [ 
       ('vol_en', 0, 0, 'NAND Volume Addressing Mode enable.'),
       ('vol_cfg', 16, 31, 'NAND Volume Addressing Mode config.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_volume_cfg1 = ( 
    'nand_volume_cfg1',
    (0x83410344, 0x83410348),
    'NAND Volume addressing configuration register 1.',
    [ 
       ('ce0_vol', 0, 3, 'NAND CE0 Volume address.'),
       ('ce1_vol', 4, 7, 'NAND CE1 Volume address.'),
       ('ce2_vol', 8, 11, 'NAND CE2 Volume address.'),
       ('ce3_vol', 12, 15, 'NAND CE3 Volume address.'),
       ('ce4_vol', 16, 19, 'NAND CE4 Volume address.'),
       ('ce5_vol', 20, 23, 'NAND CE5 Volume address.'),
       ('ce6_vol', 24, 27, 'NAND CE6 Volume address.'),
       ('ce7_vol', 28, 31, 'NAND CE7 Volume address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_volume_cfg2 = ( 
    'nand_volume_cfg2',
    (0x83410348, 0x8341034c),
    'NAND Volume addressing configuration register 2.',
    [ 
       ('ce0_mt_die_bitmap', 0, 15, 'NAND Matrix Termination CE0 related die bitmap.'),
       ('ce1_mt_die_bitmap', 16, 31, 'NAND Matrix Termination CE1 related die bitmap.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_volume_cfg3 = ( 
    'nand_volume_cfg3',
    (0x8341034c, 0x83410350),
    'NAND Volume addressing configuration register 3.',
    [ 
       ('ce2_mt_die_bitmap', 0, 15, 'NAND Matrix Termination CE2 related die bitmap.'),
       ('ce3_mt_die_bitmap', 16, 31, 'NAND Matrix Termination CE3 related die bitmap.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nps_debug_ctrl = ( 
    'nps_debug_ctrl',
    (0x834103f0, 0x834103f4),
    'NPS degbug reserved register control.',
    [ 
       ('ctrl_field', 0, 31, 'NPS ctrl register field.\n                [31:0]: Reserved\n                [9]:   execute retry read during abort\n                [3:0]: iwl active plane number threshold'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_mem_acc_control = ( 
    'fce_mem_acc_control',
    (0x83410400, 0x83410404),
    'Dispatcher memory access control.',
    [ 
       ('mem_sel', 28, 31, "4'h0: dispatcher command memory\n                                4'h2: hpr link head/tail ram\n                                4'h3: hpr_linkram\n                                4'h4: mid link head/tail ram\n                                4'h5: mid linram\n                                4'h6: nor link head/tail ram\n                                4'h7: nor linkram\n                                4'h9: prog linkram."),
       ('mem_addr', 0, 27, 'memory address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_mem_acc_io = ( 
    'fce_mem_acc_io',
    (0x83410404, 0x83410408),
    'Dispatcher memory access io.',
    [ 
       ('mem_data', 0, 31, 'Memory data content.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_event_log_acc_io = ( 
    'fce_event_log_acc_io',
    (0x83410408, 0x8341040c),
    'FCE event log dump data',
    [ 
       ('event_log_dump_data', 0, 31, 'FCE Event Log Dump Data Port'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_lmem_acc_control = ( 
    'lmem_acc_control',
    (0x83410410, 0x83410414),
    'Flash controller log memory access control.',
    [ 
       ('lmem_id', 24, 27, "Log Memory ID. \n                 4'h0: Job Proc log memory, \n                 4'h1: RS Timer log memory, \n                 4'h2-f: RESERVED."),
       ('lmem_addr', 0, 9, 'Log memory address. Read lmem_acc_io will increment this field by 1 automatically.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_lmem_acc_samp_ctrl = ( 
    'lmem_acc_samp_ctrl',
    (0x83410414, 0x83410418),
    'Flash controller job log memory access io.',
    [ 
       ('samp_freq', 0, 31, 'Timer Log memory sample frequency(kHz) (0-10).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_lmem_acc_io = ( 
    'lmem_acc_io',
    (0x83410418, 0x8341041c),
    'Flash controller job log memory access io.',
    [ 
       ('lmem_data_io', 0, 31, 'Data io register. Every read this register increments register lmem_acc_control field lmem_addr by 4. Log memory width is 4B.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_lmem_acc_io_h = ( 
    'lmem_acc_io_h',
    (0x8341041c, 0x83410420),
    'Flash controller job log memory access io.',
    [ 
       ('lmem_data_io', 0, 31, 'Data io register. Every read this register increments register lmem_acc_control field lmem_addr by 4. Log memory width is 4B.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_job_info_buf_mem_addr = ( 
    'job_info_buf_mem_addr',
    (0x83410420, 0x83410424),
    'FCE Job Info Buffer Memory Dump Address.',
    [ 
       ('mem_addr', 0, 8, 'jbuf_id[4:0], dw[3:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_job_info_buf_mem_data = ( 
    'job_info_buf_mem_data',
    (0x83410424, 0x83410428),
    'FCE Job Info Buffer Memory Dump Data.',
    [ 
       ('mem_data', 0, 31, 'Job info Buffer memory data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_monitor_select = ( 
    'monitor_select',
    (0x83410430, 0x83410434),
    'Monitor Signals Select Control Register.',
    [ 
       ('mon_select', 0, 23, 'Monitor signals select. Please refer to subsystem_debug_bus.xlsx.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_monitor_sig_out = ( 
    'monitor_sig_out',
    (0x83410434, 0x83410438),
    'Monitor Signal Out Register.',
    [ 
       ('mon_sig_out', 0, 31, 'Monitor signals output. Please refer to subsystem_debug_bus.xlsx for details.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_control = ( 
    'preload_cw_mem_acc_control',
    (0x83410440, 0x83410444),
    'preload cw memory access control.',
    [ 
       ('preload_cw_mem_wr_addr', 0, 6, 'Valid range is 0~71'),
       ('preload_cw_mem_rd_addr', 8, 14, 'Valid range is 0~71'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_control = ( 
    'cw_raw_mem_acc_control',
    (0x83410444, 0x83410448),
    'CW Raw memory access control.',
    [ 
       ('cw_raw_mem_addr', 0, 9, 'Valid range is 0~431'),
       ('csr_mem_rdata_sel', 31, 31, 'buffer selection for csr read.0-soft-buffer 1-hard buffer'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_0 = ( 
    'preload_cw_mem_acc_io_0',
    (0x83410450, 0x83410454),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_0', 0, 31, 'Data io register. DW 0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_1 = ( 
    'preload_cw_mem_acc_io_1',
    (0x83410454, 0x83410458),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_1', 0, 31, 'Data io register. DW 1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_2 = ( 
    'preload_cw_mem_acc_io_2',
    (0x83410458, 0x8341045c),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_2', 0, 31, 'Data io register. DW 2.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_3 = ( 
    'preload_cw_mem_acc_io_3',
    (0x8341045c, 0x83410460),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_3', 0, 31, 'Data io register. DW 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_4 = ( 
    'preload_cw_mem_acc_io_4',
    (0x83410460, 0x83410464),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_4', 0, 31, 'Data io register. DW 4.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_5 = ( 
    'preload_cw_mem_acc_io_5',
    (0x83410464, 0x83410468),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_5', 0, 31, 'Data io register. DW 5.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_6 = ( 
    'preload_cw_mem_acc_io_6',
    (0x83410468, 0x8341046c),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_6', 0, 31, 'Data io register. DW 6.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_preload_cw_mem_acc_io_7 = ( 
    'preload_cw_mem_acc_io_7',
    (0x8341046c, 0x83410470),
    'preload cw memory access io.',
    [ 
       ('preload_cw_mem_io_7', 0, 31, 'Data io register. DW 7.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_0 = ( 
    'cw_raw_mem_acc_io_0',
    (0x83410470, 0x83410474),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_0', 0, 31, 'Data io register. DW 0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_1 = ( 
    'cw_raw_mem_acc_io_1',
    (0x83410474, 0x83410478),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_1', 0, 31, 'Data io register. DW 1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_2 = ( 
    'cw_raw_mem_acc_io_2',
    (0x83410478, 0x8341047c),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_2', 0, 31, 'Data io register. DW 2.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_3 = ( 
    'cw_raw_mem_acc_io_3',
    (0x8341047c, 0x83410480),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_3', 0, 31, 'Data io register. DW 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_4 = ( 
    'cw_raw_mem_acc_io_4',
    (0x83410480, 0x83410484),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_4', 0, 31, 'Data io register. DW 4.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_5 = ( 
    'cw_raw_mem_acc_io_5',
    (0x83410484, 0x83410488),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_5', 0, 31, 'Data io register. DW 5.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_6 = ( 
    'cw_raw_mem_acc_io_6',
    (0x83410488, 0x8341048c),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_6', 0, 31, 'Data io register. DW 6.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_cw_raw_mem_acc_io_7 = ( 
    'cw_raw_mem_acc_io_7',
    (0x8341048c, 0x83410490),
    'CW Raw memory access io.',
    [ 
       ('cw_raw_mem_io_7', 0, 31, 'Data io register. Every write or read this register increments register cw_raw_mem_acc_control field cw_raw_mem_addr by 1. DW 7.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_0 = ( 
    'dq_ecnt_bit_0',
    (0x83410490, 0x83410494),
    'DQ error count bit 0.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_1 = ( 
    'dq_ecnt_bit_1',
    (0x83410494, 0x83410498),
    'DQ error count bit 1.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_2 = ( 
    'dq_ecnt_bit_2',
    (0x83410498, 0x8341049c),
    'DQ error count bit 2.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 2 .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_3 = ( 
    'dq_ecnt_bit_3',
    (0x8341049c, 0x834104a0),
    'DQ error count bit 3.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_4 = ( 
    'dq_ecnt_bit_4',
    (0x834104a0, 0x834104a4),
    'DQ error count bit 4.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 4.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_5 = ( 
    'dq_ecnt_bit_5',
    (0x834104a4, 0x834104a8),
    'DQ error count bit 5.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 5.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_6 = ( 
    'dq_ecnt_bit_6',
    (0x834104a8, 0x834104ac),
    'DQ error count bit 6.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 6.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_dq_ecnt_bit_7 = ( 
    'dq_ecnt_bit_7',
    (0x834104ac, 0x834104b0),
    'DQ error count bit 7.',
    [ 
       ('accum_ecnt', 0, 31, 'accumulated ecc error count on DQ bit 7.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_0 = ( 
    'soft_err_inj_0',
    (0x83410500, 0x83410504),
    'Soft error injection Register 0.',
    [ 
       ('soft_err_inj_en', 0, 0, 'Soft error injection enable.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_1 = ( 
    'soft_err_inj_1',
    (0x83410504, 0x83410508),
    'Soft error injection Register 1.',
    [ 
       ('soft_err_inj_seed', 0, 31, 'Soft error injection seed. Write to this register also initializes soft error injector.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_2 = ( 
    'soft_err_inj_2',
    (0x83410508, 0x8341050c),
    'Soft error injection Register 2.',
    [ 
       ('soft_rber_0', 0, 19, 'soft_rber_0 = RBER. Used when number of soft bits = 0, 1, or 2. RBER =average errors per code word'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_3 = ( 
    'soft_err_inj_3',
    (0x8341050c, 0x83410510),
    'Soft error injection Register 3.',
    [ 
       ('soft_rber_1', 0, 19, 'soft_rber_1 = RBER/alpha. Used when number of soft_bits = 1 or 2. alpha is a parameter related to the optimum read voltages for the decoding algorithm. alpha ~= 8.0 (1 soft bit), alpha ~= 4.5 (two soft bits)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_4 = ( 
    'soft_err_inj_4',
    (0x83410510, 0x83410514),
    'Soft error injection Register 4.',
    [ 
       ('soft_rber_2', 0, 19, 'soft_rber_2 = RBER*alpha. Used when number of soft_bits = 1 or 2. alpha is a parameter related to the optimum read voltages for the decoding algorithm. alpha ~= 8.0 (1 soft bit), alpha ~= 4.5 (two soft bits)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_5 = ( 
    'soft_err_inj_5',
    (0x83410514, 0x83410518),
    'Soft error injection Register 5.',
    [ 
       ('soft_rber_3', 0, 19, 'soft_rber_3 = RBER/beta. Used when number of soft_bits = 2. beta is a parameter related to the optimum read voltages for the decoding algorithm. beta ~= 18.0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_soft_err_inj_6 = ( 
    'soft_err_inj_6',
    (0x83410518, 0x8341051c),
    'Soft error injection Register 6.',
    [ 
       ('soft_rber_4', 0, 19, 'soft_rber_4 = RBER*beta. Used when number of soft_bits = 2. beta is a parameter related to the optimum read voltages for the decoding algorithm. beta ~= 18.0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fce_err_injection = ( 
    'fce_err_injection',
    (0x83410520, 0x83410524),
    'FCE Memory Error Injection.',
    [ 
       ('err_inj_info_buf_cor', 0, 0, 'Job info Buffer memory correctable ecc error injection.'),
       ('err_inj_info_buf_uncor', 1, 1, 'Job info Buffer memory uncorrectable ecc error injection.'),
       ('err_inj_wfm_cor', 2, 2, 'WFM memory correctabel error injection.'),
       ('err_inj_wfm_uncor', 3, 3, 'WFM memory uncorrectable error injection.'),
       ('err_inj_flex_mem_cor', 4, 4, 'Job flexible command sequence memory correctabel error injection control.'),
       ('err_inj_flex_mem_uncor', 5, 5, 'Job flexible command sequence memory uncorrectable error injection control.'),
       ('err_inj_disp_ll_cor', 6, 6, 'Job Dispatcher linked-list memory correctabel error injection.'),
       ('err_inj_disp_ll_uncor', 7, 7, 'Job Dispatcher linked-list memory uncorrectable error injection.'),
       ('err_inj_disp_cmem_cor', 8, 8, 'Job Dispatcher command memory correctabel error injection.'),
       ('err_inj_disp_cmem_uncor', 9, 9, 'Job Dispatcher command memory uncorrectable error injection.'),
       ('err_inj_lidx_fifo_cor', 10, 10, 'Job Dispatcher link index fifo mem correctable error injection.'),
       ('err_inj_lidx_fifo_uncor', 11, 11, 'Job Dispatcher link index fifo mem uncorrectable error injection.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_error_inj_conf = ( 
    'nand_error_inj_conf',
    (0x83410530, 0x83410534),
    'Channel 0 nand error injection config register.',
    [ 
       ('injection_en', 31, 31, 'Channel 0 error injection enable.'),
       ('nand_timeout_en', 30, 30, 'Channel 0 injection nand timeout error enable.\n              Sequential read need to be disabled in read timeout error injection.'),
       ('nand_ecc_en', 29, 29, 'Channel 0 injection nand ecc error enable.'),
       ('nand_error_en', 28, 28, 'Channel 0 injection nand status error enable.'),
       ('erase_cmd_en', 18, 18, 'Channel 0 injection to erase commands enable.'),
       ('prog_cmd_en', 17, 17, 'Channel 0 injection to program commands enable.'),
       ('read_cmd_en', 16, 16, 'Channel 0 injection to read commands enable.'),
       ('pba_hi', 0, 15, 'Channel 0 inject pba[47:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nand_error_inj_pba = ( 
    'nand_error_inj_pba',
    (0x83410534, 0x83410538),
    'nand error injection pba register.',
    [ 
       ('nand_error_inj_pba', 0, 31, 'Channel 0 inject pba: PBA[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_ctrl = ( 
    'be_csm_ctrl',
    (0x83410540, 0x83410544),
    'BE Diag mode control register.',
    [ 
       ('en', 0, 0, 'set 1 to enable BE diagnose mode.'),
       ('prbs_mode', 1, 1, '=0: random data mode (prbs as data src);=1: fix data pattern.'),
       ('cw_size32B', 2, 9, 'codeword size in 32B unit.'),
       ('cw_num_per_page', 10, 25, 'number of codeword per page.'),
       ('cw_eop_valid_num_32B', 26, 29, 'number of valid DW (32bits) count at the last cycle of codeword,max valus is 8(256bits). this is for read error bit cnt calculate.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_fix_pat_ctrl_0 = ( 
    'be_csm_fix_pat_ctrl_0',
    (0x83410544, 0x83410548),
    'BE Diag mode fix pattern0 control register.',
    [ 
       ('parttern', 0, 31, 'BE diagnose fixed pattern_0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_fix_pat_ctrl_1 = ( 
    'be_csm_fix_pat_ctrl_1',
    (0x83410548, 0x8341054c),
    'BE Diag mode fix pattern1 control register.',
    [ 
       ('parttern', 0, 31, 'BE diagnose fixed pattern_1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_fix_pat_ctrl_2 = ( 
    'be_csm_fix_pat_ctrl_2',
    (0x8341054c, 0x83410550),
    'BE Diag mode fix pattern2 control register.',
    [ 
       ('parttern', 0, 31, 'BE diagnose fixed pattern_2.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_fix_pat_ctrl_3 = ( 
    'be_csm_fix_pat_ctrl_3',
    (0x83410550, 0x83410554),
    'BE Diag mode fix pattern3 control register.',
    [ 
       ('parttern', 0, 31, 'BE diagnose fixed pattern_3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_wr_ctrl_0 = ( 
    'be_csm_wr_ctrl_0',
    (0x83410554, 0x83410558),
    'BE Diag mode write path control register 0.',
    [ 
       ('start', 0, 0, 'FW write  1 to trigger write path data generation in diagnose mode.\n              HW clears it after the write is done for the current CH.'),
       ('ch', 1, 4, 'select the channel id for current write. must be config before set start=1, should not change it before write done.'),
       ('page_num', 5, 20, 'config the number of pages to write for current CH.'),
       ('crdt', 21, 24, 'write data path credit value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_wr_ctrl_1 = ( 
    'be_csm_wr_ctrl_1',
    (0x83410558, 0x8341055c),
    'BE Diag mode write path control register 1.',
    [ 
       ('prbs_seed', 0, 31, 'config the prbs init seed for write path.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_rd_ctrl_0 = ( 
    'be_csm_rd_ctrl_0',
    (0x8341055c, 0x83410560),
    'BE Diag mode read path control register 0.',
    [ 
       ('start', 0, 0, 'FW write  1 to trigger read path in diagnose mode.\n              HW clears it after the read is done for the current CH.'),
       ('ch', 1, 4, 'select the channel id for current read. must be config before set start=1, should not change it before read done.'),
       ('page_num', 5, 20, 'config the number of pages to read for current CH.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_rd_ctrl_1 = ( 
    'be_csm_rd_ctrl_1',
    (0x83410560, 0x83410564),
    'BE Diag mode read path control register 1.',
    [ 
       ('prbs_seed', 0, 31, 'config the prbs init seed for read path.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_wr_status_0 = ( 
    'be_csm_wr_status_0',
    (0x83410564, 0x83410568),
    'BE Diag mode write path status register 0.',
    [ 
       ('page_cnt', 0, 14, 'the number of pages produced in diag mode. FW write to clear the counter. HW only do accumulate.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_rd_status_0 = ( 
    'be_csm_rd_status_0',
    (0x83410568, 0x8341056c),
    'BE Diag mode read path status register 0.',
    [ 
       ('page_cnt', 0, 14, 'the number of pages recived in diag mode. FW write to clear the counter. HW only do accumulate.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_be_csm_rd_status_1 = ( 
    'be_csm_rd_status_1',
    (0x8341056c, 0x83410570),
    'BE Diag mode read path status register 1.',
    [ 
       ('bit_err_cnt', 0, 31, 'the number of accumulated bit errors in diag mode. FW write to clear the counter. HW only do accumulate.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ldpc_enc_secdec_test = ( 
    'ldpc_enc_secdec_test',
    (0x83410600, 0x83410604),
    'ldpc memory ecc control to test secdec.',
    [ 
       ('ecc_err_cor_inj', 0, 3, 'Inject enable correctable flips.'),
       ('ecc_err_uncor_inj', 4, 7, 'Inject enable un-correctable flips.'),
       ('csr_ecc_en', 8, 11, 'Enable ECC(SECDEC) test.'),
       ('ecc_corr_err_clr', 12, 15, 's/w clear correctable error status.'),
       ('ecc_uncorr_err_clr', 16, 19, 's/w clear uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ldpc_dec_secdec_test = ( 
    'ldpc_dec_secdec_test',
    (0x83410604, 0x83410608),
    'ldpc memory ecc control to test secdec.',
    [ 
       ('ecc_err_cor_inj', 0, 2, 'Inject enable correctable flips.'),
       ('ecc_err_uncor_inj', 3, 5, 'Inject Enable un-correctable flips.'),
       ('csr_ecc_en', 6, 8, 'Enable ECC(SECDEC) test.'),
       ('ecc_corr_err_clr', 9, 11, 's/w clear correctable error status.'),
       ('ecc_uncorr_err_clr', 12, 14, 's/w clear uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ldpc_mem_secdec_err_status = ( 
    'ldpc_mem_secdec_err_status',
    (0x83410608, 0x8341060c),
    'ldpc memory secdec error status.',
    [ 
       ('enc_uncor_err_status', 0, 3, 'Encoder memory secdec uncorrectable bit-flip test status.'),
       ('enc_corr_err_status', 4, 7, 'Encoder memory secdec correctable bit-flip test status.'),
       ('dec_uncor_err_status', 8, 10, 'Decoder memory secdec uncorrectable bit-flip test status.'),
       ('dec_corr_err_status', 11, 13, 'Decoder memory secdec correctable bit-flip test status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nps_en_bmp = ( 
    'nps_en_bmp',
    (0x83410800, 0x83410804),
    'NPS CSR Enable Bitmap.',
    [ 
       ('nps_ch_bmp', 0, 15, 'NPS Channel enable bitmap.'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		bm_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_bm_cfg = ( 
    'bm_cfg',
    (0x83430000, 0x83430004),
    'bm cfg.',
    [ 
       ('dcs_bm_pl3_dir_acc', 0, 0, 'this bit is retired in quince.'),
       ('bm_ccs_rd_xfr_done_crdt_ctrl_en', 1, 1, 'set 1 to enable bm ccs rd xfr done msg credit control, enabled by default.'),
       ('msg_crc_chk_byps', 2, 2, 'set 1 to bypass msg crc function.'),
       ('debug_sel', 3, 3, 'debug_sel=1, debug_sel of debug interface to select debug monitors;debug_sel=0, use csr_mon_sel to select debug monitors.'),
       ('vq_mgr_stop_on_err', 4, 4, 'vq mgr allocate and deallocate state mechine will stop when critical error happens in debug.'),
       ('vq_mgr_serial', 5, 5, 'vq allocate and deallocate operation processed in serial way.'),
       ('ddr_dual_ch_mode', 6, 6, 'dual CH ddr mode.'),
       ('ddr_ch_sel', 7, 7, 'select ddr ch id when ddr_dual_ch_mode=0.\n             =0:select CH0; =1:select CH1;'),
       ('dealloc_mode', 8, 9, "HW de-allocate mode for BM write buffer VQs.\n            2'd1: static de-allocate, BM deallocates the VQ after all data transfer to BE. this mode only works for non-rfb mode for bring up; \n            2'd2: BM de-allocate write buffer VQ only when read from buffer lock counter is zero and read from buffer cool down timer expires. Note: only work with when rfb_en = 1, and this should be the normal working mode.\n            others: rsvd"),
       ('ddr_2ch_ratio', 10, 12, 'when "ddr_dual_ch_mode" =1,it defines the ratio of the number of VQs which only be written into single CH(CH ID selected by Csr_ddr_2ch_mode) compared to the number of VQs which are written in both CH. "ddr_ch_sel" defines the DDR CH ID for the single CH VQs.\n             =3\'h0, all DDR VQs written into both DDR CH, it\'s Default Value.\n             =3\'h1, 1/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h2, 2/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h3, 3/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h4, 4/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h5, 5/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h6, 6/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.\n             =3\'h7, 7/8 DDR VQs written into single DDR CH(ch selected by "ddr_ch_sel"), other DDR VQs written into both DDR CH.'),
       ('vq_mgr_err_clr', 13, 13, 'write 1 to clear vq_mgr_err.'),
       ('bm_ccs_rd_xfr_done_crdt', 16, 23, 'credit count for the read xfr done msg, max value= 64.'),
       ('bm_ccp_xfr_done_new_mode', 24, 24, '=1: new mode, (1)bm will send xfr done (with xfr_type=1 for last ccp and with xfr_type=0 for other ccp) msg when the CCP data is stored in local buffer, CCS triggers w2p cpl to FW when xfr_type=0/1. (2)bm will send an extra xfr done(xfr_type=3) msg to CCS when the last page CCP data is written into write buffer(DDR/SRAM), CCS should use the xfr done with xfr_type=3 to trigger BM DMA;\n             =0: lagecy mode, bm will send xfr done with xfr_type=0 for non-last ccp when the CCP data is stored in local buffer, and send xfr done with xfr_type=1 for last ccp when the CCP data is written into write buffer(DDR/SRAM). CCS triggers w2p cpl to FW when xfr_type=0/1, and CCS should use the xfr done with xfr_type=1 to trigger BM DMA;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_data_base_l = ( 
    'bm_ddr_data_base_l',
    (0x83430004, 0x83430008),
    'BM DDR data space base address Register LSB.',
    [ 
       ('ddr_data_base_addr_l', 0, 31, 'BM DDR data space base address bit[31:0], in byte.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_data_base_h = ( 
    'bm_ddr_data_base_h',
    (0x83430008, 0x8343000c),
    'BM DDR data space base address Register MSB.',
    [ 
       ('ddr_data_base_addr_h', 0, 4, 'BM DDR data space base address bit[36:32], in byte.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_meta_base_l = ( 
    'bm_ddr_meta_base_l',
    (0x8343000c, 0x83430010),
    'BM DDR meta space base address Register LSB.',
    [ 
       ('ddr_meta_base_addr_l', 0, 31, 'BM DDR meta space base address bits[31:0], in byte.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_meta_base_h = ( 
    'bm_ddr_meta_base_h',
    (0x83430010, 0x83430014),
    'BM DDR meta space base address Register MSB.',
    [ 
       ('ddr_meta_base_addr_h', 0, 4, 'BM DDR meta space base address bits[36:32], in byte.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_pool_cfg = ( 
    'bm_pool_cfg',
    (0x83430014, 0x83430018),
    'Bm Pool Config Register.',
    [ 
       ('vpool_map_3', 0, 4, "SRAM virtual pool 3 mapping. bit[i]==1'b1: virtual pool 3 selects physical pool i. \n            for example: when vpool_map_3=5'b00011, means virtual pool 3 selects both physical pool 0 and physical pool 1. \n            Note: 1) one physical pool can not be mapped to multiple virtual pools, but one virtual pool can select multiple physical pools.\n                  2) vpool_map_3 always set to 0 since we don't use in current design"),
       ('vpool_map_2', 5, 9, "SRAM virtual pool 2 mapping. bit[i]==1'b1: virtual pool 2 selects physical pool i. \n            Vpool2 is used for raid construct and rebuild parity buffer.\n            for example: when vpool_map_2=5'b00100, means virtual pool 2 selects physical pool 2. \n            Note: 1) one physical pool can not be mapped to multiple virtual pools, but one virtual pool can select multiple physical pools.\n                  2) current design requires raid rebuild parity selects from pool0~4 only, so vpool_map_2 can NOT be 0."),
       ('vpool_map_1', 10, 14, "SRAM virtual pool 1 mapping. bit[i]==1'b1: virtual pool 1 selects physical pool i. \n            Vpool1 is used for read buffer by default.\n            for example: when vpool_map_1=5'b00100, means virtual pool 1 selects physical pool 2. \n            Note: 1)one physical pool can not be mapped to multiple virtual pools, but one virtual pool can select multiple physical pools."),
       ('vpool_map_0', 15, 19, "SRAM virtual pool 0 mapping. bit[i]==1'b1: virtual pool 0 selects physical pool i. \n            Vpool0 is used for write buffer if write buffer is NOT DDR, which is just for test purpose.\n            for example: when vpool_map_1=5'b00001, means virtual pool 0 selects physical pool 0. \n            Note: 1) one physical pool can not be mapped to multiple virtual pools, but one virtual pool can select multiple physical pools."),
       ('pool_size_4', 20, 28, 'BM physical pool 4(SRAM) size config, in unit of 2K. 0 based, max 127.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_pool_size_cfg_0 = ( 
    'bm_pool_size_cfg_0',
    (0x83430018, 0x8343001c),
    'BM Physical Pool Size config Register.',
    [ 
       ('pool_size_2', 0, 8, 'BM physical pool 2(SRAM) size config, in unit of 2KB. 0 based, max 255.'),
       ('pool_size_1', 9, 17, 'BM physical pool 1(SRAM) size config, in unit of 2KB. 0 based, max 255.'),
       ('pool_size_0', 18, 26, 'BM physical pool 0(SRAM) size config, in unit of 2KB. 0 based, max 255.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_pool_size_cfg_1 = ( 
    'bm_pool_size_cfg_1',
    (0x8343001c, 0x83430020),
    'BM Physical Pool Size and Pool init trigger Register.',
    [ 
       ('pool_size_5', 0, 10, 'BM physical pool 5(DDR) size config, in unit of 32KB. 0 based, max 2047.'),
       ('pool_size_3', 11, 19, 'BM physical pool 3(SRAM) size config, in unit of 2KB. 0 based, max 255'),
       ('pool_init_start', 20, 20, "write 1 to start BM (pool's free buffer and RFB table) initialization. HW will clear this bit when BM initialization is done"),
       ('pool_meta_size', 21, 30, 'BM DDR pool meta size config, in unit of 4KB. 0 based, max 1023.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_vp_vq_th_cfg_0 = ( 
    'bm_vp_vq_th_cfg_0',
    (0x83430020, 0x83430024),
    'BM Virtual Pool/Queue Occupy threshold config Register.',
    [ 
       ('th_vp4_ocpy', 0, 11, 'BM physical/virtual pool 4(DDR) Occupy threshold config, in unit of 32KB.\n            Max value is 2048'),
       ('th_vq_ocpy', 12, 23, 'BM VQ ID resource threshold,max value =2048'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_vp_vq_th_cfg_1 = ( 
    'bm_vp_vq_th_cfg_1',
    (0x83430024, 0x83430028),
    'BM Virtual Pool/Queue Occupy threshold config Register.',
    [ 
       ('th_vp0_ocpy', 0, 11, 'BM virtual pool 0(SRAM) Occupy threshold config, in unit of 2KB. \n             max value related to vpool_map_0 setting.'),
       ('th_vp1_ocpy', 12, 23, 'BM virtual pool 1(SRAM) Occupy threshold config, in unit of 2KB.\n             max value related to vpool_map_1 setting.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_vp_vq_th_cfg_2 = ( 
    'bm_vp_vq_th_cfg_2',
    (0x83430028, 0x8343002c),
    'BM Virtual Pool/Queue Occupy threshold config Register.',
    [ 
       ('th_vp2_ocpy', 0, 11, 'BM virtual pool 2(SRAM) Occupy threshold config, in unit of 2KB.\n             max value related to vpool_map_2 setting.'),
       ('th_vp3_ocpy', 12, 23, 'BM virtual pool 3(SRAM) Occupy threshold config, in unit of 2KB.\n             max value related to vpool_map_3 setting.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rbuf_cfg = ( 
    'bm_rbuf_cfg',
    (0x8343002c, 0x83430030),
    'BM Read buffer config Register.',
    [ 
       ('vp_id_r', 0, 1, 'config the virtual pool id for the read buffer,Note: it can only select sram pools(id=0~3).'),
       ('th_ocpy_ratio_ch_r', 2, 5, "the occupy threshold for each channel's total read buffer usage. 4'd0: 1/32 of read buffer's virtual pool capacity; 4'd1: 1/16 of read buffer's virtual pool capacity; 4'd2: 1/8 of read buffer's virtual pool capacity; 4'd3: 1/4 of read buffer's virtual pool capacity; others: reserved."),
       ('th_vq_rd', 8, 19, 'read buffer vq id threshold.\n             =0 : disable threshold control;\n             >0 : enable threshold control;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_wbuf_cfg = ( 
    'bm_wbuf_cfg',
    (0x83430030, 0x83430034),
    'BM Write buffer config Register.',
    [ 
       ('vp_id_w', 0, 2, 'config the virtual pool id for the write buffer. Note: it can select both ddr pool and sram pools(id=0~3). ddr pool(id=4) is recommended.'),
       ('th_vq_wr', 4, 15, 'write buffer vq id threshold.\n             =0 : disable threshold control;\n             >0 : enable threshold control;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_crdt_cfg = ( 
    'bm_crdt_cfg',
    (0x83430034, 0x83430038),
    'BM data path credit config Register.',
    [ 
       ('be_ragt_ddr_meta_crdt', 0, 3, 'ddr meta burst credit per CH in bm_be_ragt, must be less or equal to 2.'),
       ('be_ragt_sram_cw_crdt', 4, 7, 'sram cw credit in bm_be_ragt, must be less or equal to 2.'),
       ('be_ragt_ddr_cw_crdt', 8, 11, 'ddr cw credit in bm_be_ragt.'),
       ('be_ragt_be_crdt', 12, 15, 'BE credit per CH, must be less or equal to 3.'),
       ('fe_wagt_pipe_cw_crdt', 16, 19, 'pipeline cw(2KB) credit per stream in bm_fe_wagt, must be less or equal to 8.'),
       ('fe_wagt_pipe_meta_crdt', 20, 23, 'pipeline meta burst credit per stream in bm_fe_wagt, must be less or equal to 4.'),
       ('raidc_crdt', 24, 27, 'cw credit in raid constuct engine, must be less or equal to 2.'),
       ('fe_ragt_data_buf_crdt', 28, 31, 'data buffer credit per shim in bm_fe_ragt, must be less or equal to 3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rfb_cfg = ( 
    'bm_rfb_cfg',
    (0x83430038, 0x8343003c),
    'BM Read from buffer config Register.',
    [ 
       ('rfb_en', 0, 0, 'read from buffer check enable.=1:enable;=0:disable.Note: must be set when de-alloc mode = 2'),
       ('ts_rfb', 1, 8, 'cool down timer init value in unit of ms. \n            Note: only work when rfb_en=1. the timer started by shw_table st_timer cmd. the timer expires immediately after recevied shw_table st_timer cmd when ts_rfb=0, and it will trigger BM write buffer VQ deallocate.'),
       ('cycle_per_ms', 9, 28, "number of system clock cycles per ms.it's clock frequency dependent.8*10e5 when clock frequency=800MHz. \n             used for cool down timer function"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_init_status = ( 
    'bm_init_status',
    (0x8343003c, 0x83430040),
    "BM pool's initialization is done.",
    [ 
       ('pool_init_done', 0, 0, "BM pool's initialization done status. \n            HW will clear the old state of this bit at a new initialization start."),
       ('fsm_state_init', 4, 15, 'initilization FSM state .'),
       ('init_start_status', 16, 16, 'FW cfg init start status .'),
       ('init_start_done_flag', 17, 17, 'FW cfg init done flag, sticky bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_acc_ctrl = ( 
    'bm_mem_acc_ctrl',
    (0x83430040, 0x83430044),
    'bm memory indirect access control Register.',
    [ 
       ('bm_mem_en', 0, 0, '=1: enable BM asic memory read access.\n            =0: disable BM asic memory read access.'),
       ('bm_mem_sel', 1, 7, "bm memory read access select control.\n            ='d0: BM_VQ_INFO_TABLE\n            ='d1: BM_VQ_NEXT_WR_PTR_TABLE\n            ='d2: BM_VQ_NEXT_RD_PTR_TABLE\n            ='d3: BM_DDR_LL\n            ='d4: BM_RFB_DIE_LL_TABLE\n            ='d5: BM_RFB_DIE_IDX_TABLE\n            ='d6: BM_SRAM_POOL\n            ='d7: BM_SRAM_POOL_META\n            ='d8: BM_B2N_CMD_MEM\n            ='d9~'d25: BM_SRAM_LL_0~BM_SRAM_LL_16\n            others: rsvd"),
       ('bm_mem_addr', 8, 31, "bm memory indirect access address control.\n            bm_mem_sel='d0: BM_VQ_INFO_TABLE, \t\taddr range: 0~0x7FF\n            bm_mem_sel='d1: BM_VQ_NEXT_WR_PTR_TABLE, \taddr range: 0~0x7FF\n            bm_mem_sel='d2: BM_VQ_NEXT_RD_PTR_TABLE,\taddr range: 0~0x7FF\n            bm_mem_sel='d3: BM_DDR_LL,\t\t\taddr range: 0~0x7FF\n            bm_mem_sel='d4: BM_RFB_DIE_LL_TABLE,\taddr range: 0~0x7FF\n            bm_mem_sel='d5: BM_RFB_DIE_IDX_TABLE,\taddr range: 0~0xFF\n            bm_mem_sel='d6: BM_SRAM_POOL,\t\taddr range: 0~0x1FFFF\n            bm_mem_sel='d7: BM_SRAM_POOL_META,\t\taddr range: 0~0x3FF\n            bm_mem_sel='d8: BM_B2N_CMD_MEM,             addr range: 0~0x7F\n            bm_mem_sel='d9~d12: BM_SRAM_LL_0~3,         addr range: 0~0xFF\n            bm_mem_sel='d13: BM_SRAM_LL_4,\t\taddr range: 0~0x7F\n            bm_mem_sel='d14~d25: BM_SRAM_LL_0~16,       addr range: 0~0xFF"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_out_0 = ( 
    'bm_mem_out_0',
    (0x83430044, 0x83430048),
    'bm memory indirect access read data Register.',
    [ 
       ('bm_mem_out_0', 0, 31, 'bm memory indirect access read data Register[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_out_1 = ( 
    'bm_mem_out_1',
    (0x83430048, 0x8343004c),
    'bm memory indirect access read data Register.',
    [ 
       ('bm_mem_out_1', 0, 31, 'bm memory indirect access read data Register[63:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_out_2 = ( 
    'bm_mem_out_2',
    (0x8343004c, 0x83430050),
    'bm memory indirect access read data Register.',
    [ 
       ('bm_mem_out_2', 0, 31, 'bm memory indirect access read data Register[95:64].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_out_3 = ( 
    'bm_mem_out_3',
    (0x83430050, 0x83430054),
    'bm memory indirect access read data Register.',
    [ 
       ('bm_mem_out_3', 0, 31, 'bm memory indirect access read data Register[127:96].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mon_ctrl = ( 
    'bm_mon_ctrl',
    (0x83430054, 0x83430058),
    'bm Monitor control Register',
    [ 
       ('mon_sel', 0, 23, 'BM monitor select'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mon_out = ( 
    'bm_mon_out',
    (0x83430058, 0x8343005c),
    'bm monitor output Register.',
    [ 
       ('mon_out', 0, 31, 'BM debug monitor data output.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_err_ctrl = ( 
    'bm_mem_err_ctrl',
    (0x8343005c, 0x83430060),
    'bm Memory ECC Error/Parity inject control Register',
    [ 
       ('err_inj_en', 0, 1, "='d0:  no error inject;\n             ='d1:  correctable ECC/Parity error inject enable\n             ='d2:  uncorrectable ECC error inject enable"),
       ('mem_sel', 2, 31, "select BM memory for ECC/Parity error inject\n            ='d0: BM_VQ_INFO_TABLE,       \tECC, err_inj_en=1/2 \n            ='d1: BM_VQ_NEXT_WR_PTR_TABLE,\tECC, err_inj_en=1/2\n            ='d2: BM_VQ_NEXT_RD_PTR_TABLE,\tECC, err_inj_en=1/2\n            ='d3: BM_SRAM_LL_0,\t\t  \tECC, err_inj_en=1/2\n            ='d4: BM_SRAM_LL_1,\t\t  \tECC, err_inj_en=1/2\n            ='d5: BM_SRAM_LL_2,\t\t\tECC, err_inj_en=1/2\n            ='d6: BM_SRAM_LL_3,\t\t\tECC, err_inj_en=1/2\n            ='d7: BM_SRAM_LL_4,\t\t\tECC, err_inj_en=1/2\n            ='d8: BM_DDR_LL,\t\t\tECC, err_inj_en=1/2\n            ='d9: BM_FREE_VQ_ID_FIFO,\t\tECC, err_inj_en=1/2\n            ='d10: BM_SRAM_FREE_PTR_FIFO_0,\tECC, err_inj_en=1/2\n            ='d11: BM_SRAM_FREE_PTR_FIFO_1,\tECC, err_inj_en=1/2\n            ='d12: BM_SRAM_FREE_PTR_FIFO_2,\tECC, err_inj_en=1/2\n            ='d13: BM_SRAM_FREE_PTR_FIFO_3,\tECC, err_inj_en=1/2\n            ='d14: BM_SRAM_FREE_PTR_FIFO_4,\tECC, err_inj_en=1/2\n            ='d15: BM_DDR_FREE_PTR_FIFO,\tECC, err_inj_en=1/2\n            ='d16: BM_DDR_FREE_META_PTR_FIFO,\tECC, err_inj_en=1/2\n            ='d17: BM_RFB_DIE_LL_TABLE,\t\tECC, err_inj_en=1/2\n            ='d18: BM_RFB_DIE_IDX_TABLE,\tECC, err_inj_en=1/2\n\n            ='d19~'d54: BM_SRAM_POOL bank0~bank35,     \tParity, err_inj_en=1\n            ='d55~'d59: BM_SRAM_POOL_META bank0~bank4, \tParity, err_inj_en=1\n            ='d60~'d91: BM_ACC_MEM      bank0~bank31,\tParity, err_inj_en=1           \n            ='d92~'d123: BM_ACC_META_MEM bank0~bank31,\tParity, err_inj_en=1   \n            ='d124:      BM_FE_WAGT_FIFO_OUT, \t\tParity, err_inj_en=1  \n            ='d125~'d126: BM_BE_RAGT_DATA bank0~bank1  Parity,err_inj_en=1\t\t\t \n            ='d127~'d142: BM_BE_RAGT_META bank0~bank15 Parity,err_inj_en=1        \n            ='d143:       BM_BE_WAGT_DATA              Parity,err_inj_en=1    \n            ='d144~'d147: BM_FE_RAGT_DATA bank0~bank3  Parity,err_inj_en=1\n            ='d148: BM_B2B_DATA                Parity,err_inj_en=1       \n            ='d149: BM_B2B_META                Parity,err_inj_en=1       \n            ='d150: BM_RAIDC_DATA              Parity,err_inj_en=1       \n            ='d151: BM_RAIDC_OLD_PAR           Parity,err_inj_en=1       \n            ='d152: BM_RAIDC_NEW_PAR           Parity,err_inj_en=1       \n            ='d153: BM_RAIDR_OLD_PAR           Parity,err_inj_en=1       \n            ='d154: BM_RAIDR_NEW_PAR           Parity,err_inj_en=1 \n            ='d155: BM_DDR_CH_MUX_RDATA_MEM_BE Parity,err_inj_en=1\n            ='d156: BM_CMD_TABLE               ECC,   err_inj_en=1/2\n            ='d157: BM_DDR_AXI_RD/WR_MEM       ECC,   err_inj_en=1/2\n            others: rsvd"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_cor_err_status = ( 
    'bm_mem_ecc_cor_err_status',
    (0x83430060, 0x83430064),
    'bm Memory ECC correctable Error status Register',
    [ 
       ('cor_err', 0, 31, 'correctable error status [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_cor_err_status_1 = ( 
    'bm_mem_ecc_cor_err_status_1',
    (0x83430064, 0x83430068),
    'bm Memory ECC correctable Error status Register 1',
    [ 
       ('cor_err', 0, 31, 'correctable error status[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_cor_err_status_2 = ( 
    'bm_mem_ecc_cor_err_status_2',
    (0x83430068, 0x8343006c),
    'bm Memory ECC correctable Error status Register 2',
    [ 
       ('cor_err', 0, 31, 'correctable error status[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_cor_err_status_3 = ( 
    'bm_mem_ecc_cor_err_status_3',
    (0x8343006c, 0x83430070),
    'bm Memory ECC correctable Error status Register 3',
    [ 
       ('cor_err', 0, 31, 'correctable error status[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_cor_err_status_4 = ( 
    'bm_mem_ecc_cor_err_status_4',
    (0x83430070, 0x83430074),
    'bm Memory ECC correctable Error status Register 4',
    [ 
       ('cor_err', 0, 31, 'correctable/parity error status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_uncor_err_status = ( 
    'bm_mem_ecc_uncor_err_status',
    (0x83430074, 0x83430078),
    'bm Memory ECC uncorrectable Error status Register',
    [ 
       ('uncor_err', 0, 31, '[18:0]:  uncorrectable error status for memory index0 ~18\n               [19]:    uncorrectable error status for memory index156\n               [20]:    uncorrectable error status for memory index157\n               [31:21]: rsvd'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_axi_par_err_status = ( 
    'bm_axi_par_err_status',
    (0x83430078, 0x8343007c),
    'bm AXI transfer Error status Register',
    [ 
       ('par_err', 0, 31, 'bit[0]: resp error for BM DDR AXI Read master CH0 \n               bit[1]: resp error for BM DDR AXI Write master CH0\n               bit[2]: resp error for BM DDR AXI Read master CH1 \n               bit[3]: resp error for BM DDR AXI Write master CH1'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_0 = ( 
    'bm_fsm_status_0',
    (0x8343007c, 0x83430080),
    'bm FSM Register 0',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_1 = ( 
    'bm_fsm_status_1',
    (0x83430080, 0x83430084),
    'bm FSM Register 1',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_2 = ( 
    'bm_fsm_status_2',
    (0x83430084, 0x83430088),
    'bm FSM Register 2',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_3 = ( 
    'bm_fsm_status_3',
    (0x83430088, 0x8343008c),
    'bm FSM Register 3',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_4 = ( 
    'bm_fsm_status_4',
    (0x8343008c, 0x83430090),
    'bm FSM Register 4',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_5 = ( 
    'bm_fsm_status_5',
    (0x83430090, 0x83430094),
    'bm FSM Register 5',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_0 = ( 
    'bm_rsc_status_0',
    (0x83430094, 0x83430098),
    'bm resource status counters 0.',
    [ 
       ('vq_cnt_wbuf', 0, 11, 'vq id occupy count for write buffer.'),
       ('vq_cnt_rbuf', 12, 23, 'vq id occupy count for read buffer.'),
       ('raid_vq_cnt_strm0', 24, 31, 'strm0 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_1 = ( 
    'bm_rsc_status_1',
    (0x83430098, 0x8343009c),
    'bm resource status counters 1.',
    [ 
       ('vq_cnt_raidc_buf', 0, 11, 'vq id occupy count for raid construct parity buffer.'),
       ('vq_cnt_raidr_buf', 12, 23, 'vq id occupy count for raid rebuil parity buffer.'),
       ('raid_vq_cnt_strm1', 24, 31, 'strm1 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_2 = ( 
    'bm_rsc_status_2',
    (0x8343009c, 0x834300a0),
    'bm resource status counters 2.',
    [ 
       ('wr_buf_ocpy_cnt_strm0', 0, 11, 'stream 0 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm1', 12, 23, 'stream 1 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm2', 24, 31, 'strm2 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_3 = ( 
    'bm_rsc_status_3',
    (0x834300a0, 0x834300a4),
    'bm resource status counters 3.',
    [ 
       ('wr_buf_ocpy_cnt_strm2', 0, 11, 'stream 2 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm3', 12, 23, 'stream 3 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm3', 24, 31, 'strm3 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_4 = ( 
    'bm_rsc_status_4',
    (0x834300a4, 0x834300a8),
    'bm resource status counters 4.',
    [ 
       ('wr_buf_ocpy_cnt_strm4', 0, 11, 'stream 4 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm5', 12, 23, 'stream 5 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm4', 24, 31, 'strm4 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_5 = ( 
    'bm_rsc_status_5',
    (0x834300a8, 0x834300ac),
    'bm resource status counters 5.',
    [ 
       ('wr_buf_ocpy_cnt_strm6', 0, 11, 'stream 6 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm7', 12, 23, 'stream 7 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm5', 24, 31, 'strm5 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_6 = ( 
    'bm_rsc_status_6',
    (0x834300ac, 0x834300b0),
    'bm resource status counters 6.',
    [ 
       ('wr_buf_ocpy_cnt_strm8', 0, 11, 'stream 8 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm9', 12, 23, 'stream 9 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm6', 24, 31, 'strm6 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_7 = ( 
    'bm_rsc_status_7',
    (0x834300b0, 0x834300b4),
    'bm resource status counters 7.',
    [ 
       ('wr_buf_ocpy_cnt_strm10', 0, 11, 'stream 10 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm11', 12, 23, 'stream 11 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm7', 24, 31, 'strm7 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_8 = ( 
    'bm_rsc_status_8',
    (0x834300b4, 0x834300b8),
    'bm resource status counters 8.',
    [ 
       ('wr_buf_ocpy_cnt_strm12', 0, 11, 'stream 12 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm13', 12, 23, 'stream 13 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm8', 24, 31, 'strm8 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_9 = ( 
    'bm_rsc_status_9',
    (0x834300b8, 0x834300bc),
    'bm resource status counters 9.',
    [ 
       ('wr_buf_ocpy_cnt_strm14', 0, 11, 'stream 14 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm15', 12, 23, 'stream 15 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm9', 24, 31, 'strm9 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_10 = ( 
    'bm_rsc_status_10',
    (0x834300bc, 0x834300c0),
    'bm resource status counters 10.',
    [ 
       ('rd_buf_ocpy_cnt_ch0', 0, 11, 'CH 0 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch1', 12, 23, 'CH 1 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm10', 24, 31, 'strm10 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_11 = ( 
    'bm_rsc_status_11',
    (0x834300c0, 0x834300c4),
    'bm resource status counters 11.',
    [ 
       ('rd_buf_ocpy_cnt_ch2', 0, 11, 'CH 2 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch3', 12, 23, 'CH 3 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm11', 24, 31, 'strm11 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_12 = ( 
    'bm_rsc_status_12',
    (0x834300c4, 0x834300c8),
    'bm resource status counters 12.',
    [ 
       ('rd_buf_ocpy_cnt_ch4', 0, 11, 'CH 4 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch5', 12, 23, 'CH 5 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm12', 24, 31, 'strm12 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_13 = ( 
    'bm_rsc_status_13',
    (0x834300c8, 0x834300cc),
    'bm resource status counters 13.',
    [ 
       ('rd_buf_ocpy_cnt_ch6', 0, 11, 'CH 6 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch7', 12, 23, 'CH 7 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm13', 24, 31, 'strm13 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_14 = ( 
    'bm_rsc_status_14',
    (0x834300cc, 0x834300d0),
    'bm resource status counters 14.',
    [ 
       ('rd_buf_ocpy_cnt_ch8', 0, 11, 'CH 8 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch9', 12, 23, 'CH 9 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm14', 24, 31, 'strm14 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_15 = ( 
    'bm_rsc_status_15',
    (0x834300d0, 0x834300d4),
    'bm resource status counters 15.',
    [ 
       ('rd_buf_ocpy_cnt_ch10', 0, 11, 'CH 10 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch11', 12, 23, 'CH 11 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm15', 24, 31, 'strm15 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_16 = ( 
    'bm_rsc_status_16',
    (0x834300d4, 0x834300d8),
    'bm resource status counters 16.',
    [ 
       ('rd_buf_ocpy_cnt_ch12', 0, 11, 'CH 12 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch13', 12, 23, 'CH 13 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm16', 24, 31, 'strm16 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_17 = ( 
    'bm_rsc_status_17',
    (0x834300d8, 0x834300dc),
    'bm resource status counters 17.',
    [ 
       ('rd_buf_ocpy_cnt_ch14', 0, 11, 'CH 14 occupy buffer unit count, in codeword.'),
       ('rd_buf_ocpy_cnt_ch15', 12, 23, 'CH 15 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm17', 24, 31, 'strm17 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_18 = ( 
    'bm_rsc_status_18',
    (0x834300dc, 0x834300e0),
    'bm resource status counters 18.',
    [ 
       ('vq_id_ocpy_cnt', 0, 11, 'total vq id occupy count for all buffers.'),
       ('rfb_entry_ocpy_cnt', 12, 23, 'RFB table entry(PBA/VQID pair) occupy count.'),
       ('raid_vq_cnt_strm18', 24, 31, 'strm18 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_19 = ( 
    'bm_rsc_status_19',
    (0x834300e0, 0x834300e4),
    'bm resource status counters 19.',
    [ 
       ('vp0_ocpy_cnt', 0, 11, 'Virtual Pool 0 buffer occupy count, in 2K unit.'),
       ('vp1_ocpy_cnt', 12, 23, 'Virtual Pool 1 buffer occupy count, in 2K unit.'),
       ('raid_vq_cnt_strm19', 24, 31, 'strm19 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_20 = ( 
    'bm_rsc_status_20',
    (0x834300e4, 0x834300e8),
    'bm resource status counters 20.',
    [ 
       ('vp2_ocpy_cnt', 0, 11, 'Virtual Pool 2 buffer occupy count, in 2K unit.'),
       ('vp3_ocpy_cnt', 12, 23, 'Virtual Pool 3 buffer occupy count, in 2K unit.'),
       ('raid_vq_cnt_strm20', 24, 31, 'strm20 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_21 = ( 
    'bm_rsc_status_21',
    (0x834300e8, 0x834300ec),
    'bm resource status counters 21.',
    [ 
       ('vp4_ocpy_cnt', 0, 15, 'Virtual Pool 4 buffer occupy count, in 2K unit.'),
       ('raid_vq_cnt_strm21', 24, 31, 'strm21 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_status = ( 
    'err_stat_intr_status',
    (0x834300ec, 0x834300f0),
    'BM Interrupt Status Register',
    [ 
       ('vec', 0, 31, 'each bit is write 1 to clear\n              bit[3]: msg_crc_err;\n              bit[2]: axi_err;\n              bit[1]: mem_cor_err;\n              bit[0]: mem_uncor_err;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_mask = ( 
    'err_stat_intr_mask',
    (0x834300f0, 0x834300f4),
    'Error State Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Error State_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_rc = ( 
    'err_stat_intr_rc',
    (0x834300f4, 0x834300f8),
    'Error State Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_shadow = ( 
    'err_stat_intr_shadow',
    (0x834300f8, 0x834300fc),
    'Error State Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_msg_crc_err_status = ( 
    'bm_msg_crc_err_status',
    (0x834300fc, 0x83430100),
    'bm MSG CRC Error status Register',
    [ 
       ('crc_err', 0, 31, 'msg crc error status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fw_flush_ctrl = ( 
    'bm_fw_flush_ctrl',
    (0x83430100, 0x83430104),
    'BM write accumulate buffer flush control',
    [ 
       ('stream_id', 0, 7, 'select the stream id for BM write accumulate buffer flush. Note: must be cfg when enable=0.'),
       ('enable', 8, 8, 'set 1 to enable BM write accumulate buffer flush for the selected stream_id. \n              HW will clear this bit when the selected stream flush is done. \n              FW can change to another stream_id when enable bit is 0, write enable to 1 again to trigger the flush for another stream.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_wr_acc_buf_status = ( 
    'bm_wr_acc_buf_status',
    (0x83430104, 0x83430108),
    'bm write accumulate buffer occupy status per stream',
    [ 
       ('ocpy', 0, 15, 'bm write accumulate buffer occupy status for stream0~31.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_vq_id_size_cfg = ( 
    'bm_vq_id_size_cfg',
    (0x83430108, 0x8343010c),
    'max number of BM VQ ID resource config',
    [ 
       ('vq_id_size', 0, 10, 'max number of BM VQ ID resource,0 based, max value =2047'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_crdt_cfg1 = ( 
    'bm_crdt_cfg1',
    (0x8343010c, 0x83430110),
    'BM data path credit config Register1.',
    [ 
       ('fe_wagt_ddr_wr_crdt', 0, 7, 'fe wagt ddr write outstanding request control.'),
       ('csr_ddr_rd_crdt_ch_be', 8, 11, 'be ragt per DDR CH ddr read  outstanding request control.\n             =0: to disable credit control'),
       ('csr_ddr_rd_crdt_ch_in', 12, 15, 'in wrap per DDR CH ddr read  outstanding request control.\n             =0: to disable credit control'),
       ('csr_ddr_rd_crdt_ch_fe', 16, 19, 'fe ragt per DDR CH ddr read  outstanding request control.\n             =0: to disable credit control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_misc_cfg = ( 
    'bm_misc_cfg',
    (0x83430110, 0x83430114),
    'bm misc config',
    [ 
       ('wrbuf_size_up_dis', 0, 0, 'set to disable wr buffer VQ size update for debug'),
       ('misc_ddr_ll_new_mode', 1, 1, 'set 1 to enable DDR data pointer(linklist) simplified look up mode'),
       ('misc_wr_ddr_ll_debug', 2, 2, 'set 1 to simplify ddr data ptr release for debug'),
       ('misc_rd_err_clr', 3, 3, 'after bad block scan, set 1 to clear read path data checker error flag, and then write to 0 before start write and read'),
       ('misc_stop_on_dealloc_vq_err', 4, 4, 'debug csr, set to stop when deallocate vq has error.'),
       ('invalid_vq_detect', 5, 5, 'debug csr, set to detect access to invalid(deallocated) VQ.'),
       ('vq_dealloc_vq_type_chk_dis', 6, 6, 'set 1 to disable  vq_type check  when deallocate vq .'),
       ('bm_rfb_chk_dis', 7, 7, 'set 1 to disable rfb chk.'),
       ('sram_ll_mid_id', 8, 15, 'define the middle node index for BM read buffer link list to improve read buffer link list lookup efficency.\n             set 0x0 to disable the feature;\n             set 0x10 for 64KB page/read;\n             set 0x18 for 96KB page/read;\n             set 0x20 for 128KB page/read;'),
       ('bm_rfb_vq_scan_interval', 16, 17, 'define rfb vqid scan interval when cooldown timer enabled.\n             0x0 : 64  cycles per vqid;\n             0x1 : 128 cycles per vqid;\n             0x2 : 256 cycles per vqid;\n             0x3 : reserved'),
       ('bm_rfb_qry_wo_lock_en', 18, 18, 'set 1 to enable query without lock'),
       ('bm_st_timer_force_release', 19, 19, 'set 1 to force write buffer release when prog done'),
       ('raidr_init_err_chk_dis', 20, 20, 'set 1 to disable raid recovery buffer initialization error check'),
       ('csr_fw_agt_err_clr_wr', 21, 21, 'set 1 to clear fw agt write access error'),
       ('csr_fw_agt_err_clr_rd', 22, 22, 'set 1 to clear fw agt read access error'),
       ('csr_stop_on_vq_up_err', 23, 23, 'set 1 to stop when has vq size update error'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_en_ctrl = ( 
    'bm_mem_ecc_en_ctrl',
    (0x83430114, 0x83430118),
    'bm Memory ECC Error/Parity check enable control Register',
    [ 
       ('ecc_en', 0, 31, 'BM memory ECC/Parity check enable control bitmap for each memory,\n            [0]:  set 1 to enable BM_VQ_INFO_TABLE,       \t\n            [1]:  set 1 to enable BM_VQ_NEXT_WR_PTR_TABLE,\t\n            [2]:  set 1 to enable BM_VQ_NEXT_RD_PTR_TABLE,\t\n            [3]:  set 1 to enable BM_SRAM_LL_0,\t\t  \t\n            [4]:  set 1 to enable BM_SRAM_LL_1,\t\t  \t\n            [5]:  set 1 to enable BM_SRAM_LL_2,\t\t\t\n            [6]:  set 1 to enable BM_SRAM_LL_3,\t\n            [7]: set 1 to enable BM_SRAM_LL_4,\t\t            \t\t\t\n            [8]:  set 1 to enable BM_DDR_LL,\t\t\t\n            [9]:  set 1 to enable BM_FREE_VQ_ID_FIFO,\t\t\n            [10]:  set 1 to enable BM_SRAM_FREE_PTR_FIFO_0,\t\n            [11]: set 1 to enable BM_SRAM_FREE_PTR_FIFO_1,\t\n            [12]: set 1 to enable BM_SRAM_FREE_PTR_FIFO_2,\t\n            [13]: set 1 to enable BM_SRAM_FREE_PTR_FIFO_3,\n            [14]: set 1 to enable BM_SRAM_FREE_PTR_FIFO_4,\t\n            [15]: set 1 to enable BM_DDR_FREE_PTR_FIFO,\t        \n            [16]: set 1 to enable BM_DDR_FREE_META_PTR_FIFO,\t\n            [17]: set 1 to enable BM_RFB_DIE_LL_TABLE,\t\t\n            [18]: set 1 to enable BM_RFB_DIE_IDX_TABLE,\n            [19]: set 1 to enable BM_SRAM_POOL,\t\n            [20]: set 1 to enable BM_ACC_MEM,\n            [21]: set 1 to enable BM_FE_WAGT,\t\n            [22]: set 1 to enable BM_BE_RAGT,\t\n            [23]: set 1 to enable BM_BE_WAGT,\t\n            [24]: set 1 to enable BM_FE_RAGT,\t\n            [25]: set 1 to enable BM_B2B,\t\n            [26]: set 1 to enable BM_RAIDC,\t\n            [27]: set 1 to enable BM_RAIDR,           \n            [28]: set 1 to enable BM_DDR_CH_MUX_RDATA_MEM_BE,           \n            [29]: set 1 to enable BM_CMD_TABLE,           \n            [30]: set 1 to enable DDR_AXI MEM,           \n            others: rsvd'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_22 = ( 
    'bm_rsc_status_22',
    (0x83430118, 0x8343011c),
    'bm resource status counters 22.',
    [ 
       ('wr_buf_ocpy_cnt_strm16', 0, 11, 'stream 16 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm17', 12, 23, 'stream 17 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm22', 24, 31, 'strm22 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_23 = ( 
    'bm_rsc_status_23',
    (0x8343011c, 0x83430120),
    'bm resource status counters 23.',
    [ 
       ('wr_buf_ocpy_cnt_strm18', 0, 11, 'stream 18 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm19', 12, 23, 'stream 19 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm23', 24, 31, 'strm23 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_24 = ( 
    'bm_rsc_status_24',
    (0x83430120, 0x83430124),
    'bm resource status counters 24.',
    [ 
       ('wr_buf_ocpy_cnt_strm20', 0, 11, 'stream 20 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm21', 12, 23, 'stream 21 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm24', 24, 31, 'strm24 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_25 = ( 
    'bm_rsc_status_25',
    (0x83430124, 0x83430128),
    'bm resource status counters 25.',
    [ 
       ('wr_buf_ocpy_cnt_strm22', 0, 11, 'stream 22 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm23', 12, 23, 'stream 23 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm25', 24, 31, 'strm25 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_26 = ( 
    'bm_rsc_status_26',
    (0x83430128, 0x8343012c),
    'bm resource status counters 26.',
    [ 
       ('wr_buf_ocpy_cnt_strm24', 0, 11, 'stream 24 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm25', 12, 23, 'stream 25 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm26', 24, 31, 'strm26 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_27 = ( 
    'bm_rsc_status_27',
    (0x8343012c, 0x83430130),
    'bm resource status counters 27.',
    [ 
       ('wr_buf_ocpy_cnt_strm26', 0, 11, 'stream 26 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm27', 12, 23, 'stream 27 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm27', 24, 31, 'strm27 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_28 = ( 
    'bm_rsc_status_28',
    (0x83430130, 0x83430134),
    'bm resource status counters 28.',
    [ 
       ('wr_buf_ocpy_cnt_strm28', 0, 11, 'stream 28 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm29', 12, 23, 'stream 29 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm28', 24, 31, 'strm28 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_29 = ( 
    'bm_rsc_status_29',
    (0x83430134, 0x83430138),
    'bm resource status counters 29.',
    [ 
       ('wr_buf_ocpy_cnt_strm30', 0, 11, 'stream 30 occupy buffer unit count, in codeword.'),
       ('wr_buf_ocpy_cnt_strm31', 12, 23, 'stream 31 occupy buffer unit count, in codeword.'),
       ('raid_vq_cnt_strm29', 24, 31, 'strm29 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_6 = ( 
    'bm_fsm_status_6',
    (0x83430138, 0x8343013c),
    'bm FSM Register 6',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_msg_axi_ctrl = ( 
    'bm_msg_axi_ctrl',
    (0x8343013c, 0x83430140),
    'bm axi control',
    [ 
       ('awlock_msg', 0, 0, 'awlock_msg'),
       ('awprot_msg', 4, 6, 'awprot_msg'),
       ('awcache_msg', 8, 11, 'awcache_msg'),
       ('awqos_msg', 12, 15, 'awqos_msg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_axi_ctrl = ( 
    'bm_ddr_axi_ctrl',
    (0x83430140, 0x83430144),
    'bm ddr axi control',
    [ 
       ('awlock_ddr', 0, 0, 'awlock_ddr'),
       ('awqos_ddr', 4, 6, 'awqos_ddr'),
       ('awcache_ddr', 8, 11, 'awcache_ddr'),
       ('awprot_ddr', 12, 13, 'awprot_ddr'),
       ('arlock_ddr', 16, 16, 'arlock_ddr'),
       ('arqos_ddr', 20, 22, 'arqos_ddr'),
       ('arcache_ddr', 24, 27, 'arcache_ddr'),
       ('arprot_ddr', 28, 29, 'arprot_ddr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_0 = ( 
    'bm_fifo_thr_cfg_0',
    (0x83430144, 0x83430148),
    'bm fifo thr cfg 0',
    [ 
       ('few_fifo_pg_info_thr', 0, 2, 'few_fifo_pg_info_thr'),
       ('few_fifo_in_skid_thr', 4, 7, 'few_fifo_in_skid_thr'),
       ('few_fifo_in_sb_thr', 8, 11, 'csr_few_fifo_in_sb_thr'),
       ('few_fifo_param_thr', 12, 14, 'csr_few_fifo_param_thr'),
       ('few_fifo_info_thr', 16, 18, 'csr_few_fifo_info_thr'),
       ('few_fifo_ptr_thr', 20, 22, 'csr_few_fifo_ptr_thr'),
       ('few_fifo_ptr_meta_thr', 24, 26, 'csr_few_fifo_ptr_meta_thr'),
       ('few_fifo_in_data_sel_thr', 28, 31, 'csr_few_fifo_in_data_sel_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_1 = ( 
    'bm_fifo_thr_cfg_1',
    (0x83430148, 0x8343014c),
    'bm fifo thr cfg 1',
    [ 
       ('few_fifo_sb_sram_sel_thr', 0, 4, 'csr_few_fifo_sb_sram_sel_thr'),
       ('few_fifo_sb_ddr_sel_thr', 8, 13, 'csr_few_fifo_sb_ddr_sel_thr'),
       ('few_fifo_ptr_ddr_sel_thr', 16, 20, 'csr_few_fifo_ptr_ddr_sel_thr'),
       ('few_fifo_ptr_sram_sel_thr', 24, 28, 'csr_few_fifo_ptr_sram_sel_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_2 = ( 
    'bm_fifo_thr_cfg_2',
    (0x8343014c, 0x83430150),
    'bm fifo thr cfg 2',
    [ 
       ('few_fifo_ddr_page_eop_thr', 0, 6, 'csr_few_fifo_ddr_page_eop_thr'),
       ('few_fifo_resp_thr', 8, 11, 'csr_few_fifo_resp_thr'),
       ('few_fifo_xfr_done0_thr', 12, 16, 'csr_few_fifo_xfr_done0_thr'),
       ('few_fifo_xfr_done1_thr', 20, 24, 'csr_few_fifo_xfr_done1_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_3 = ( 
    'bm_fifo_thr_cfg_3',
    (0x83430150, 0x83430154),
    'bm fifo thr cfg 3',
    [ 
       ('few_fifo_vq_ocpy_size_up_req_thr', 0, 4, 'csr_few_fifo_vq_ocpy_size_up_req_thr'),
       ('few_fifo_strm_id_cw_done_thr', 8, 13, 'csr_few_fifo_strm_id_cw_done_thr'),
       ('few_fifo_strm_id_page_meta_done_thr', 16, 22, 'few_fifo_strm_id_page_meta_done_thr'),
       ('few_fifo_msg_id_thr', 24, 30, 'few_fifo_msg_id_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_4 = ( 
    'bm_fifo_thr_cfg_4',
    (0x83430154, 0x83430158),
    'bm fifo thr cfg 4',
    [ 
       ('few_fifo_out_info_thr', 0, 5, 'few_fifo_out_info_thr'),
       ('few_fifo_ddr_wr_sb_thr', 8, 14, 'few_fifo_ddr_wr_sb_thr'),
       ('fer_fifo_param_thr', 16, 20, 'fer_fifo_param_thr'),
       ('fer_fifo_info_thr', 24, 27, 'fer_fifo_info_thr'),
       ('fer_fifo_ptr_thr', 28, 31, 'fer_fifo_ptr_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_5 = ( 
    'bm_fifo_thr_cfg_5',
    (0x83430158, 0x8343015c),
    'bm fifo thr cfg 5',
    [ 
       ('fer_fifo_sram_sb_thr', 0, 3, 'fer_fifo_sram_sb_thr'),
       ('fer_fifo_out_thr', 4, 7, 'fer_fifo_out_thr'),
       ('fer_fifo_sb_thr', 8, 12, 'fer_fifo_sb_thr'),
       ('fer_fifo_ddr_sb_thr', 16, 20, 'fer_fifo_ddr_sb_thr'),
       ('fer_fifo_ddr_rd_req_thr', 24, 29, 'fer_fifo_ddr_rd_req_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_6 = ( 
    'bm_fifo_thr_cfg_6',
    (0x8343015c, 0x83430160),
    'bm fifo thr cfg 6',
    [ 
       ('fer_fifo_rid_thr', 0, 4, 'fer_fifo_rid_thr'),
       ('bew_fifo_param_thr', 8, 11, 'bew_fifo_param_thr'),
       ('bew_fifo_info_thr', 12, 15, 'bew_fifo_info_thr'),
       ('bew_fifo_ptr_thr', 16, 19, 'bew_fifo_ptr_thr'),
       ('bew_fifo_resp_thr', 20, 23, 'bew_fifo_resp_thr'),
       ('bew_fifo_ocpy_new_thr', 24, 27, 'bew_fifo_ocpy_new_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_7 = ( 
    'bm_fifo_thr_cfg_7',
    (0x83430160, 0x83430164),
    'bm fifo thr cfg 7',
    [ 
       ('bew_fifo_ocpy_update_sb_thr', 0, 5, 'bew_fifo_ocpy_update_sb_thr'),
       ('ber_fifo_param_thr', 8, 10, 'ber_fifo_param_thr'),
       ('ber_fifo_info_thr', 12, 14, 'ber_fifo_info_thr'),
       ('ber_fifo_ptr_thr', 16, 18, 'ber_fifo_ptr_thr'),
       ('ber_fifo_ptr_cw_thr', 20, 22, 'ber_fifo_ptr_cw_thr'),
       ('ber_fifo_out_thr', 24, 27, 'ber_fifo_out_thr'),
       ('ber_fifo_in_data_sb_sel_thr', 28, 31, 'ber_fifo_in_data_sb_sel_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_8 = ( 
    'bm_fifo_thr_cfg_8',
    (0x83430164, 0x83430168),
    'bm fifo thr cfg 8',
    [ 
       ('ber_fifo_out_ddr_thr', 0, 4, 'ber_fifo_out_ddr_thr'),
       ('ber_fifo_in_data_sb_thr', 8, 10, 'ber_fifo_in_data_sb_thr'),
       ('ber_fifo_in_data_cw_thr', 12, 14, 'ber_fifo_in_data_cw_thr'),
       ('ber_fifo_in_data_sel_thr', 16, 18, 'ber_fifo_in_data_sel_thr'),
       ('ber_fifo_in_data1_thr', 20, 23, 'ber_fifo_in_data1_thr'),
       ('ber_fifo_aw_thr', 24, 29, 'ber_fifo_aw_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_9 = ( 
    'bm_fifo_thr_cfg_9',
    (0x83430168, 0x8343016c),
    'bm fifo thr cfg 9',
    [ 
       ('ber_fifo_xfr_done_thr', 0, 4, 'ber_fifo_xfr_done_thr'),
       ('ber_fifo_ddr_rd_sb_thr', 8, 13, 'ber_fifo_ddr_rd_sb_thr'),
       ('few_fifo_xfr_done_thr', 16, 20, 'csr_few_fifo_xfr_done_thr'),
       ('few_fifo_vq_thr', 24, 28, 'csr_few_fifo_vq_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_10 = ( 
    'bm_fifo_thr_cfg_10',
    (0x8343016c, 0x83430170),
    'bm fifo thr cfg 10',
    [ 
       ('raidc_fifo_raidc_info_thr', 0, 2, 'raidc_fifo_raidc_info_thr'),
       ('raidc_fifo_info_thr', 4, 6, 'raidc_fifo_info_thr'),
       ('raidc_fifo_ptr_thr', 8, 10, 'raidc_fifo_ptr_thr'),
       ('raidc_fifo_wr_ptr_thr', 12, 14, 'raidc_fifo_wr_ptr_thr'),
       ('raidc_fifo_strmid_thr', 16, 19, 'raidc_fifo_strmid_thr'),
       ('raidr_fifo_dst_info_thr', 20, 22, 'raidr_fifo_dst_info_thr'),
       ('raidr_fifo_dst_ptr_thr', 24, 30, 'raidr_fifo_dst_ptr_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_11 = ( 
    'bm_fifo_thr_cfg_11',
    (0x83430170, 0x83430174),
    'bm fifo thr cfg 11',
    [ 
       ('raidr_fifo_src_info_thr', 0, 2, 'raidr_fifo_src_info_thr'),
       ('raidr_fifo_src_ptr_thr', 3, 9, 'raidr_fifo_src_ptr_thr'),
       ('int_fifo_ddr_src_ptr_thr', 10, 12, 'int_fifo_ddr_src_ptr_thr'),
       ('int_fifo_src_ptr_thr', 13, 19, 'int_fifo_src_ptr_thr'),
       ('int_fifo_ddr_dst_ptr_thr', 20, 22, 'int_fifo_ddr_dst_ptr_thr'),
       ('int_fifo_dst_ptr_thr', 23, 29, 'int_fifo_dst_ptr_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_12 = ( 
    'bm_fifo_thr_cfg_12',
    (0x83430174, 0x83430178),
    'bm fifo thr cfg 12',
    [ 
       ('cmd_fifo_wdata_thr', 0, 5, 'cmd_fifo_wdata_thr'),
       ('cmd_fifo_wresp_thr', 8, 10, 'cmd_fifo_wresp_thr'),
       ('cmd_fifo_alloc_thr', 12, 14, 'cmd_fifo_alloc_thr'),
       ('cmd_fifo_alloc_resp_thr', 16, 18, 'cmd_fifo_alloc_resp_thr'),
       ('cmd_fifo_dealloc_thr', 20, 23, 'cmd_fifo_dealloc_thr'),
       ('cmd_fifo_dealloc_resp_thr', 24, 27, 'cmd_fifo_dealloc_resp_thr'),
       ('cmd_fifo_query_thr', 28, 29, 'cmd_fifo_query_thr'),
       ('cmd_fifo_query_resp_thr', 30, 31, 'cmd_fifo_query_resp_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_13 = ( 
    'bm_fifo_thr_cfg_13',
    (0x83430178, 0x8343017c),
    'bm fifo thr cfg 13',
    [ 
       ('csr_cmd_fifo_dma_thr', 0, 1, 'csr_cmd_fifo_dma_thr'),
       ('cmd_fifo_dma_id_thr', 2, 7, 'cmd_fifo_dma_id_thr'),
       ('cmd_fifo_int_dma_thr', 8, 10, 'cmd_fifo_int_dma_thr'),
       ('fifo_dma_resp_thr', 12, 16, 'fifo_dma_resp_thr'),
       ('fifo_rfb_thr', 20, 23, 'fifo_rfb_thr'),
       ('cmd_fifo_rfb_resp_thr', 24, 27, 'cmd_fifo_rfb_resp_thr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_cmd_crdt_cfg_0 = ( 
    'bm_cmd_crdt_cfg_0',
    (0x8343017c, 0x83430180),
    'bm_cmd_crdt_cfg_0',
    [ 
       ('dma_cmd_crdt', 0, 7, 'dma cmd credit cfg'),
       ('alloc_cmd_crdt', 8, 15, 'alloc cmd credit cfg'),
       ('dealloc_cmd_crdt', 16, 23, 'dealloc cmd credit cfg'),
       ('rfb_cmd_crdt', 24, 31, 'rfb cmd credit cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_cmd_crdt_cfg_1 = ( 
    'bm_cmd_crdt_cfg_1',
    (0x83430180, 0x83430184),
    'bm_cmd_crdt_cfg_1',
    [ 
       ('query_cmd_crdt', 0, 3, 'query cmd credit cfg'),
       ('shim_rd_crdt', 4, 7, 'shim_rd_crdt'),
       ('dma_per_ch_crdt', 8, 11, 'dma_per_ch_crdt'),
       ('dma_crdt', 12, 19, 'dma_crdt'),
       ('ccp_per_strm_crdt', 20, 27, 'ccp_per_strm_crdt'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_cmd_crdt_cfg_2 = ( 
    'bm_cmd_crdt_cfg_2',
    (0x83430184, 0x83430188),
    'bm_cmd_crdt_cfg_2',
    [ 
       ('ccp_crdt', 0, 15, 'ccp_crdt'),
       ('b2n_cmd_crdt', 16, 23, 'b2n cmd crdt'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_ddr_axi_ctrl_2 = ( 
    'bm_ddr_axi_ctrl_2',
    (0x83430188, 0x8343018c),
    'bm_ddr_axi_ctrl_2',
    [ 
       ('aw_parity_en', 0, 1, '[0]: ddr axi aw_parity_en for ch0;\n              [1]: ddr axi aw_parity_en for ch1;'),
       ('wparity_en', 2, 3, '[0]: ddr axi wparity_en for ch0;\n              [1]: ddr axi wparity_en for ch1;'),
       ('ar_parity_en', 4, 5, '[0]: ddr axi ar_parity_en for ch0;\n              [1]: ddr axi ar_parity_en for ch1;'),
       ('awallstrb_bm_ddr', 6, 7, '[0]:awallstrb_bm_ddr for ch0;\n              [1]:awallstrb_bm_ddr for ch1;'),
       ('awcobuf_bm_ddr', 8, 9, '[0]:awcobuf_bm_ddr for ch0;\n              [1]:awcobuf_bm_ddr for ch1;'),
       ('awapcmd_bm_ddr', 10, 11, '[0]:awapcmd_bm_ddr for ch0;\n              [1]:awapcmd_bm_ddr for ch1;'),
       ('arapcmd_bm_ddr', 12, 13, '[0]:arapcmd_bm_ddr for ch0;\n              [1]:arapcmd_bm_ddr for ch1;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fifo_thr_cfg_14 = ( 
    'bm_fifo_thr_cfg_14',
    (0x8343018c, 0x83430190),
    'bm_fifo_thr_cfg_14',
    [ 
       ('fw_fifo_aw_thr', 0, 3, 'fw_fifo_aw_thr;'),
       ('fw_fifo_wdata_thr', 4, 6, 'fw_fifo_wdata_thr;'),
       ('fw_fifo_ar_thr', 8, 11, 'fw_fifo_ar_thr;'),
       ('fw_fifo_rdata_thr', 12, 16, 'fw_fifo_rdata_thr;'),
       ('ddr_bid_fifo_thr', 20, 25, 'ddr_bid_fifo_thr;'),
       ('ddr_rid_fifo_thr', 26, 31, 'ddr_rid_fifo_thr;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_new_sram_cfg = ( 
    'bm_new_sram_cfg',
    (0x83430190, 0x83430194),
    'bm_new_sram_cfg',
    [ 
       ('fw_new_pool_map', 0, 11, "BM new sram pool enable bitmap for FW usage. \n              set one bit to enable 512KB sram memory. \n              FW can use up to 12*0.5MB=6MB BM sram by set to 12'hFFF;"),
       ('raid_new_pool_map', 12, 23, "BM new sram pool enable bitmap for raid parity usage in addition to vpool_map_2. \n              set one bit to enable 512KB sram memory. \n              raid can use up to 12*0.5MB=6MB BM sram by set to 12'hFFF;"),
       ('new_pool_size', 24, 31, 'BM physical pool (SRAM) size config for new pools(5~16), in unit of 2KB. 0 based, max 255.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_ecc_en_ctrl_2 = ( 
    'bm_mem_ecc_en_ctrl_2',
    (0x83430194, 0x83430198),
    'bm_mem_ecc_en_ctrl2',
    [ 
       ('ecc_en', 0, 31, '[0:11]  BM linklist table memory ecc enable for pool5~16 \n             [12:23] BM free ptr memory ecc enable for pool5~16'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_7 = ( 
    'bm_fsm_status_7',
    (0x83430198, 0x8343019c),
    'bm FSM Register 7',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_8 = ( 
    'bm_fsm_status_8',
    (0x8343019c, 0x834301a0),
    'bm FSM Register 8',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_9 = ( 
    'bm_fsm_status_9',
    (0x834301a0, 0x834301a4),
    'bm FSM Register 9',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_uncor_err_new = ( 
    'bm_mem_uncor_err_new',
    (0x834301a4, 0x834301a8),
    'bm_mem_uncor_err_new',
    [ 
       ('uncor_err', 0, 31, 'bm mem uncor error status for new memory'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cor_err_new_0 = ( 
    'bm_mem_cor_err_new_0',
    (0x834301a8, 0x834301ac),
    'bm_mem_cor_err_new_0',
    [ 
       ('cor_err', 0, 31, 'bm mem cor error status for new memory'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cor_err_new_1 = ( 
    'bm_mem_cor_err_new_1',
    (0x834301ac, 0x834301b0),
    'bm_mem_cor_err_new_1',
    [ 
       ('cor_err', 0, 31, 'bm mem cor error status for new memory'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cor_err_new_2 = ( 
    'bm_mem_cor_err_new_2',
    (0x834301b0, 0x834301b4),
    'bm_mem_cor_err_new_2',
    [ 
       ('cor_err', 0, 31, 'bm mem cor error status for new memory'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cor_err_new_3 = ( 
    'bm_mem_cor_err_new_3',
    (0x834301b4, 0x834301b8),
    'bm_mem_cor_err_new_3',
    [ 
       ('cor_err', 0, 31, 'bm mem cor error status for new memory'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_fsm_status_10 = ( 
    'bm_fsm_status_10',
    (0x834301b8, 0x834301bc),
    'bm FSM Register 10',
    [ 
       ('fsm', 0, 31, 'fsm status'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_rsc_status_30 = ( 
    'bm_rsc_status_30',
    (0x834301bc, 0x834301c0),
    'bm resource status counters 29.',
    [ 
       ('raid_vq_cnt_strm30', 0, 7, 'strm30 raid vq cnt.'),
       ('raid_vq_cnt_strm31', 8, 15, 'strm31 raid vq cnt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cpu_acc_cfg = ( 
    'bm_mem_cpu_acc_cfg',
    (0x834301c0, 0x834301c4),
    'cpu dynamic read access bm internal memory control.',
    [ 
       ('read_req', 0, 0, 'FW writes this bit to 1 to start read request, HW will clear this bit after the read data is ready.'),
       ('mem_sel', 1, 1, '=0: select the bm vq info table memory.\n            =1: select the bm ddr linklist memory.'),
       ('mem_addr', 8, 19, 'memory read address of bm vq info table memory(when mem_sel=0) or bm ddr linklist memory(when mem_sel=1).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cpu_acc_status_0 = ( 
    'bm_mem_cpu_acc_status_0',
    (0x834301c4, 0x834301c8),
    'the memory read data[31:0] of cpu dynamic read access.',
    [ 
       ('data', 0, 31, 'memory read data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cpu_acc_status_1 = ( 
    'bm_mem_cpu_acc_status_1',
    (0x834301c8, 0x834301cc),
    'the memory read data[63:32] of cpu dynamic read access.',
    [ 
       ('data', 0, 31, 'memory read data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cpu_acc_status_2 = ( 
    'bm_mem_cpu_acc_status_2',
    (0x834301cc, 0x834301d0),
    'the memory read data[95:64] of cpu dynamic read access.',
    [ 
       ('data', 0, 31, 'memory read data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bm_mem_cpu_acc_status_3 = ( 
    'bm_mem_cpu_acc_status_3',
    (0x834301d0, 0x834301d4),
    'the memory read data[127:96] of cpu dynamic read access.',
    [ 
       ('data', 0, 31, 'memory read data.'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		ccs_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_ccs_control_0 = ( 
    'ccs_control_0',
    (0x83440000, 0x83440004),
    'CCS Control Register 0.',
    [ 
       ('w2p_throttle_thr', 24, 30, 'W2P cmd proc stops processing commands from w2p queue if no. of wxfd messages from bm are not processed above the threshold. Set to 0 in default and there is no throttling.'),
       ('pe_per_ch_thr', 20, 23, 'Threshold for outstanding PROG/Erase jobs per channel to BE, 0 based number. Valid when byp_pe_scheduler is set to 0.'),
       ('b2n_flush_num_thr', 12, 19, 'CCS stops flush operation if no of flushed B2Ns reaches (b2n_flush_num_thr + 2). Set to 0 to disable limit checking.'),
       ('bm_mdma_ch_thr', 6, 11, 'CCS stops sending more MDMA command to BM for a certain channel if outstanding commands reaches this limit of that channel. Set to 0 to disable limit checking.'),
       ('page_stripe_en', 4, 4, 'Global control register. If set to 1, HW checks B2N command FS/LS field for striping operation.'),
       ('nand_page_size', 1, 2, '0: 32KB (2-plane), 1: 64KB (4-plane). 2: 96KB (6-plane), 3: 128KB (8-plane)'),
       ('byp_pe_scheduler', 0, 0, 'Set to 1 to bypass program/erase scheduler. Otherwise CCS limit one outstanding PROG or Erase cmd to BE.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_control_1 = ( 
    'ccs_control_1',
    (0x83440004, 0x83440008),
    'CCS Control Register 1.',
    [ 
       ('bm_mdma_num_thr', 24, 31, 'CCS stops sending more MDMA command to BM if outstanding commands reaches this limit. Set to 0 to disable limit checking.'),
       ('nand_stas_mask', 12, 23, "NAND status mask bits. CCS check NAND program status byte to determine program success or fail. Set bit to 1 to ignore that bit check. If program is failed, CCS won't deallocate the write buffer."),
       ('nand_page_offset', 5, 10, 'Page address offset'),
       ('nand_pl_offset', 0, 4, 'Plane bit offset in PBA.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_control_2 = ( 
    'ccs_control_2',
    (0x83440008, 0x8344000c),
    'CCS Control Register 2.',
    [ 
       ('flush_block_w2p_dis', 19, 19, 'Set 1 to diable b2n flush block same stream w2p with different seg-id sent to sdsw.'),
       ('ccs_xfr_done_new_mode', 18, 18, 'Set 1 to ccs xfr done new mode.'),
       ('staic_raid_stripe_mode', 17, 17, 'Set 1 to enable static raid stripe mode.'),
       ('abort_be_chk_dis', 16, 16, 'Set 1 to disable BE_TOP status check for abort_done trigger.'),
       ('ccs_abort_timeout_thr', 4, 13, 'Timer threshold to trigger ccs_abort_timeout status. Set 0 to disable timer, and each 1 step represents 64K sys_clk clock cycles. For example 800MHz sys_clk, each 1 step represents about 82us.'),
       ('ccs_abort_en', 0, 0, 'Enable CCS abort. Register ccs_intr_status bit[0] will be set upon completion.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_control_3 = ( 
    'ccs_control_3',
    (0x8344000c, 0x83440010),
    'CCS Control Register 3.',
    [ 
       ('ecc_charac_mode', 24, 24, 'Set to 1 to enable ECC characterization mode.\n              Under ecc_charac mode, CCS re-purpose the cw_status_bitmap[31:16] to LDPC decoding iteration number.\n              In ecc_charac mode, FW read 1 cw at a time to get accurate error cnt and iteration number.'),
       ('raidbuf_prealloc_dis', 22, 22, 'Set to 1 to disable raid buffer pre-allocation for write path.\n              Only allocate raid buffer when there is flush or w2p in that stream.'),
       ('be_b2n_rec_chk_dis', 21, 21, 'Set to 1 to disable BE b2n receiving check. Trigger BM right after sending b2n cmd to BE'),
       ('flsh_kprpar_dis', 20, 20, 'in mode0/mode2 flush, if the flush drop B2Ns incldue parity B2N, this cfg determine how to handle the drop parity buffer.\n             [1]when flsh_kprpar_dis=0, HW does nothing, FW takes full control in this mode.\n                either 1) sends B2N VQ write to program parity data to Nand, HW will deallocate parity in this case automatically; \n                or 2)directly sends parity vq dealloc cmd to BM via CCS without program parity buffer to Nand. for example, when parity buffer is empty.\n             [2]when flsh_kprpar_dis=1, HW does not do DMA transfer, just do parity buffer deallocation no matter whether there is any data in parity buffer or not. \n             in PF post-process B2N mode0/2 flush, suggest to use flsh_kprpar_dis=0.\n             in non-PF B2N mode0/2 flush,suggest to use flsh_kprpar_dis=1.'),
       ('wbuf_rls_vqid_dis', 19, 19, 'Set to 1 to disable vqid for write buffer release with bm_shdw_table_cmd opcode=1 start timer of shadow table entry. If this bit is set, bm will use PBA info to release VQ entry.'),
       ('msgid_chk_dis', 16, 18, 'CCS checks command msgid within its lifecycle. bit[0] for command enq check (start), bit[1] for command deq check (end), bit[2] for command mid-life msgid check.'),
       ('b2n_mdma_xfd_chk_dis', 15, 15, 'Set 1 to disable B2N mdma transfer done check.'),
       ('pcmd_pes_qrdy_chk_dis', 14, 14, 'Set 1 to disable pes queue full check before sending b2n command for scheduling.'),
       ('bm_err_chk_dis', 13, 13, 'Set 1 to disable bm message error status check (not applies to BM allocate cmd).'),
       ('read_cpl_chk_dis', 12, 12, 'Srt 1 to disable final check (shim complete and be_top complete) for last read completion.'),
       ('w2p_cpl_chk_dis', 11, 11, 'Set 1 to disable final check for w2p completions.'),
       ('b2b_chk_pge_dis', 10, 10, 'Set 1 to disable previous b2n page_end before performing b2b transfer.'),
       ('read_ovrpage_chk_dis', 9, 9, 'Set 1 to disable read over page boundary detection.'),
       ('rfb_query_to_dis', 8, 8, 'Set 1 to disable read from buffer timeout detection and CCS keeps waiting.'),
       ('soc_debug_dis', 7, 7, 'In default ccs monitors ccs_debug_sel[23], if set to 1, then ccs_debug port is enabled. Set soc_debug_dis to 1 to force disable soc debug port, i.e., ignore ccs_debug_sel[23] check.'),
       ('mdma_msg_kpd_dis', 6, 6, 'The keep_data bit control for MDMA message to BM. Default always set keep_data to 1 and disable BM auto write buffer release. Otherwise BM will release write buffer after transfer to BE_TOP if RFB is not enabled. Note that this applies to the message from CCS to BM, and is different from kpd bit in ccs_stm_b2n_write message.'),
       ('rfb_qry_ccs_dis', 5, 5, 'Set to 1 to skip rfb ccs query.'),
       ('cmd_err_stop_dis', 4, 4, 'Set to 1 to skip command error state. Command message dispatcher do cmd check and detect msgid error, prog/erase cmd bpl error (flag if it is all bad planes).'),
       ('rnx_read_cpl_dis', 3, 3, 'Set to 1 to disable read completion gen for read command done from BE_TOP with rnx=1, i.e., read but not transfer.'),
       ('rtn_credit_2ace_dis', 2, 2, 'Set to 1 to disable ccs to return credit to ace engine.'),
       ('ecc_stat_chk_dis', 1, 1, 'ECC decoding status check disabled, must set when LDPC is bypassed.'),
       ('hd_ext_rfb_dis', 0, 0, 'Header extraction read (scheme=4) from write buffer disabled.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_cplq_cnfg0 = ( 
    'ccs_cplq_cnfg0',
    (0x83440010, 0x83440014),
    'CCS Completion Queue Register 0.',
    [ 
       ('ccs_cplq_addr_lo', 0, 31, 'CCS completion queue address low 32bit. Address must be 32 bytes aligned, i.e., lower 5-bits are ignored by CCS.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_cplq_cnfg1 = ( 
    'ccs_cplq_cnfg1',
    (0x83440014, 0x83440018),
    'CCS Completion Queue Register 1.',
    [ 
       ('ccs_cplq_addr_hi', 0, 7, 'CCS completion queue address high 8bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_cplq_cnfg2 = ( 
    'ccs_cplq_cnfg2',
    (0x83440018, 0x8344001c),
    'CCS Completion Queue Register 2.',
    [ 
       ('ccs_cplq_size', 0, 15, 'CCS completion queue size in bytes, must be multiple of 32 bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_cplq_cnfg3 = ( 
    'ccs_cplq_cnfg3',
    (0x8344001c, 0x83440020),
    'CCS Completion Queue Register 3.',
    [ 
       ('ccs_cplq_wptr', 0, 15, 'CCS completion queue write pointer, actual memory address is ccs_cplq_addr + ccs_cplq_wptr.\n              Write this register will clear write pointer to 0. Firmware monitor this pointer to avoid queue overflow.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bmbe_cplq_cnfg0 = ( 
    'bmbe_cplq_cnfg0',
    (0x83440020, 0x83440024),
    'BM/BE Completion Queue Register 0.',
    [ 
       ('bmbe_cplq_addr_lo', 0, 31, 'BM/BE completion queue address low 32bit. Address must be 32 bytes aligned, i.e., lower 5-bits are ignored by CCS.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bmbe_cplq_cnfg1 = ( 
    'bmbe_cplq_cnfg1',
    (0x83440024, 0x83440028),
    'BMBE Completion Queue Register 1.',
    [ 
       ('bmbe_cplq_addr_hi', 0, 7, 'BM/BE completion queue address high 8bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bmbe_cplq_cnfg2 = ( 
    'bmbe_cplq_cnfg2',
    (0x83440028, 0x8344002c),
    'BM/BE Completion Queue Register 2.',
    [ 
       ('bmbe_cplq_size', 0, 15, 'BM/BE completion queue size in bytes, must be multiple of 32 bytes.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_bmbe_cplq_cnfg3 = ( 
    'bmbe_cplq_cnfg3',
    (0x8344002c, 0x83440030),
    'BM/BE Completion Queue Register 3.',
    [ 
       ('bmbe_cplq_wptr', 0, 15, 'BM/BE completion queue write pointer, actual memory address is bmbe_cplq_addr + bmbe_cplq_wptr.\n              Write this register will clear write pointer to 0. Firmware monitor this pointer to avoid queue overflow.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_ccount0 = ( 
    'ccs_w2p_ccount0',
    (0x83440030, 0x83440034),
    'CCS W2P Credit Counter 0.',
    [ 
       ('ccnt', 0, 5, 'W2P command credit count in segment 0. The value reflects available landing buffer slots in sdsw. The counter value is initialize by firmware, decremented by firmware, and incremented by HW.'),
       ('control', 8, 9, "2'b00 - Set; 2'b01 - Dec; Others reserved."),
       ('val', 12, 15, "Valid if control is set to 2'b01. The ccnt is decremented by val."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_ccount1 = ( 
    'ccs_w2p_ccount1',
    (0x83440034, 0x83440038),
    'CCS W2P Credit Counter 1.',
    [ 
       ('ccnt', 0, 5, 'W2P command credit count in segment 1. The value reflects available landing buffer slots in sdsw. The counter value is initialize by firmware, decremented by firmware, and incremented by HW.'),
       ('control', 8, 9, "2'b00 - Set; 2'b01 - Dec; Others reserved."),
       ('val', 12, 15, "Valid if control is set to 2'b01. The ccnt is decremented by val."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_ccount2 = ( 
    'ccs_w2p_ccount2',
    (0x83440038, 0x8344003c),
    'CCS W2P Credit Counter 2.',
    [ 
       ('ccnt', 0, 5, 'W2P command credit count in segment 2. The value reflects available landing buffer slots in sdsw. The counter value is initialize by firmware, decremented by firmware, and incremented by HW.'),
       ('control', 8, 9, "2'b00 - Set; 2'b01 - Dec; Others reserved."),
       ('val', 12, 15, "Valid if control is set to 2'b01. The ccnt is decremented by val."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_ccount3 = ( 
    'ccs_w2p_ccount3',
    (0x8344003c, 0x83440040),
    'CCS W2P Credit Counter 3.',
    [ 
       ('ccnt', 0, 5, 'W2P command credit count in segment 3. The value reflects available landing buffer slots in sdsw. The counter value is initialize by firmware, decremented by firmware, and incremented by HW.'),
       ('control', 8, 9, "2'b00 - Set; 2'b01 - Dec; Others reserved."),
       ('val', 12, 15, "Valid if control is set to 2'b01. The ccnt is decremented by val."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_memalloc_control = ( 
    'ccs_memalloc_control',
    (0x83440040, 0x83440044),
    'CCS Memory Alloc Control Register.',
    [ 
       ('ccs_raidr_vpid', 4, 5, 'RAID recovery parity buffer must use SRAM. 0~3: Virtual pool sram id.'),
       ('ccs_raidc_vpid', 0, 1, 'RAID contruction parity buffer must use SRAM. 0~3: Virtual pool sram id.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_memdealloc_control = ( 
    'ccs_memdealloc_control',
    (0x83440044, 0x83440048),
    'CCS Memory Deallocation Control Register.',
    [ 
       ('b2b_del_dis', 2, 2, 'B2B pageout source buffer is released after DMA is finished. B2B pagein source buffer is released after DMA is finished.'),
       ('raidr_del_dis', 1, 1, 'In RAID recovery, CCS is responsible for raid_start/raid_xor read data buffer deallocation, set to 1 to disable.'),
       ('raidc_del_dis', 0, 0, 'RAID construction buffer is released after DMA to BE is finished. BM release RAID buffer per codeword in default. CCS doesnt need to send deallocation command, so set this bit to 1 in default to disable CCS send deallocation request for RAID buffer.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_wpage_cnt_ctrl = ( 
    'ccs_wpage_cnt_ctrl',
    (0x8344004c, 0x83440050),
    'CCS Write Page Counter Control Register.',
    [ 
       ('page_cnt_mask', 0, 15, 'Mask bit per stream, bit[0] is for stream 0. Set to 1 to exclude it from write page count.'),
       ('page_cnt_rst', 28, 28, 'Write 1 to reset write page counters. Auto clear.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_wpage_cnt_status = ( 
    'ccs_wpage_cnt_status',
    (0x83440050, 0x83440054),
    'CCS Write Page Counter Status Register.',
    [ 
       ('wpage_cnt', 0, 11, 'Allocated write buffer page count. Incremented at write buffer allocation and decremented at buffer deallocation. Set page_cnt_mask to exclude selected streams from this count. The msb is overflow bit.'),
       ('raidc_page_cnt', 16, 23, 'Count no of raid construction pages are allocated. The msb is overflow bit.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidc_status = ( 
    'ccs_raidc_status',
    (0x83440054, 0x83440058),
    'CCS RAID Construction Status Register.',
    [ 
       ('raid_open', 0, 15, 'Set to 1 if the stream has an open raid stripe. bit[0] for stream0, ... bit[15] is for stream15.'),
       ('raid_error', 16, 31, 'Set to 1 if the stream has error. bit[0] for stream0, ... bit[15] is for stream15.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidr_status0 = ( 
    'ccs_raidr_status0',
    (0x83440058, 0x8344005c),
    'CCS RAID Recovery Status0 Register.',
    [ 
       ('raid_cw_stat_l', 0, 31, 'Set to 1 if the codeword is recieved for raid recovery. bit[0] is for codeword 0, ... bit[31] is for codeword 31.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidr_status1 = ( 
    'ccs_raidr_status1',
    (0x8344005c, 0x83440060),
    'CCS RAID Recovery Status1 Register.',
    [ 
       ('raid_started', 0, 0, 'RAID recovery stripe is started.'),
       ('raid_done', 1, 1, 'RAID recovery stripe is finished, i.e., raid_parity is finished.'),
       ('raid_vqid', 4, 15, 'RAID recovery parity buffer VQID.'),
       ('raid_fsm', 16, 21, 'RAID recovery FSM.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mem_acc_ctrl = ( 
    'ccs_mem_acc_ctrl',
    (0x83440060, 0x83440064),
    'CCS Memory Access Control Register.',
    [ 
       ('cpu_acc_en', 0, 0, 'Enable ccs memory read access.'),
       ('mem_sel', 1, 2, 'CPU access memory select. 0 - msgid list mem; 1 - PE scheduler mem. Others reserved.'),
       ('mem_addr', 8, 23, 'memory address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mem_data = ( 
    'ccs_mem_data',
    (0x83440064, 0x83440068),
    'CCS Cmd Memory Access Data Register.',
    [ 
       ('data', 0, 31, 'Read this register return memory dout data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_msg_mem_control = ( 
    'ccs_msg_mem_control',
    (0x83440068, 0x8344006c),
    'CCS Message Memory Access Control Register.',
    [ 
       ('sel', 0, 0, 'Memory select. 0 - cmd message memory; 1 - status message memory.'),
       ('msgid', 4, 15, 'Message ID, valid range 0~511'),
       ('dwidx', 16, 19, 'Command or Status message DWORD index to access. Cmd message range 0~10, Status message range 0~8.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_msg_mem_data = ( 
    'ccs_msg_mem_data',
    (0x8344006c, 0x83440070),
    'CCS Message Memory Access Data Register.',
    [ 
       ('data', 0, 31, 'Cmd/Status message memory is read-only. Read this register return DW data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_dbg_control0 = ( 
    'ccs_dbg_control0',
    (0x83440080, 0x83440084),
    'CCS Debug Control Register 0.',
    [ 
       ('dbg_timestamp_en', 20, 20, 'Set to 1 to enable ccs to snapshot timestamp.'),
       ('dbg_cpl_msg_2cpu_en', 5, 5, 'Set to 1 to redirect all cpl messages to ccs_cplq, could be used in ccs_abort.'),
       ('dbg_skip_rxfr_en', 4, 4, 'Set to 1 to skip read transfer after receiving xfd from BM, could be used in ccs_abort.'),
       ('dbg_pes_st_en', 3, 3, 'Set to 1 to enable ccs to write pes_start status to status memory.'),
       ('dbg_wr_proc_en', 2, 2, 'Set 1 to enable write cmd processor cmd start status update.'),
       ('dbg_be_rx_en', 1, 1, 'Set to 1 to enable ccs to write be_rx status to status memory.'),
       ('dbg_be_tx_en', 0, 0, 'Set to 1 to enable ccs to write be_tx status to status memory.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidc_ctrl = ( 
    'ccs_raidc_ctrl',
    (0x834400c0, 0x834400c4),
    'CCS RAID Construction Control Register.',
    [ 
       ('raid_stripe_mode', 0, 3, "4'h1: legacy mode. Data on different planes in the same b2n are independent and won't be XOR-ed together\n              4'h2: 2-plane skip 4 folding, valid for 8-plane device\n                    plane 0 XORed with plane 4,\n                    plane 1 XORed with plane 5,\n                    plane 2 XORed with plane 6,\n                    plane 3 XORed with plane 7,\n              4'h3: 2-plane skip 3 folding, valid for 6-plane device\n                    plane 0 XORed with plane 3,\n                    plane 1 XORed with plane 4,\n                    plane 2 XORed with plane 5, \n              4'h4: 4-plane skip 2 folding, valid for 4-plane 6-plane or 8-plane devices\n                    plane 0, plane2, plane4 and plane6 are XORed,\n                    plane 1, plane3, plane5 and plane7 are XORed,\n              4'h8: 8-plane folding, valid for all devices\n                    all planes are XORed together"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidr_status2 = ( 
    'ccs_raidr_status2',
    (0x834400c4, 0x834400c8),
    'CCS RAID Recovery Status2 Register.',
    [ 
       ('raid_cw_stat_h', 0, 31, 'Set to 1 if the codeword is recieved for raid recovery. bit[0] is for codeword 32, ... bit[31] is for codeword 63.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_tsc_control0 = ( 
    'ccs_tsc_control0',
    (0x83440100, 0x83440104),
    'CCS TimeStamp Counter Control Register 0.',
    [ 
       ('tsc_inner_cnt_thr', 0, 15, 'Inner counter threashold. Advance outer counter if threshold is hit and inner counter reset to 0. Default value is 1us assuming clock period is 1.25ns (800MHz).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_ts01_control = ( 
    'ccs_w2p_ts01_control',
    (0x83440104, 0x83440108),
    'CCS W2P Command Timestamp0/1 Control Register.',
    [ 
       ('ts0_ss_sel', 0, 15, 'Timestamp0 snapshot select, each bit set to 1 to enable snapshot for corresponding stage. bit[0] - command received by ccs.'),
       ('ts1_ss_sel', 16, 31, 'Timestamp1 snapshot select. each bit set to 1 to enable snapshot for corresponding stage. bit[15] - command completion sent by ccs.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_w2p_to_control = ( 
    'ccs_w2p_to_control',
    (0x83440108, 0x8344010c),
    'CCS W2P Command Timeout Control Register.',
    [ 
       ('time_out_thr', 0, 15, 'Set W2P completion TO field to 1 if cmd execution time is over time_out_thr.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_b2n_ts01_control = ( 
    'ccs_b2n_ts01_control',
    (0x8344010c, 0x83440110),
    'CCS B2N Command Timestamp0/1 Control Register.',
    [ 
       ('ts0_ss_sel', 0, 15, 'Timestamp0 snapshot select, each bit set to 1 to enable snapshot for corresponding stage. bit[0] - command received by ccs.'),
       ('ts1_ss_sel', 16, 31, 'Timestamp1 snapshot select. each bit set to 1 to enable snapshot for corresponding stage. bit[15] - command completion sent by ccs.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_b2n_to_control = ( 
    'ccs_b2n_to_control',
    (0x83440110, 0x83440114),
    'CCS B2N Command Timeout Control Register.',
    [ 
       ('time_out_thr', 0, 15, 'Set B2N completion TO field to 1 if cmd execution time is over time_out_thr.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_erase_ts01_control = ( 
    'ccs_erase_ts01_control',
    (0x83440114, 0x83440118),
    'CCS ERASE Command Timestamp0/1 Control Register.',
    [ 
       ('ts0_ss_sel', 0, 15, 'Timestamp0 snapshot select, each bit set to 1 to enable snapshot for corresponding stage. bit[0] - command received by ccs.'),
       ('ts1_ss_sel', 16, 31, 'Timestamp1 snapshot select. each bit set to 1 to enable snapshot for corresponding stage. bit[15] - command completion sent by ccs.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_erase_to_control = ( 
    'ccs_erase_to_control',
    (0x83440118, 0x8344011c),
    'CCS Erase Command Timeout Control Register.',
    [ 
       ('time_out_thr', 0, 15, 'Set Erase completion TO field to 1 if cmd execution time is over time_out_thr.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_read_ts01_control = ( 
    'ccs_read_ts01_control',
    (0x8344011c, 0x83440120),
    'CCS READ Command Timestamp0/1 Control Register.',
    [ 
       ('ts0_ss_sel', 0, 15, 'Timestamp0 snapshot select, each bit set to 1 to enable snapshot for corresponding stage. bit[0] - command received by ccs.'),
       ('ts1_ss_sel', 16, 31, 'Timestamp1 snapshot select. each bit set to 1 to enable snapshot for corresponding stage. bit[15] - command completion sent by ccs.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_read_to_control = ( 
    'ccs_read_to_control',
    (0x83440120, 0x83440124),
    'CCS Read Command Timeout Control Register.',
    [ 
       ('time_out_thr', 0, 15, 'Set B2N completion TO field to 1 if cmd execution time is over time_out_thr.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_intr_status = ( 
    'ccs_intr_status',
    (0x83440180, 0x83440184),
    'CCS Interrupt Status Register 0. FW write to 1 to clear interrupt bit.',
    [ 
       ('vec', 0, 15, 'CCS interrupt status: \n              bit[0] - CCS abort done interrupt, IRQ0;\n              bit[1] - CCS memory correctable error interrupt, IRQ2;\n              bit[2] - CCS memory uncorrectable error interrupt, IRQ3;\n              bit[3] - CCS axi transaction error interrupt, IRQ1;\n              bit[4] - CCS dispatcher error interrupt, refer to ccs_dispatcher_stas for details, IRQ4;\n              bit[5] - CCS b2n cmd processing error interrupt, refer to ccs_b2n_cmd_status for details, IRQ5;\n              bit[6] - CCS write cmd processing error interrupt, refer to ccs_write_cmd_status for details, IRQ6;\n              bit[7] - CCS miscellaneous error interrupt, refer to ccs_misc_status for details, IRQ8;\n              Others - reserved.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_intr_mask = ( 
    'ccs_intr_mask',
    (0x83440184, 0x83440188),
    'CCS Interrupt Mask Register.',
    [ 
       ('vec', 0, 15, "Interrupt mask, set to 1 to mask out interrupt IRQs. The interrupt status register value won't be masked."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_intr_rc = ( 
    'ccs_intr_rc',
    (0x83440188, 0x8344018c),
    'CCS Interrupt Read Clear Register.',
    [ 
       ('vec', 0, 15, 'Interrupt read clear.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_intr_shadow = ( 
    'ccs_intr_shadow',
    (0x8344018c, 0x83440190),
    'CCS Interrupt Shadow Register.',
    [ 
       ('vec', 0, 15, 'Interrupt shadow register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_dpp_ctrl_0 = ( 
    'ccs_dpp_ctrl_0',
    (0x83440200, 0x83440204),
    'CCS Data Path Protection Control Register.',
    [ 
       ('s0_crc_chk_bypass', 0, 0, 'CCS message interface slave0 crc check bypass.'),
       ('s1_crc_chk_bypass', 1, 1, 'CCS message interface slave1 crc check bypass.'),
       ('m0_crc_en', 2, 2, 'CCS message interface master0 crc gen enable.'),
       ('m1_crc_en', 3, 3, 'CCS message interface master1 crc gen enable.'),
       ('mem_ecc_en', 4, 7, 'CCS ecc enable. bit[0] - cmd msg memory; bit[1] - status msg memory; bit[2] - message id list memory; bit[3] - pe scheduler memory.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mem_err_ctrl = ( 
    'ccs_mem_err_ctrl',
    (0x83440204, 0x83440208),
    'CCS Memory Error Control Register.',
    [ 
       ('err_inj_en', 0, 1, "CCS memory error injection enable. 2'h0:no error injection; 2'h1:correctable or parity error injection; 2'h2: uncorrectable error injection; 2'h3:rsvd."),
       ('mem_sel', 2, 3, "Memory selection for error injection. 2'h0:command message memory; 2'h1: status message memory; 2'h2: cmd msgid list memory; 2'h3: program/erase cmd scheduler memory."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mem_cor_err_status = ( 
    'ccs_mem_cor_err_status',
    (0x83440208, 0x8344020c),
    'CCS Memory Error Status Register 0.',
    [ 
       ('cor_err', 0, 3, 'CCS memory correctable error status. Clear interrupt bit intr_mem_cor_err will reset all status bits. [0] - cmd msg mem err; [1] stas msg mem err; [2] cmd msgid list mem err; [3] pe scheduler mem err.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mem_uncor_err_status = ( 
    'ccs_mem_uncor_err_status',
    (0x8344020c, 0x83440210),
    'CCS Memory Error Status Register 1.',
    [ 
       ('uncor_err', 0, 3, 'CCS memory uncorrectable error status. Clear interrupt bit intr_mem_uncor_err will reset all status bits. [0] - cmd msg mem err; [1] stas msg mem err; [2] cmd msgid list mem err; [3] pe scheduler mem err.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_trans_err_status = ( 
    'ccs_axi_trans_err_status',
    (0x83440210, 0x83440214),
    'CCS AXI transaction error status.',
    [ 
       ('ccs_s0_trans_err', 0, 0, 'CCS AXI slave 0 transaction error and will trigger axi_trans_err interrupt.'),
       ('ccs_s1_trans_err', 1, 1, 'CCS AXI slave 1 transaction error and will trigger axi_trans_err interrupt.'),
       ('ccs_m0_cpl_err', 4, 4, "CCS AXI master 0 ccs_cpl_tx response error and will trigger axi_trans_err interrupt. Error log is at ccs monitor select 0x244 [31:12] = {1'b1, cmd_grant_r[4:0], i_msg_resp_info[1:0], cpl_msgid[11:0]}."),
       ('ccs_m1_be_err', 5, 5, "CCS AXI master 1 ccs_be_tx response error and will trigger axi_trans_err interrupt. Error log is at ccs monitor select 0x0c8 [23:0] = {opcode[7:0], 1'b0, cmd_grant_bin_r, i_resp_info[1:0], tx_msgid[11:0]}."),
       ('ccs_m1_bm_err', 6, 6, "CCS AXI master 1 ccs_bm_tx response error and will trigger axi_trans_err interrupt. Error log is at ccs monitor select 0x117 [19:0] = {2'h3, cmd_grant_r[3:0], i_tx_msg_resp_info[1:0], tx_msgid[11:0]}."),
       ('ccs_m1_fwmsg_err', 7, 7, "CCS AXI master 1 ccs_fwmsg_tx error and will trigger axi_trans_err interrupt. Error log is at ccs monitor select 0x2a2 [23:0] = {2'h3, opcode_r[7:0], i_tx_msg_resp_info[1:0], rx_msgid[11:0]}."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_cmd_dispatcher_status = ( 
    'ccs_cmd_dispatcher_status',
    (0x83440214, 0x83440218),
    'CCS cmd_dispatcher status.',
    [ 
       ('rx_msgid_err', 0, 0, 'Received message ID is out of range and will trigger axi_trans_err interrupt. Write 1 to clear error status and exit error state.'),
       ('rx_msg_pe_bpl_err', 1, 1, 'Received B2N Write and Erase message set bad plane mask to all 1. Write 1 to clear error status and exit error state.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_b2n_proc_status = ( 
    'ccs_b2n_proc_status',
    (0x83440218, 0x8344021c),
    'CCS b2n command processing status.',
    [ 
       ('b2n_page_striping_err', 0, 15, 'B2N page striping boundary error and will trigger b2n_proc_err interrupt for stream 0 to 15.'),
       ('b2n_malloc_of', 16, 16, 'Buffer allocation for B2N command is timeout (overflow threshold) and will trigger b2n_proc_err interrupt.'),
       ('b2n_tbl_err', 17, 17, 'B2N table state machine error, SDSW and BM send inconsistent status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_write_proc_status = ( 
    'ccs_write_proc_status',
    (0x8344021c, 0x83440220),
    'CCS write command processing status.',
    [ 
       ('w2p_to_sdsw_err', 0, 0, 'Either CCS sends too many w2p to sdsw, or sdsw sends back too many w2prsp. This will trigger write_proc_err interrupt.'),
       ('w2p_credit_to_ace_err', 1, 1, 'Credit counter overflow. This will trigger write_proc_err interrupt.'),
       ('wdone_cnt_err', 2, 2, 'Recieved too much data without w2p cmd. This will trigger write_proc_err interrupt.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_abort_done_status = ( 
    'ccs_abort_done_status',
    (0x83440220, 0x83440224),
    'CCS Abort done status. User can refer to this register for detailed status when ccs_abort_done interrupt is set.',
    [ 
       ('sdsw_done', 0, 0, 'CCS abort sdsw (write) path done.'),
       ('sdsr_done', 1, 1, 'CCS abort sdsr (read) path done.'),
       ('pes_empty', 2, 2, 'CCS abort PE scheduler empty (for program and erase command check).'),
       ('be_empty', 3, 3, 'CCS abort BE_TOP empty (all backend nand operation finished).'),
       ('write_q_empty', 4, 4, 'Write cmd queue is empty.'),
       ('read_q_empty', 5, 5, 'Read cmd queue is empty.'),
       ('erase_q_empty', 6, 6, 'Erase command queue is empty.'),
       ('timeout', 7, 7, 'CCS abort timeout.'),
       ('timer_cnt', 8, 17, 'Timer count, user can calculate how much time spent for abort, the actual time is timer_cnt*64*1024*sys_clk_period.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_misc_status = ( 
    'ccs_misc_status',
    (0x83440224, 0x83440228),
    'CCS miscellaneous status.',
    [ 
       ('cmd_msgid_cflt_err', 0, 2, 'Message ID conflict error: \n              bit[0]: Received cmd message ID is conflict with onging command. \n              bit[1]: Received completion message ID (from BE_TOP) is not matched with command status. \n              bit[2]: Internal message ID (from BM or others) is conflict with onging command status. \n              These error will trigger interrupt, and write non-zero value to this field to clear error status and exit error state.'),
       ('bm_rx_fifo_full', 4, 4, "BM RX interface message FIFO full. This doesn't trigger interrupt."),
       ('be_rx_fifo_full', 5, 5, "BE RX interface message FIFO full. This doesn't trigger interrupt."),
       ('pes_err', 8, 8, 'CCS program and erase scheduler error. This trigger interrupt, and write 1 to this field to clear error status and exit error state.'),
       ('bm_msg_err', 9, 9, 'BM message has failure bit set, not applies to BM allocate command. This trigger interrupt, and write 1 to this field to clear error status and exit error state.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_b2n_proc_status_ext = ( 
    'ccs_b2n_proc_status_ext',
    (0x83440228, 0x8344022c),
    'CCS b2n command processing status ext.',
    [ 
       ('b2n_page_striping_err', 0, 15, 'B2N page striping boundary error and will trigger b2n_proc_err interrupt for stream 16-31.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range0_saddr0 = ( 
    'ccs_axi_attrib_range0_saddr0',
    (0x83440280, 0x83440284),
    'CCS axi attribute range0 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range0_saddr1 = ( 
    'ccs_axi_attrib_range0_saddr1',
    (0x83440284, 0x83440288),
    'CCS axi attribute range0 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range1_saddr0 = ( 
    'ccs_axi_attrib_range1_saddr0',
    (0x83440288, 0x8344028c),
    'CCS axi attribute range1 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range1_saddr1 = ( 
    'ccs_axi_attrib_range1_saddr1',
    (0x8344028c, 0x83440290),
    'CCS axi attribute range1 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range2_saddr0 = ( 
    'ccs_axi_attrib_range2_saddr0',
    (0x83440290, 0x83440294),
    'CCS axi attribute range2 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range2_saddr1 = ( 
    'ccs_axi_attrib_range2_saddr1',
    (0x83440294, 0x83440298),
    'CCS axi attribute range2 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range3_saddr0 = ( 
    'ccs_axi_attrib_range3_saddr0',
    (0x83440298, 0x8344029c),
    'CCS axi attribute range3 start address0.',
    [ 
       ('saddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range3_saddr1 = ( 
    'ccs_axi_attrib_range3_saddr1',
    (0x8344029c, 0x834402a0),
    'CCS axi attribute range3 start address1.',
    [ 
       ('saddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range0_eaddr0 = ( 
    'ccs_axi_attrib_range0_eaddr0',
    (0x834402a0, 0x834402a4),
    'CCS axi attribute range0 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range0_eaddr1 = ( 
    'ccs_axi_attrib_range0_eaddr1',
    (0x834402a4, 0x834402a8),
    'CCS axi attribute range0 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range1_eaddr0 = ( 
    'ccs_axi_attrib_range1_eaddr0',
    (0x834402a8, 0x834402ac),
    'CCS axi attribute range1 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range1_eaddr1 = ( 
    'ccs_axi_attrib_range1_eaddr1',
    (0x834402ac, 0x834402b0),
    'CCS axi attribute range1 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range2_eaddr0 = ( 
    'ccs_axi_attrib_range2_eaddr0',
    (0x834402b0, 0x834402b4),
    'CCS axi attribute range2 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range2_eaddr1 = ( 
    'ccs_axi_attrib_range2_eaddr1',
    (0x834402b4, 0x834402b8),
    'CCS axi attribute range2 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range3_eaddr0 = ( 
    'ccs_axi_attrib_range3_eaddr0',
    (0x834402b8, 0x834402bc),
    'CCS axi attribute range3 end address0.',
    [ 
       ('eaddr_l', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_range3_eaddr1 = ( 
    'ccs_axi_attrib_range3_eaddr1',
    (0x834402bc, 0x834402c0),
    'CCS axi attribute range3 end address1.',
    [ 
       ('eaddr_h', 0, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_ctrl_0 = ( 
    'ccs_axi_attrib_ctrl_0',
    (0x834402c0, 0x834402c4),
    'CCS axi attribute control 0.',
    [ 
       ('axcache0', 0, 3, '.'),
       ('axqos0', 4, 7, '.'),
       ('axcache1', 8, 11, '.'),
       ('axqos1', 12, 15, '.'),
       ('axcache2', 16, 19, '.'),
       ('axqos2', 20, 23, '.'),
       ('axcache3', 24, 27, '.'),
       ('axqos3', 28, 31, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_axi_attrib_ctrl_1 = ( 
    'ccs_axi_attrib_ctrl_1',
    (0x834402c4, 0x834402c8),
    'CCS axi attribute control 1.',
    [ 
       ('axprot0', 0, 2, '.'),
       ('axlock0', 4, 4, '.'),
       ('axprot1', 8, 10, '.'),
       ('axlock1', 12, 12, '.'),
       ('axprot2', 16, 18, '.'),
       ('axlock2', 20, 20, '.'),
       ('axprot3', 24, 26, '.'),
       ('axlock3', 28, 28, '.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_pes_ctrl = ( 
    'ccs_pes_ctrl',
    (0x83440300, 0x83440304),
    'CCS PE Scheduler Control Register.',
    [ 
       ('ost_be_prog_thrd', 0, 9, 'Outstanding BE program cmd threshold.\n            The program cmd sent to BE from CCS shall not exceed this threshold.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mon_ctrl = ( 
    'ccs_mon_ctrl',
    (0x83440380, 0x83440384),
    'CCS Monitor Signals Control Register.',
    [ 
       ('mon_sel', 0, 15, 'CCS monitor select.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_mon_out = ( 
    'ccs_mon_out',
    (0x83440384, 0x83440388),
    'CCS Monitor Output.',
    [ 
       ('mon_out', 0, 31, 'Monitor output signal, read only.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_b2n_prep_status = ( 
    'b2n_prep_status',
    (0x83440400, 0x83440480),
    'B2N Prep Queue Status Register for each stream. Array index is stream id.',
    [ 
       ('inq_msgid', 0, 11, 'B2N command message in the prep queue.'),
       ('inq_pagecnt', 12, 13, 'B2N command message Pagecnt in the prep queue.'),
       ('inq_valid', 14, 14, 'There is valid entry in the prep queue.'),
       ('enq_valid', 15, 15, 'There is request to prep queue.'),
    ], 
    0x4,
    0x20,
    1,
    )
reg_b2n_tbl_status = ( 
    'b2n_tbl_status',
    (0x83440480, 0x83440500),
    'B2N Table Queue (Data Packing) Status Register for each Write Stream. Array index is stream index.',
    [ 
       ('inq_msgid', 0, 11, 'B2N command message in the table queue.'),
       ('inq_pagecnt', 12, 13, 'B2N command message Pagecnt in the table queue.'),
       ('inq_valid', 14, 14, 'There is valid entry in the table queue.'),
       ('inq_data_valid', 15, 15, 'There is data in current page/b2n.'),
       ('eofst_epcnt', 16, 21, 'Captured from next w2p append pointer eofst_page_wd[15:10]. Number of complete ECC pages in current B2N page.'),
       ('eofst_dword_offset', 22, 31, 'Captured from next w2p append pointer eofst_page_wd[9:0]. The offset (4B) within the EP (ECC Page). The actual data length in current page is (eofst_epcnt*2060 + eofst_dword_offset*4) bytes.'),
    ], 
    0x4,
    0x20,
    1,
    )
reg_stop_on_register = ( 
    'stop_on_register',
    (0x83440500, 0x83440504),
    'CCS Stop On Register.',
    [ 
       ('stop_on_w2p_rsp', 0, 0, 'Stop when W2P rsp.'),
       ('stop_on_w2p_to', 1, 1, 'Stop when W2P time out.'),
       ('stop_on_w2p', 2, 2, 'Stop when any W2P command.'),
       ('stop_on_erase_fail', 3, 3, 'Stop when erase command fail.'),
       ('stop_on_erase_abort', 4, 4, 'Stop when erase command abort.'),
       ('stop_on_erase_to', 5, 5, 'Stop when erase command time out.'),
       ('stop_on_erase', 6, 6, 'Stop when any erase command.'),
       ('stop_on_prog_fail', 7, 7, 'Stop when B2N command program fail.'),
       ('stop_on_prog_abort', 8, 8, 'Stop when B2N command program abort.'),
       ('stop_on_prog_to', 9, 9, 'Stop when B2N command program time out.'),
       ('stop_on_prog', 10, 10, 'Stop when any B2N command command.'),
       ('stop_on_rd_ccp_crc_err', 11, 11, 'Stop when CCP CRC error of read command.'),
       ('stop_on_rd_shim_err', 12, 12, 'Stop when shim error of read command.'),
       ('stop_on_rd_cmd_err', 13, 13, 'Stop when command error of read command.'),
       ('stop_on_rd_timeout', 14, 14, 'Stop when timeout of read command.'),
       ('stop_on_rd_erase_page', 15, 15, 'Stop when erase page of read command.'),
       ('stop_on_rd_zero_page', 16, 16, 'Stop when zero page of read command.'),
       ('stop_on_rd_CRC_err', 17, 17, 'Stop when LP CRC error of read command.'),
       ('stop_on_cw_status', 18, 18, 'Stop when cw_status!=0 of read command.'),
       ('stop_on_rd_abort', 19, 19, 'Stop when read command abort.'),
       ('stop_on_be_err', 20, 20, 'Stop when BE timeout or BE DQSL.'),
       ('stop_on_rd_cmd', 21, 21, 'Stop when any read command.'),
       ('stop_on_extra_obuf_done', 22, 22, 'stop when CCS receives extra obuf_done from SDSR.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ccs_raidc_status2 = ( 
    'ccs_raidc_status2',
    (0x83440504, 0x83440508),
    'CCS RAID Construction Status Register.',
    [ 
       ('raid_open', 0, 15, 'Set to 1 if the stream has an open raid stripe. bit[0] for stream16, ... bit[15] is for stream31.'),
       ('raid_error', 16, 31, 'Set to 1 if the stream has error. bit[0] for stream16, ... bit[15] is for stream31.'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		sdsw_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_sdsw_control = ( 
    'sdsw_control',
    (0x83450000, 0x83450004),
    'Sdsw Control Register.',
    [ 
       ('byps_cmprs_engs', 0, 3, "bit[i]: 1, bypass cmprs engine i for debug, data still driven to compr engine, compr engine will force to generate uncompressed blocks. \n               Note: HW does not support to bypass partial cmprs engines, FW should either set 4'h0 or 4'hf to this cfg."),
       ('mark_err_in_lba', 4, 4, '=1,write the error flag into CCP Header LBA[63] for all types of error: 1)error from w2p cmd;2)ccp crc error detected by sdsw in GC data write;3)nvme mode AXI parity check error. 3)w2p cmd slot_id/data size check mismatch for landing buffer;\n             =0,do not write the error flag into CCP header LBA[63]. \n             note: SDSW never write error in RAW data mode'),
       ('aes_encryp_dis', 5, 5, '1, disable aes encryption engine. 0, enable aes encryption engine.'),
       ('page_unit', 6, 7, "2'h0: 32KB page unit. 2'h1: 64KB page unit. 2'h2: 96KB page unit. 2'h3: 128KB page unit .\n               Note: SDSW won't use it in Quince."),
       ('rsc_th_cmprs', 8, 13, 'cmprs occupied buffer threshold.'),
       ('rsc_th_byps', 14, 19, 'byps occupied buffer threshold.'),
       ('byps_dcmpr_eng', 20, 21, "1,bypass decompressor engines to reduce write path latency. 0,enable decompressor for compressed data check.\n               Note: HW does not support to bypass partial dcmprs engines, FW should either set 2'h0 or 2'h3 to this cfg."),
       ('sdsw_buf_axi_rd_en', 22, 22, 'set to 1 to enable sdsw internal buffer (landing buffer(or rbuf) and cps memory) directly axi read access for debug purpose only. \n              Note: should only set when system is idle/hang and no further normal traffic. \n              csr_rbuf_rsc_free_map(sdsw_status_7) and csr_cps_rsc_free_map (sdsw_status_6) indicates landing buffer slot free bitmap and cps memory slot free bitmap, FW can try to read the memory slot with free_bitmap bit =0 via NIC axi.'),
       ('sdsw_dcmp_err_inj_en', 23, 23, 'set to 1 to enable inject error on all decompressors input data error by data bit flipping. \n              not work with mock engine'),
       ('sdsw_dcmp_err_inj_mode', 24, 24, 'when sdsw_dcmp_err_inj_en=1, \n              sdsw_dcmp_err_inj_mode=0: flip one bit error on sop cycle data; \n              sdsw_dcmp_err_inj_mode=1: flip one bit error on eop cycle data;'),
       ('sdsw_dis_aes256_key', 25, 25, 'set 1 to use 128 bit aes key; set 0 to use 256 bit aes key'),
       ('sdsw_aes_crdt_en', 26, 26, 'set 1 to enable the credit control of the AES wrapper. from aes_in to aes_out.'),
       ('sdsw_aes_same_key_dis', 27, 27, 'set 1 to disable the encryption same key feature.'),
       ('sdsw_aes_crdt_thr', 28, 31, 'the aes credit counter threshould value, only used when sdsw_aes_crdt_en =1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_page_ccp_num_limit_ctrl = ( 
    'sdsw_page_ccp_num_limit_ctrl',
    (0x83450004, 0x83450008),
    'Sdsw page max ccp number Control Register.',
    [ 
       ('enable', 0, 0, "1, enable page max ccp number feature;\n             0, disable the feature. \n             FW won't this feature in Quince(it may have conflict with the big map sector not cross super block requirement), so disable it by default."),
       ('max_ccp_num', 1, 12, 'set the max ccp number per page. if ccp count exeeds this number, new ccp in the same stream will be moved to the next page'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_seg_base_addr = ( 
    'sdsw_seg_base_addr',
    (0x83450008, 0x8345000c),
    'segment mapping to rbuf/landing buffer base address.',
    [ 
       ('base_addr_seg_0', 0, 7, 'base_addr_seg_0.'),
       ('base_addr_seg_1', 8, 15, 'base_addr_seg_1.'),
       ('base_addr_seg_2', 16, 23, 'base_addr_seg_2.'),
       ('base_addr_seg_3', 24, 31, 'base_addr_seg_3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_ctrl = ( 
    'sdsw_tr_comp_ctrl',
    (0x8345000c, 0x83450010),
    'Sdsw tr cmprs engine Control Register.',
    [ 
       ('tr_cmprs_th', 0, 15, 'uncompressible bytes threshold.'),
       ('tr_cmprs_lzc_sep', 16, 23, 'wait cycles between blocks in lz_compressor.'),
       ('tr_cmprs_he_sep', 24, 31, 'wait cycles between blocks in huffman encoder.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_gts_cnt_l = ( 
    'sdsw_gts_cnt_l',
    (0x83450010, 0x83450014),
    'GTS counter register LSB.',
    [ 
       ('sdsw_gts_cnt_l', 0, 31, 'GTS counter register LSB. = gts_init[31:0], \n              FW write to set initial value for the counter. FW must write sdsw_gts_cnt_l before sdsw_gts_cnt_h.\n              HW will increase gts_init[63:0] by 1 each time sdsw recieves s B2N with gts_flag=1 based on the programmed init value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_gts_cnt_h = ( 
    'sdsw_gts_cnt_h',
    (0x83450014, 0x83450018),
    'GTS counter  register MSB.',
    [ 
       ('sdsw_gts_cnt_h', 0, 31, 'GTS counter register MSB. = gts_init[63:32]\n              FW write to set initial value for the counter. FW must write sdsw_gts_cnt_h after sdsw_gts_cnt_l.\n              HW will increase gts_init[63:0] by 1 each time sdsw recieves s B2N with gts_flag=1 based on the programmed init value.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_1 = ( 
    'sdsw_status_1',
    (0x83450018, 0x8345001c),
    'status CSRs,outstanding block count for each compr engine.',
    [ 
       ('cmpr_ostd_cnt_0', 0, 7, 'outstanding block count for compr engine0.'),
       ('cmpr_ostd_cnt_1', 8, 15, 'outstanding block count for compr engine1.'),
       ('cmpr_ostd_cnt_2', 16, 23, 'outstanding block count for compr engine2.'),
       ('cmpr_ostd_cnt_3', 24, 31, 'outstanding block count for compr engine3.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_2 = ( 
    'sdsw_status_2',
    (0x8345001c, 0x83450020),
    'sdsw status register 2',
    [ 
       ('dcmpr_ostd_cnt_0', 0, 7, 'outstanding block count for decompr engine0.'),
       ('dcmpr_ostd_cnt_1', 8, 15, 'outstanding block count for decompr engine1.'),
       ('aes_ostd_cnt', 16, 23, 'outstanding block count for aes engine.'),
       ('wrcmd_ostd_cnt', 24, 31, 'outstanding count for w2p cmd in sdsw.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_3 = ( 
    'sdsw_status_3',
    (0x83450020, 0x83450024),
    'sdsw status Register 3.',
    [ 
       ('b2ncmd_ostd_cnt', 0, 7, 'outstanding count for the B2N cmd in sdsw.'),
       ('dcmpr_fail_flag', 8, 8, 'flag indicates compressor output check failure'),
       ('dcmpr_out_err', 9, 10, 'bit0 indicates decompressor engine 0 output error; bit1 indicates decompressor engine 1 output error;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_4 = ( 
    'sdsw_status_4',
    (0x83450024, 0x83450028),
    'sdsw status Register 4.',
    [ 
       ('dcmpr_fail_1st_lba_lo', 0, 31, 'LBA[31:0] of the 1st failed compressor data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_5 = ( 
    'sdsw_status_5',
    (0x83450028, 0x8345002c),
    'sdsw status Register 5.',
    [ 
       ('dcmpr_fail_1st_lba_hi', 0, 31, 'LBA[63:32] of the 1st failed compressor data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_6 = ( 
    'sdsw_status_6',
    (0x8345002c, 0x83450030),
    'sdsw status Register 6.',
    [ 
       ('cps_rsc_free_map', 0, 31, 'cps buffer memory slot free bit map.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_7 = ( 
    'sdsw_status_7',
    (0x83450030, 0x83450034),
    'sdsw status Register 7.',
    [ 
       ('rbuf_rsc_free_map', 0, 31, 'landing buffer memory slot free bit map[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_fsm_status_0 = ( 
    'sdsw_fsm_status_0',
    (0x83450034, 0x83450038),
    'sdsw fsm status Register 0.',
    [ 
       ('fsm_status', 0, 31, 'sdsw fsm status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_fsm_status_1 = ( 
    'sdsw_fsm_status_1',
    (0x83450038, 0x8345003c),
    'sdsw fsm status Register 1.',
    [ 
       ('fsm_status', 0, 31, 'sdsw fsm status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_fsm_status_2 = ( 
    'sdsw_fsm_status_2',
    (0x8345003c, 0x83450040),
    'sdsw fsm status Register 2.',
    [ 
       ('fsm_status', 0, 31, 'sdsw fsm status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_cps_mem_ocpy_status = ( 
    'sdsw_cps_mem_ocpy_status',
    (0x83450040, 0x83450044),
    'sdsw cps memory usage status.',
    [ 
       ('byps', 0, 5, 'cps memory occupied slot count for bypass data(scheme!=0) .'),
       ('cmpr', 6, 11, 'cps memory occupied slot count for compression data(scheme=0) .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mon_ctrl = ( 
    'sdsw_mon_ctrl',
    (0x83450044, 0x83450048),
    'sdsw Monitor control Register',
    [ 
       ('sel', 0, 23, 'SDSW monitor select'),
       ('mode', 24, 24, 'SDSW debug monitor mode select. =0: use csr sel[23:0]; =1: user sdsw_mon_sel.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mon_out = ( 
    'sdsw_mon_out',
    (0x83450048, 0x8345004c),
    'sdsw monitor output Register.',
    [ 
       ('data', 0, 31, 'sdsw monitor data output.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mem_acc_ctrl = ( 
    'sdsw_mem_acc_ctrl',
    (0x8345004c, 0x83450050),
    'sdsw memory indirect access cfg Register.',
    [ 
       ('en', 0, 0, '1,Indirect memory read enable;\n            0,memory read disabled'),
       ('sel', 1, 7, "memory select for read.\n             ='d0: sdsw landing buf bank0;\n             ='d1: sdsw landing buf bank1;\n             ='d2: sdsw cps data mem bank0;\n             ='d3: sdsw cps data mem bank1;\n             ='d4: sdsw landing buf meta mem ;\n             ='d5: sdsw cps head mem ;"),
       ('addr', 8, 31, 'indirect memory read access address.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_indir_dat_0 = ( 
    'sdsw_indir_dat_0',
    (0x83450050, 0x83450054),
    'sdsw indirect access read data Register 0.',
    [ 
       ('sdsw_indir_rdat', 0, 31, 'sdsw indirect access read data bit[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_indir_dat_1 = ( 
    'sdsw_indir_dat_1',
    (0x83450054, 0x83450058),
    'sdsw indirect access read data Register 1.',
    [ 
       ('sdsw_indir_rdat', 0, 31, 'sdsw indirect access read data bit[63:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_indir_dat_2 = ( 
    'sdsw_indir_dat_2',
    (0x83450058, 0x8345005c),
    'sdsw indirect access read data Register 2.',
    [ 
       ('sdsw_indir_rdat', 0, 31, 'sdsw indirect access read data bit[95:64].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_indir_dat_3 = ( 
    'sdsw_indir_dat_3',
    (0x8345005c, 0x83450060),
    'sdsw indirect access read data Register 3.',
    [ 
       ('sdsw_indir_rdat', 0, 31, 'sdsw indirect access read data bit[127:96].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mem_err_inj_ctrl = ( 
    'sdsw_mem_err_inj_ctrl',
    (0x83450060, 0x83450064),
    'sdsw Memory Error inject control Register',
    [ 
       ('err_inj_en', 0, 1, "='d0: no error injection;\n             ='d1: 1bit ecc error injection or parity error injection\n             ='d2: 2bit ecc error injection, rsvd for parity protected memory"),
       ('err_inj_sel', 2, 31, "select the physical memory for error injection when err_inj_en!=0.\n              'd0~'d1:   sdsw_rbuf u_cmprs_buf(FIFO),  parity;\n              'd2~'d5:   sdsw_rbuf u_adapt_w2comp(FIFO), ECC;\n              'd6~'d7:   sdsw_ccp/ccp_aes_out encrypt and non-encrypt data FIFO, ECC;\n              'd8~'d9:   sdsw landing buf data memory, ECC;\n              'd10:      sdsw landing buf meta memory, parity;\n              'd11~'d12: sdsw cps buf data memory, ECC;\n              'd13:      sdsw cps buf Head memory, parity;  \n              'd14~'d17: sdsw c2d cmp output data adapt FIFO, parity;\n              'd18~'d19: sdsw c2d compressed data FIFO, ECC;\n              'd20~'d21: sdsw_ccp_crc data FIFO, parity\n              'd22:      sdsw_rbuf rx_buf_out byps data FIFO, ECC;\n              'd23~'d24: sdsw_rbuf rx_buf_out pattern encoder memory;"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mem_err_status_0 = ( 
    'sdsw_mem_err_status_0',
    (0x83450064, 0x83450068),
    'sdsw Memory ECC Error status Register',
    [ 
       ('cor_err', 0, 31, 'single bit error status for ECC or parity protected memories.\n               bit[21:0] are used for sdsw memories;\n               bit[31:22] rsvd'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mem_err_status_1 = ( 
    'sdsw_mem_err_status_1',
    (0x83450068, 0x8345006c),
    'sdsw Memory ECC Error status Register',
    [ 
       ('uncor_err', 0, 31, 'uncorrectable error status for ECC protected memories only'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_err_stat_intr_status = ( 
    'sdsw_err_stat_intr_status',
    (0x8345006c, 0x83450070),
    'SDSW Interrupt Status Register',
    [ 
       ('vec', 0, 31, 'each bit is write 1 to clear\n              bit[0]: mem_uncor_err;\n              bit[1]: mem_cor_err;\n              bit[2]: axi_err;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_err_stat_intr_mask = ( 
    'sdsw_err_stat_intr_mask',
    (0x83450070, 0x83450074),
    'Error State Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Error State_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_err_stat_intr_rc = ( 
    'sdsw_err_stat_intr_rc',
    (0x83450074, 0x83450078),
    'Error State Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_err_stat_intr_shadow = ( 
    'sdsw_err_stat_intr_shadow',
    (0x83450078, 0x8345007c),
    'Error State Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_aes_ctrl_0 = ( 
    'sdsw_aes_ctrl_0',
    (0x8345007c, 0x83450080),
    'sdsw AES control Register 0',
    [ 
       ('debug', 0, 0, 'AES engine debug control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_aes_ctrl_1 = ( 
    'sdsw_aes_ctrl_1',
    (0x83450080, 0x83450084),
    'sdsw AES control Register 1',
    [ 
       ('data', 0, 31, 'AES engine debug data in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_aes_stat_0 = ( 
    'sdsw_aes_stat_0',
    (0x83450084, 0x83450088),
    'sdsw aes status Register 0.',
    [ 
       ('debug_reg', 0, 31, 'sdsw AES debug reg.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_aes_stat_1 = ( 
    'sdsw_aes_stat_1',
    (0x83450088, 0x8345008c),
    'sdsw aes status Register 1.',
    [ 
       ('rev_id', 0, 15, 'sdsw AES engine revision ID.'),
       ('debug_data', 16, 19, 'sdsw AES engine debug_data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_status_1 = ( 
    'sdsw_rbuf_status_1',
    (0x8345008c, 0x83450090),
    'the next read pointer of landing buffer per segment.',
    [ 
       ('rbuf_next_rptr0', 0, 5, 'the next read pointer of landing buffer segment 0, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_rptr1', 6, 11, 'the next read pointer of landing buffer segment 1, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_rptr2', 12, 17, 'the next read pointer of landing buffer segment 2, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_rptr3', 18, 23, 'the next read pointer of landing buffer segment 3, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_status_2 = ( 
    'sdsw_rbuf_status_2',
    (0x83450090, 0x83450094),
    'the next write pointer of landing buffer per segment.',
    [ 
       ('rbuf_next_wptr0', 0, 5, 'the next write pointer of landing buffer segment 0, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_wptr1', 6, 11, 'the next write pointer of landing buffer segment 1, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_wptr2', 12, 17, 'the next write pointer of landing buffer segment 2, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
       ('rbuf_next_wptr3', 18, 23, 'the next writ pointer of landing buffer segment 3, in unit of slot. \n              bit[4:0]: slot id, max slot id=31. bit[5] indicate round flag of slot id.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_0 = ( 
    'sdsw_rbuf_size_status_0',
    (0x83450094, 0x83450098),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_0', 0, 9, 'the write data size in unit 8B of landing buffer slot 0.'),
       ('rbuf_wr_size_8B_1', 10, 19, 'the write data size in unit 8B of landing buffer slot 1.'),
       ('rbuf_wr_size_8B_2', 20, 29, 'the write data size in unit 8B of landing buffer slot 2.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_1 = ( 
    'sdsw_rbuf_size_status_1',
    (0x83450098, 0x8345009c),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_3', 0, 9, 'the write data size in unit 8B of landing buffer slot 3.'),
       ('rbuf_wr_size_8B_4', 10, 19, 'the write data size in unit 8B of landing buffer slot 4.'),
       ('rbuf_wr_size_8B_5', 20, 29, 'the write data size in unit 8B of landing buffer slot 5.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_2 = ( 
    'sdsw_rbuf_size_status_2',
    (0x8345009c, 0x834500a0),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_6', 0, 9, 'the write data size in unit 8B of landing buffer slot 6.'),
       ('rbuf_wr_size_8B_7', 10, 19, 'the write data size in unit 8B of landing buffer slot 7.'),
       ('rbuf_wr_size_8B_8', 20, 29, 'the write data size in unit 8B of landing buffer slot 8.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_3 = ( 
    'sdsw_rbuf_size_status_3',
    (0x834500a0, 0x834500a4),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_9', 0, 9, 'the write data size in unit 8B of landing buffer slot 9.'),
       ('rbuf_wr_size_8B_10', 10, 19, 'the write data size in unit 8B of landing buffer slot 10.'),
       ('rbuf_wr_size_8B_11', 20, 29, 'the write data size in unit 8B of landing buffer slot 11.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_4 = ( 
    'sdsw_rbuf_size_status_4',
    (0x834500a4, 0x834500a8),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_12', 0, 9, 'the write data size in unit 8B of landing buffer slot 12.'),
       ('rbuf_wr_size_8B_13', 10, 19, 'the write data size in unit 8B of landing buffer slot 13.'),
       ('rbuf_wr_size_8B_14', 20, 29, 'the write data size in unit 8B of landing buffer slot 14.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_5 = ( 
    'sdsw_rbuf_size_status_5',
    (0x834500a8, 0x834500ac),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_15', 0, 9, 'the write data size in unit 8B of landing buffer slot 15.'),
       ('rbuf_wr_size_8B_16', 10, 19, 'the write data size in unit 8B of landing buffer slot 16.'),
       ('rbuf_wr_size_8B_17', 20, 29, 'the write data size in unit 8B of landing buffer slot 17.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_6 = ( 
    'sdsw_rbuf_size_status_6',
    (0x834500ac, 0x834500b0),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_18', 0, 9, 'the write data size in unit 8B of landing buffer slot 18.'),
       ('rbuf_wr_size_8B_19', 10, 19, 'the write data size in unit 8B of landing buffer slot 19.'),
       ('rbuf_wr_size_8B_20', 20, 29, 'the write data size in unit 8B of landing buffer slot 20.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_7 = ( 
    'sdsw_rbuf_size_status_7',
    (0x834500b0, 0x834500b4),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_21', 0, 9, 'the write data size in unit 8B of landing buffer slot 21.'),
       ('rbuf_wr_size_8B_22', 10, 19, 'the write data size in unit 8B of landing buffer slot 22.'),
       ('rbuf_wr_size_8B_23', 20, 29, 'the write data size in unit 8B of landing buffer slot 23.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_8 = ( 
    'sdsw_rbuf_size_status_8',
    (0x834500b4, 0x834500b8),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_24', 0, 9, 'the write data size in unit 8B of landing buffer slot 24.'),
       ('rbuf_wr_size_8B_25', 10, 19, 'the write data size in unit 8B of landing buffer slot 25.'),
       ('rbuf_wr_size_8B_26', 20, 29, 'the write data size in unit 8B of landing buffer slot 26.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_9 = ( 
    'sdsw_rbuf_size_status_9',
    (0x834500b8, 0x834500bc),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_27', 0, 9, 'the write data size in unit 8B of landing buffer slot 27.'),
       ('rbuf_wr_size_8B_28', 10, 19, 'the write data size in unit 8B of landing buffer slot 28.'),
       ('rbuf_wr_size_8B_29', 20, 29, 'the write data size in unit 8B of landing buffer slot 29.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_size_status_10 = ( 
    'sdsw_rbuf_size_status_10',
    (0x834500bc, 0x834500c0),
    'the write data size of landing buffer per slot.',
    [ 
       ('rbuf_wr_size_8B_30', 0, 9, 'the write data size in unit 8B of landing buffer slot 30.'),
       ('rbuf_wr_size_8B_31', 10, 19, 'the write data size in unit 8B of landing buffer slot 31.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_nvme_axi_par_err_cfg = ( 
    'sdsw_nvme_axi_par_err_cfg',
    (0x834500c0, 0x834500c4),
    'nvme axi wdata parity error status report config.',
    [ 
       ('en', 0, 0, 'set 1 to enable report nvme axi wdata parity error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_nvme_axi_par_err_status = ( 
    'sdsw_nvme_axi_par_err_status',
    (0x834500c4, 0x834500c8),
    'sdsw axi error status.',
    [ 
       ('error_flag', 0, 0, 'nvme axi wdata parity error status. =1: has error;'),
       ('axi_id', 1, 9, 'log the axi id for the first parity error.'),
       ('sdsw_m0_err', 10, 10, 'sdsw axi m0 slave error flag.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_rbuf_err_status = ( 
    'sdsw_rbuf_err_status',
    (0x834500c8, 0x834500cc),
    'nvme landing buffer(rbuf) error status.',
    [ 
       ('rbuf_slot_id_err', 0, 0, 'w2p command landing buffer slot id mismatch flag; FW write this regsiter to clear it.'),
       ('rbuf_slot_id_err_1st_msgid', 1, 12, 'log the w2p command msg id for the first slot id error.  FW write this regsiter to clear it.'),
       ('rbuf_size_err', 16, 16, 'w2p command landing buffer data size mismatch flag; FW write this regsiter to clear it.'),
       ('rbuf_size_err_1st_msgid', 17, 28, 'log the w2p command msg id for the first data size error.  FW write this regsiter to clear it.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_gc_wr_lba_mask_cfg_l = ( 
    'sdsw_gc_wr_lba_mask_cfg_l',
    (0x834500cc, 0x834500d0),
    'GC write LBA mask[31:0] config.',
    [ 
       ('lba', 0, 31, 'cfg GC write LBA mask[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_gc_wr_lba_mask_cfg_h = ( 
    'sdsw_gc_wr_lba_mask_cfg_h',
    (0x834500d0, 0x834500d4),
    'GC write LBA mask[63:32] config.',
    [ 
       ('lba', 0, 31, 'cfg GC write LBA mask[63:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_mem_ecc_en_ctrl = ( 
    'sdsw_mem_ecc_en_ctrl',
    (0x834500d4, 0x834500d8),
    'sdsw Memory ECC/PARITY enable control Register',
    [ 
       ('ecc_en', 0, 31, 'sdsw Memory ECC/PARITY enable bitmap.\n              [1:0]:     sdsw_rbuf u_cmprs_buf(FIFO) ecc enable bit;\n              [5:2]:     sdsw_rbuf u_adapt_w2comp(FIFO)ecc enable bit;\n              [7:6]:     sdsw_ccp/ccp_aes_out encrypt and non-encrypt data FIFO, ECC enable bit;\n              [9:8]:     sdsw landing buf data memory, ECC enable bit;\n              [10]:      sdsw landing buf meta memory, parity enable bit;\n              [12:11]:   sdsw cps buf data memory, ECC enable bit;\n              [13]:      sdsw cps buf Head memory, parity enable bit;  \n              [17:14]:   sdsw c2d cmp output data adapt FIFO, parity enable bit;\n              [19:18]:   sdsw c2d compressed data FIFO, ECC enable bit;\n              [21:20]:   sdsw_ccp_crc data FIFO, parity enable;\n              [22]:      sdsw_rbuf rx_buf_out byps data FIFO, ecc enable bit;\n              [24:23]:   sdsw_rbuf rx_buf_out pattern encoder memory, ecc enable bit;\n              other bits reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_control_2 = ( 
    'sdsw_control_2',
    (0x834500d8, 0x834500dc),
    'sdw control register 2',
    [ 
       ('pat_encode_dis', 0, 0, 'set 1 to byps pattern encoder.'),
       ('encrypt_engine_sel', 1, 1, 'select encryption engine when both AES and SM4 are enabled; =0: AES; =1: SM4.'),
       ('reset_old_aes_key', 2, 2, 'FW sets 1 to trigger HW to clear the old AES key;'),
       ('encryption_dis', 3, 3, 'set to disable encryption for both AES and SM4;'),
       ('thr_comp_size', 4, 11, 'comp size thr for pattern encoder;'),
       ('thr_pattern_size', 12, 19, 'pattern size thr for pattern encoder;'),
       ('dcmpr_err_hanle_enhance', 20, 21, 'set bit0 to 1 to enable the enhanced tr_decomp huffman encoder unit error handling;\n              set bit1 to 1 to enable the enhanced tr_decomp huffman_to_lz error handling;'),
       ('w2p_rsp_err_clr', 22, 22, 'set to 1 to byps the w2p rsp error check;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_crdt_ctrl1 = ( 
    'sdsw_crdt_ctrl1',
    (0x834500dc, 0x834500e0),
    'sdw credit control reg1',
    [ 
       ('fifo_thr_ashim', 0, 3, 'fifo_thr_ashim.'),
       ('fifo_thr_aesin_cmd', 4, 7, 'fifo_thr_aesin_cmd.'),
       ('crdt_thr_aesin_cmd_out', 8, 10, 'crdt_thr_aesin_cmd_out.'),
       ('crdt_thr_aesin_dat_out', 12, 21, 'crdt_thr_aesin_dat_out.'),
       ('crdt_thr_aesin_dat2aes_out', 22, 31, 'crdt_thr_aesin_dat2aes_out.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_crdt_ctrl2 = ( 
    'sdsw_crdt_ctrl2',
    (0x834500e0, 0x834500e4),
    'sdw credit control reg2',
    [ 
       ('crdt_thr_aesout_cmd', 0, 3, 'crdt_thr_aesout_cmd.'),
       ('crdt_thr_aesout_ccp_h', 4, 7, 'crdt_thr_aesout_ccp_h.'),
       ('crdt_thr_aesin_enc_data', 8, 17, 'crdt_thr_aesin_enc_data.'),
       ('fifo_thr_wcmd_seg', 20, 22, 'fifo_thr_wcmd_seg.'),
       ('fifo_thr_bwa_axi_sb', 24, 26, 'fifo_thr_bwa_axi_sb.'),
       ('fifo_thr_rxout_pat_enc_in', 28, 31, 'fifo_thr_rxout_pat_enc_in.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_crdt_ctrl3 = ( 
    'sdsw_crdt_ctrl3',
    (0x834500e4, 0x834500e8),
    'sdw credit control reg3',
    [ 
       ('fifo_thr_rxout_byp_data', 0, 9, 'fifo_thr_rxout_byp_data.'),
       ('fifo_thr_rxout_cmd', 12, 14, 'fifo_thr_rxout_cmd .'),
       ('fifo_thr_c2d_cmprs2d_info', 16, 20, 'fifo_thr_c2d_cmprs2d_info.'),
       ('fifo_thr_ccp_crc_out', 24, 27, 'fifo_thr_ccp_crc_out.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_crdt_ctrl4 = ( 
    'sdsw_crdt_ctrl4',
    (0x834500e8, 0x834500ec),
    'sdw credit control reg4',
    [ 
       ('fifo_thr_c2d_cmprs2d_data', 0, 10, 'fifo_thr_c2d_cmprs2d_data.'),
       ('fifo_thr_wdma_cmd', 12, 17, 'fifo_thr_wdma_cmd.'),
       ('fifo_thr_wdma_cmd_type', 20, 25, 'fifo_thr_wdma_cmd_type.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_crdt_ctrl5 = ( 
    'sdsw_crdt_ctrl5',
    (0x834500ec, 0x834500f0),
    'sdw credit control reg5',
    [ 
       ('cmpr_crdt_thr', 0, 7, 'inline cmpr crdt threshold.'),
       ('dcmpr_crdt_thr', 8, 15, 'inline dcmpr crdt threshold'),
       ('cmpr_crdt_en_wcmd', 16, 16, 'cmpr_crdt_en_wcmd enable bit, control at wcmd segment fifo output.'),
       ('dcmpr_crdt_en_wcmd', 17, 17, 'dcmpr_crdt_en_wcmd enable bit, control at wcmd segment fifo output.'),
       ('cmpr_crdt_en', 18, 18, 'cmpr_crdt_en enable bit, control at tr_comp IP input.'),
       ('dcmpr_crdt_en', 19, 19, 'dcmpr_crdt_en enable bit, control at tr_decomp IP input.'),
       ('crdt_pat_en_comp', 20, 23, 'crdt_pat_en_comp.'),
       ('crdt_pat_en_byps', 24, 27, 'crdt_pat_en_byps.'),
       ('crdt_pat_dis_comp', 28, 31, 'crdt_pat_dis_comp.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_pi_crc32_init = ( 
    'sdsw_pi_crc32_init',
    (0x834500f0, 0x834500f4),
    'sds pi crc32 init cfg',
    [ 
       ('pi_crc_init', 0, 31, 'pi crc init cfg.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_pi_crc16_init = ( 
    'sdsw_pi_crc16_init',
    (0x834500f4, 0x834500f8),
    'sds pi crc16 init cfg',
    [ 
       ('pi_crc_init', 0, 15, 'pi crc init cfg.'),
       ('pi_crc16_little_endian_en', 16, 17, 'bit[0] pi_crc16_little_endian_en.\n             bit[1] pi_crc32_little_endian_en.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_status_8 = ( 
    'sdsw_status_8',
    (0x834500f8, 0x834500fc),
    'sdsw status Register 8.',
    [ 
       ('rbuf_rsc_free_map', 0, 31, 'landing buffer memory slot free bit map[63:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_ctrl = ( 
    'sdsr_ctrl',
    (0x83450200, 0x83450204),
    'sdsr control Register.',
    [ 
       ('sdsr_debug_mode', 0, 15, 'sdsr debug mode.\n              bit[0]: skip obuf release sanity check \n              bit[1]: ccp_crc_err inject\n              bit[2]: stop on nxs too short\n              bit[3]: stop on BM rls err\n              bit[4]: stop on CCP header error\n              bit[5]: latch the 1st 8Bytes of the 1st CW\n              bit[6]: disable AXI msg CRC gen\n              bit[7]: disable AXI msg CRC chk\n              bit[8]: stop on lp_bmp err\n              bit[9]: stop on lp_cnt err\n              bit[10]: stop on rresp slave err'),
       ('sdsr_trans_err_clr', 16, 16, 'AXI msg interface transaction error clear. Auto clear bit, i.e., write 1 to clear and HW reset to 0 automatically in the next cycle.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_stat = ( 
    'sdsr_stat',
    (0x83450208, 0x8345020c),
    'sdsr status Register.',
    [ 
       ('trans_err', 0, 0, 'sdsr AXI message interface trans error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mon_ctrl = ( 
    'sdsr_mon_ctrl',
    (0x83450210, 0x83450214),
    'sdsr Monitor control Register',
    [ 
       ('sel', 0, 11, 'SDSR monitor select'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mon_out = ( 
    'sdsr_mon_out',
    (0x83450214, 0x83450218),
    'sdsr monitor output Register.',
    [ 
       ('data', 0, 31, 'sdsr monitor data output.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mon_mode = ( 
    'sdsr_mon_mode',
    (0x83450218, 0x8345021c),
    'sdsr Monitor mode Register',
    [ 
       ('mode', 0, 0, "To monitor the performance, FW would like to snapshot HW internal status that all signals are latched at the same time.\n              Snapshot mode is not applied for all monitor signals as it requires extra resource to latch the snapshot value.\n              Designers pick up the critical signals to implement snapshot mode.\n              1'b0: legacy mode, HW returns real time signal values\n              1'b1: snapshot mode, HW returns the signal values in the last snapshot."),
       ('snapshot', 1, 1, 'This is an auto-clear bit, which returns to 0 at the next clock cycle when writing to 1.\n              When write to 1, HW will take a snapshot of all monitors with a snapshot mode, regardless the mode setting at bit 0.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_aes_ctrl_0 = ( 
    'sdsr_aes_ctrl_0',
    (0x83450220, 0x83450224),
    'sdsr AES control Register 0',
    [ 
       ('debug', 0, 0, 'AES engine debug control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_aes_ctrl_1 = ( 
    'sdsr_aes_ctrl_1',
    (0x83450224, 0x83450228),
    'sdsr AES control Register 1',
    [ 
       ('data', 0, 31, 'AES engine debug data in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_aes_stat_0 = ( 
    'sdsr_aes_stat_0',
    (0x83450228, 0x8345022c),
    'sdsr aes status Register 0.',
    [ 
       ('debug_reg', 0, 31, 'sdsr AES debug reg.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_aes_stat_1 = ( 
    'sdsr_aes_stat_1',
    (0x8345022c, 0x83450230),
    'sdsr aes status Register 1.',
    [ 
       ('rev_id', 0, 15, 'sdsr AES engine revision ID.'),
       ('debug_data', 16, 19, 'sdsr AES engine debug_data.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_ctrl_0 = ( 
    'sdsr_mem_acc_ctrl_0',
    (0x83450230, 0x83450234),
    'SDSR Memory Access Control Register 0',
    [ 
       ('mem_sel', 0, 7, "memory select\n              'h0: obuf slot 0\n              'h1: obuf slot 1\n              'h2: obuf slot 2\n              'h3: obuf slot 3\n              'h4: obuf slot 4\n              'h5: obuf slot 5\n              'h6: obuf slot 6 \n              'h7: obuf slot 7 \n              'h8: obuf slot 8\n              'h9: obuf slot 9\n              'ha: obuf slot a\n              'hb: obuf slot b \n              'hc: obuf slot c \n              'hd: obuf slot d \n              'he: obuf slot e \n              'hf: obuf slot f               \n              others: reserved\n              memory access flow:\n              1) select memory by programming sdsr_mem_acc_ctrl_0\n              2) program sdsr_mem_acc_ctrl_1 for starting dumping address\n              3) read sdsr_mem_acc_out_0 ~ sdsr_mem_acc_out_3 for output value. \n              4) repeat step 3) until all entries are red out"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_ctrl_1 = ( 
    'sdsr_mem_acc_ctrl_1',
    (0x83450234, 0x83450238),
    'SDSR Memory Access Control Register 1',
    [ 
       ('mem_addr', 0, 11, 'Memory address.\n              Memory address can be set by FW, or auto-inc when reading sdsr_mem_acc_out_0'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_out_0 = ( 
    'sdsr_mem_acc_out_0',
    (0x83450238, 0x8345023c),
    'SDSR Memory Access Output Register 0',
    [ 
       ('data', 0, 31, 'memory output data [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_out_1 = ( 
    'sdsr_mem_acc_out_1',
    (0x8345023c, 0x83450240),
    'SDSR Memory Access Output Register 1',
    [ 
       ('data', 0, 31, 'memory output data [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_out_2 = ( 
    'sdsr_mem_acc_out_2',
    (0x83450240, 0x83450244),
    'SDSR Memory Access Output Register 2',
    [ 
       ('data', 0, 31, 'memory output data [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_acc_out_3 = ( 
    'sdsr_mem_acc_out_3',
    (0x83450244, 0x83450248),
    'SDSR Memory Access Output Register 3',
    [ 
       ('data', 0, 31, 'memory output data [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_err_stat_intr_status = ( 
    'sdsr_err_stat_intr_status',
    (0x83450250, 0x83450254),
    'SDSR Interrupt Status Register',
    [ 
       ('vec', 0, 31, 'each bit is write 1 to clear\n              bit[0]: axi_rresp_err;\n              bit[1]: axi_eop_err;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_err_stat_intr_mask = ( 
    'sdsr_err_stat_intr_mask',
    (0x83450254, 0x83450258),
    'Error State Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Error State_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_err_stat_intr_rc = ( 
    'sdsr_err_stat_intr_rc',
    (0x83450258, 0x8345025c),
    'Error State Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_err_stat_intr_shadow = ( 
    'sdsr_err_stat_intr_shadow',
    (0x8345025c, 0x83450260),
    'Error State Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_gc_rd_lba_mask_cfg_l = ( 
    'sdsr_gc_rd_lba_mask_cfg_l',
    (0x83450260, 0x83450264),
    'GC read LBA mask[31:0] config.',
    [ 
       ('lba', 0, 31, 'cfg GC read LBA mask[31:0].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_gc_rd_lba_mask_cfg_h = ( 
    'sdsr_gc_rd_lba_mask_cfg_h',
    (0x83450264, 0x83450268),
    'GC read LBA mask[63:32] config.',
    [ 
       ('lba', 0, 31, 'cfg GC read LBA mask[63:32].'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_bm_s1_base_addr_l = ( 
    'sdsr_bm_s1_base_addr_l',
    (0x83450280, 0x83450284),
    'BM AXI S1 port base address [31:0].',
    [ 
       ('addr', 0, 31, 'BM AXI S1 port base address [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_bm_s1_base_addr_h = ( 
    'sdsr_bm_s1_base_addr_h',
    (0x83450284, 0x83450288),
    'BM AXI S1 port base address [39:32].',
    [ 
       ('addr', 0, 7, 'BM AXI S1 port base address [39:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_bm_msg_s0_base_addr_l = ( 
    'sdsr_bm_msg_s0_base_addr_l',
    (0x83450288, 0x8345028c),
    'BM AXI MSG S0 port base address [31:0].',
    [ 
       ('addr', 0, 31, 'BM AXI MSG S0 port base address [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_bm_msg_s0_base_addr_h = ( 
    'sdsr_bm_msg_s0_base_addr_h',
    (0x8345028c, 0x83450290),
    'BM AXI MSG S0 port base address [39:32].',
    [ 
       ('addr', 0, 7, 'BM AXI MSG S0 port base address [39:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_ecc_en_0 = ( 
    'sdsw_tr_comp_0_ecc_en_0',
    (0x83450300, 0x83450304),
    'sdsw tr comp0 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_ecc_en_1 = ( 
    'sdsw_tr_comp_0_ecc_en_1',
    (0x83450304, 0x83450308),
    'sdsw tr comp0 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_ecc_en_2 = ( 
    'sdsw_tr_comp_0_ecc_en_2',
    (0x83450308, 0x8345030c),
    'sdsw tr comp0 mem_ecc_en_2',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_ecc_en_3 = ( 
    'sdsw_tr_comp_0_ecc_en_3',
    (0x8345030c, 0x83450310),
    'sdsw tr comp0 mem_ecc_en_3',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_inj_0 = ( 
    'sdsw_tr_comp_0_cor_err_inj_0',
    (0x83450310, 0x83450314),
    'sdsw tr comp0 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_inj_1 = ( 
    'sdsw_tr_comp_0_cor_err_inj_1',
    (0x83450314, 0x83450318),
    'sdsw tr comp0 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_inj_2 = ( 
    'sdsw_tr_comp_0_cor_err_inj_2',
    (0x83450318, 0x8345031c),
    'sdsw tr comp0 mem_cor_err_inj_2',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_inj_3 = ( 
    'sdsw_tr_comp_0_cor_err_inj_3',
    (0x8345031c, 0x83450320),
    'sdsw tr comp0 mem_cor_err_inj_3',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_inj_0 = ( 
    'sdsw_tr_comp_0_uncor_err_inj_0',
    (0x83450320, 0x83450324),
    'sdsw tr comp0 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_inj_1 = ( 
    'sdsw_tr_comp_0_uncor_err_inj_1',
    (0x83450324, 0x83450328),
    'sdsw tr comp0 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_inj_2 = ( 
    'sdsw_tr_comp_0_uncor_err_inj_2',
    (0x83450328, 0x8345032c),
    'sdsw tr comp0 mem_uncor_err_inj_2',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_inj_3 = ( 
    'sdsw_tr_comp_0_uncor_err_inj_3',
    (0x8345032c, 0x83450330),
    'sdsw tr comp0 mem_uncor_err_inj_3',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_clr_0 = ( 
    'sdsw_tr_comp_0_cor_err_clr_0',
    (0x83450330, 0x83450334),
    'sdsw tr comp0 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_clr_1 = ( 
    'sdsw_tr_comp_0_cor_err_clr_1',
    (0x83450334, 0x83450338),
    'sdsw tr comp0 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_clr_2 = ( 
    'sdsw_tr_comp_0_cor_err_clr_2',
    (0x83450338, 0x8345033c),
    'sdsw tr comp0 mem_cor_err_clr_2',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_clr_3 = ( 
    'sdsw_tr_comp_0_cor_err_clr_3',
    (0x8345033c, 0x83450340),
    'sdsw tr comp0 mem_cor_err_clr_3',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_clr_0 = ( 
    'sdsw_tr_comp_0_uncor_err_clr_0',
    (0x83450340, 0x83450344),
    'sdsw tr comp0 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_clr_1 = ( 
    'sdsw_tr_comp_0_uncor_err_clr_1',
    (0x83450344, 0x83450348),
    'sdsw tr comp0 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_clr_2 = ( 
    'sdsw_tr_comp_0_uncor_err_clr_2',
    (0x83450348, 0x8345034c),
    'sdsw tr comp0 mem_uncor_err_clr_2',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_clr_3 = ( 
    'sdsw_tr_comp_0_uncor_err_clr_3',
    (0x8345034c, 0x83450350),
    'sdsw tr comp0 mem_uncor_err_clr_3',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_0 = ( 
    'sdsw_tr_comp_0_cor_err_0',
    (0x83450350, 0x83450354),
    'sdsw tr comp0 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_1 = ( 
    'sdsw_tr_comp_0_cor_err_1',
    (0x83450354, 0x83450358),
    'sdsw tr comp0 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_2 = ( 
    'sdsw_tr_comp_0_cor_err_2',
    (0x83450358, 0x8345035c),
    'sdsw tr comp0 mem_cor_err_2',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_cor_err_3 = ( 
    'sdsw_tr_comp_0_cor_err_3',
    (0x8345035c, 0x83450360),
    'sdsw tr comp0 mem_cor_err_3',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_0 = ( 
    'sdsw_tr_comp_0_uncor_err_0',
    (0x83450360, 0x83450364),
    'sdsw tr comp0 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_1 = ( 
    'sdsw_tr_comp_0_uncor_err_1',
    (0x83450364, 0x83450368),
    'sdsw tr comp0 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_2 = ( 
    'sdsw_tr_comp_0_uncor_err_2',
    (0x83450368, 0x8345036c),
    'sdsw tr comp0 mem_uncor_err_2',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_0_uncor_err_3 = ( 
    'sdsw_tr_comp_0_uncor_err_3',
    (0x8345036c, 0x83450370),
    'sdsw tr comp0 mem_uncor_err_3',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_ecc_en_0 = ( 
    'sdsw_tr_comp_1_ecc_en_0',
    (0x83450370, 0x83450374),
    'sdsw tr comp1 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_ecc_en_1 = ( 
    'sdsw_tr_comp_1_ecc_en_1',
    (0x83450374, 0x83450378),
    'sdsw tr comp1 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_ecc_en_2 = ( 
    'sdsw_tr_comp_1_ecc_en_2',
    (0x83450378, 0x8345037c),
    'sdsw tr comp1 mem_ecc_en_2',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_ecc_en_3 = ( 
    'sdsw_tr_comp_1_ecc_en_3',
    (0x8345037c, 0x83450380),
    'sdsw tr comp1 mem_ecc_en_3',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_inj_0 = ( 
    'sdsw_tr_comp_1_cor_err_inj_0',
    (0x83450380, 0x83450384),
    'sdsw tr comp1 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_inj_1 = ( 
    'sdsw_tr_comp_1_cor_err_inj_1',
    (0x83450384, 0x83450388),
    'sdsw tr comp1 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_inj_2 = ( 
    'sdsw_tr_comp_1_cor_err_inj_2',
    (0x83450388, 0x8345038c),
    'sdsw tr comp1 mem_cor_err_inj_2',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_inj_3 = ( 
    'sdsw_tr_comp_1_cor_err_inj_3',
    (0x8345038c, 0x83450390),
    'sdsw tr comp1 mem_cor_err_inj_3',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_inj_0 = ( 
    'sdsw_tr_comp_1_uncor_err_inj_0',
    (0x83450390, 0x83450394),
    'sdsw tr comp1 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_inj_1 = ( 
    'sdsw_tr_comp_1_uncor_err_inj_1',
    (0x83450394, 0x83450398),
    'sdsw tr comp1 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_inj_2 = ( 
    'sdsw_tr_comp_1_uncor_err_inj_2',
    (0x83450398, 0x8345039c),
    'sdsw tr comp1 mem_uncor_err_inj_2',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_inj_3 = ( 
    'sdsw_tr_comp_1_uncor_err_inj_3',
    (0x8345039c, 0x834503a0),
    'sdsw tr comp1 mem_uncor_err_inj_3',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_clr_0 = ( 
    'sdsw_tr_comp_1_cor_err_clr_0',
    (0x834503a0, 0x834503a4),
    'sdsw tr comp1 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_clr_1 = ( 
    'sdsw_tr_comp_1_cor_err_clr_1',
    (0x834503a4, 0x834503a8),
    'sdsw tr comp1 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_clr_2 = ( 
    'sdsw_tr_comp_1_cor_err_clr_2',
    (0x834503a8, 0x834503ac),
    'sdsw tr comp1 mem_cor_err_clr_2',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_clr_3 = ( 
    'sdsw_tr_comp_1_cor_err_clr_3',
    (0x834503ac, 0x834503b0),
    'sdsw tr comp1 mem_cor_err_clr_3',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_clr_0 = ( 
    'sdsw_tr_comp_1_uncor_err_clr_0',
    (0x834503b0, 0x834503b4),
    'sdsw tr comp1 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_clr_1 = ( 
    'sdsw_tr_comp_1_uncor_err_clr_1',
    (0x834503b4, 0x834503b8),
    'sdsw tr comp1 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_clr_2 = ( 
    'sdsw_tr_comp_1_uncor_err_clr_2',
    (0x834503b8, 0x834503bc),
    'sdsw tr comp1 mem_uncor_err_clr_2',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_clr_3 = ( 
    'sdsw_tr_comp_1_uncor_err_clr_3',
    (0x834503bc, 0x834503c0),
    'sdsw tr comp1 mem_uncor_err_clr_3',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_0 = ( 
    'sdsw_tr_comp_1_cor_err_0',
    (0x834503c0, 0x834503c4),
    'sdsw tr comp1 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_1 = ( 
    'sdsw_tr_comp_1_cor_err_1',
    (0x834503c4, 0x834503c8),
    'sdsw tr comp1 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_2 = ( 
    'sdsw_tr_comp_1_cor_err_2',
    (0x834503c8, 0x834503cc),
    'sdsw tr comp1 mem_cor_err_2',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_cor_err_3 = ( 
    'sdsw_tr_comp_1_cor_err_3',
    (0x834503cc, 0x834503d0),
    'sdsw tr comp1 mem_cor_err_3',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_0 = ( 
    'sdsw_tr_comp_1_uncor_err_0',
    (0x834503d0, 0x834503d4),
    'sdsw tr comp1 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_1 = ( 
    'sdsw_tr_comp_1_uncor_err_1',
    (0x834503d4, 0x834503d8),
    'sdsw tr comp1 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_2 = ( 
    'sdsw_tr_comp_1_uncor_err_2',
    (0x834503d8, 0x834503dc),
    'sdsw tr comp1 mem_uncor_err_2',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_1_uncor_err_3 = ( 
    'sdsw_tr_comp_1_uncor_err_3',
    (0x834503dc, 0x834503e0),
    'sdsw tr comp1 mem_uncor_err_3',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_ecc_en_0 = ( 
    'sdsw_tr_comp_2_ecc_en_0',
    (0x834503e0, 0x834503e4),
    'sdsw tr comp2 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_ecc_en_1 = ( 
    'sdsw_tr_comp_2_ecc_en_1',
    (0x834503e4, 0x834503e8),
    'sdsw tr comp2 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_ecc_en_2 = ( 
    'sdsw_tr_comp_2_ecc_en_2',
    (0x834503e8, 0x834503ec),
    'sdsw tr comp2 mem_ecc_en_2',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_ecc_en_3 = ( 
    'sdsw_tr_comp_2_ecc_en_3',
    (0x834503ec, 0x834503f0),
    'sdsw tr comp2 mem_ecc_en_3',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_inj_0 = ( 
    'sdsw_tr_comp_2_cor_err_inj_0',
    (0x834503f0, 0x834503f4),
    'sdsw tr comp2 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_inj_1 = ( 
    'sdsw_tr_comp_2_cor_err_inj_1',
    (0x834503f4, 0x834503f8),
    'sdsw tr comp2 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_inj_2 = ( 
    'sdsw_tr_comp_2_cor_err_inj_2',
    (0x834503f8, 0x834503fc),
    'sdsw tr comp2 mem_cor_err_inj_2',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_inj_3 = ( 
    'sdsw_tr_comp_2_cor_err_inj_3',
    (0x834503fc, 0x83450400),
    'sdsw tr comp2 mem_cor_err_inj_3',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_inj_0 = ( 
    'sdsw_tr_comp_2_uncor_err_inj_0',
    (0x83450400, 0x83450404),
    'sdsw tr comp2 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_inj_1 = ( 
    'sdsw_tr_comp_2_uncor_err_inj_1',
    (0x83450404, 0x83450408),
    'sdsw tr comp2 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_inj_2 = ( 
    'sdsw_tr_comp_2_uncor_err_inj_2',
    (0x83450408, 0x8345040c),
    'sdsw tr comp2 mem_uncor_err_inj_2',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_inj_3 = ( 
    'sdsw_tr_comp_2_uncor_err_inj_3',
    (0x8345040c, 0x83450410),
    'sdsw tr comp2 mem_uncor_err_inj_3',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_clr_0 = ( 
    'sdsw_tr_comp_2_cor_err_clr_0',
    (0x83450410, 0x83450414),
    'sdsw tr comp2 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_clr_1 = ( 
    'sdsw_tr_comp_2_cor_err_clr_1',
    (0x83450414, 0x83450418),
    'sdsw tr comp2 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_clr_2 = ( 
    'sdsw_tr_comp_2_cor_err_clr_2',
    (0x83450418, 0x8345041c),
    'sdsw tr comp2 mem_cor_err_clr_2',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_clr_3 = ( 
    'sdsw_tr_comp_2_cor_err_clr_3',
    (0x8345041c, 0x83450420),
    'sdsw tr comp2 mem_cor_err_clr_3',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_clr_0 = ( 
    'sdsw_tr_comp_2_uncor_err_clr_0',
    (0x83450420, 0x83450424),
    'sdsw tr comp2 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_clr_1 = ( 
    'sdsw_tr_comp_2_uncor_err_clr_1',
    (0x83450424, 0x83450428),
    'sdsw tr comp2 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_clr_2 = ( 
    'sdsw_tr_comp_2_uncor_err_clr_2',
    (0x83450428, 0x8345042c),
    'sdsw tr comp2 mem_uncor_err_clr_2',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_clr_3 = ( 
    'sdsw_tr_comp_2_uncor_err_clr_3',
    (0x8345042c, 0x83450430),
    'sdsw tr comp2 mem_uncor_err_clr_3',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_0 = ( 
    'sdsw_tr_comp_2_cor_err_0',
    (0x83450430, 0x83450434),
    'sdsw tr comp2 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_1 = ( 
    'sdsw_tr_comp_2_cor_err_1',
    (0x83450434, 0x83450438),
    'sdsw tr comp2 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_2 = ( 
    'sdsw_tr_comp_2_cor_err_2',
    (0x83450438, 0x8345043c),
    'sdsw tr comp2 mem_cor_err_2',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_cor_err_3 = ( 
    'sdsw_tr_comp_2_cor_err_3',
    (0x8345043c, 0x83450440),
    'sdsw tr comp2 mem_cor_err_3',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_0 = ( 
    'sdsw_tr_comp_2_uncor_err_0',
    (0x83450440, 0x83450444),
    'sdsw tr comp2 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_1 = ( 
    'sdsw_tr_comp_2_uncor_err_1',
    (0x83450444, 0x83450448),
    'sdsw tr comp2 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_2 = ( 
    'sdsw_tr_comp_2_uncor_err_2',
    (0x83450448, 0x8345044c),
    'sdsw tr comp2 mem_uncor_err_2',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_2_uncor_err_3 = ( 
    'sdsw_tr_comp_2_uncor_err_3',
    (0x8345044c, 0x83450450),
    'sdsw tr comp2 mem_uncor_err_3',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_ecc_en_0 = ( 
    'sdsw_tr_comp_3_ecc_en_0',
    (0x83450450, 0x83450454),
    'sdsw tr comp3 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_ecc_en_1 = ( 
    'sdsw_tr_comp_3_ecc_en_1',
    (0x83450454, 0x83450458),
    'sdsw tr comp3 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_ecc_en_2 = ( 
    'sdsw_tr_comp_3_ecc_en_2',
    (0x83450458, 0x8345045c),
    'sdsw tr comp3 mem_ecc_en_2',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_ecc_en_3 = ( 
    'sdsw_tr_comp_3_ecc_en_3',
    (0x8345045c, 0x83450460),
    'sdsw tr comp3 mem_ecc_en_3',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_inj_0 = ( 
    'sdsw_tr_comp_3_cor_err_inj_0',
    (0x83450460, 0x83450464),
    'sdsw tr comp3 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_inj_1 = ( 
    'sdsw_tr_comp_3_cor_err_inj_1',
    (0x83450464, 0x83450468),
    'sdsw tr comp3 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_inj_2 = ( 
    'sdsw_tr_comp_3_cor_err_inj_2',
    (0x83450468, 0x8345046c),
    'sdsw tr comp3 mem_cor_err_inj_2',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_inj_3 = ( 
    'sdsw_tr_comp_3_cor_err_inj_3',
    (0x8345046c, 0x83450470),
    'sdsw tr comp3 mem_cor_err_inj_3',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_inj_0 = ( 
    'sdsw_tr_comp_3_uncor_err_inj_0',
    (0x83450470, 0x83450474),
    'sdsw tr comp3 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_inj_1 = ( 
    'sdsw_tr_comp_3_uncor_err_inj_1',
    (0x83450474, 0x83450478),
    'sdsw tr comp3 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_inj_2 = ( 
    'sdsw_tr_comp_3_uncor_err_inj_2',
    (0x83450478, 0x8345047c),
    'sdsw tr comp3 mem_uncor_err_inj_2',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_inj_3 = ( 
    'sdsw_tr_comp_3_uncor_err_inj_3',
    (0x8345047c, 0x83450480),
    'sdsw tr comp3 mem_uncor_err_inj_3',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_clr_0 = ( 
    'sdsw_tr_comp_3_cor_err_clr_0',
    (0x83450480, 0x83450484),
    'sdsw tr comp3 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_clr_1 = ( 
    'sdsw_tr_comp_3_cor_err_clr_1',
    (0x83450484, 0x83450488),
    'sdsw tr comp3 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_clr_2 = ( 
    'sdsw_tr_comp_3_cor_err_clr_2',
    (0x83450488, 0x8345048c),
    'sdsw tr comp3 mem_cor_err_clr_2',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_clr_3 = ( 
    'sdsw_tr_comp_3_cor_err_clr_3',
    (0x8345048c, 0x83450490),
    'sdsw tr comp3 mem_cor_err_clr_3',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_clr_0 = ( 
    'sdsw_tr_comp_3_uncor_err_clr_0',
    (0x83450490, 0x83450494),
    'sdsw tr comp3 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_clr_1 = ( 
    'sdsw_tr_comp_3_uncor_err_clr_1',
    (0x83450494, 0x83450498),
    'sdsw tr comp3 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_clr_2 = ( 
    'sdsw_tr_comp_3_uncor_err_clr_2',
    (0x83450498, 0x8345049c),
    'sdsw tr comp3 mem_uncor_err_clr_2',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_clr_3 = ( 
    'sdsw_tr_comp_3_uncor_err_clr_3',
    (0x8345049c, 0x834504a0),
    'sdsw tr comp3 mem_uncor_err_clr_3',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_0 = ( 
    'sdsw_tr_comp_3_cor_err_0',
    (0x834504a0, 0x834504a4),
    'sdsw tr comp3 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_1 = ( 
    'sdsw_tr_comp_3_cor_err_1',
    (0x834504a4, 0x834504a8),
    'sdsw tr comp3 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_2 = ( 
    'sdsw_tr_comp_3_cor_err_2',
    (0x834504a8, 0x834504ac),
    'sdsw tr comp3 mem_cor_err_2',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_cor_err_3 = ( 
    'sdsw_tr_comp_3_cor_err_3',
    (0x834504ac, 0x834504b0),
    'sdsw tr comp3 mem_cor_err_3',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_0 = ( 
    'sdsw_tr_comp_3_uncor_err_0',
    (0x834504b0, 0x834504b4),
    'sdsw tr comp3 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_1 = ( 
    'sdsw_tr_comp_3_uncor_err_1',
    (0x834504b4, 0x834504b8),
    'sdsw tr comp3 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_2 = ( 
    'sdsw_tr_comp_3_uncor_err_2',
    (0x834504b8, 0x834504bc),
    'sdsw tr comp3 mem_uncor_err_2',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_comp_3_uncor_err_3 = ( 
    'sdsw_tr_comp_3_uncor_err_3',
    (0x834504bc, 0x834504c0),
    'sdsw tr comp3 mem_uncor_err_3',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_ecc_en_0 = ( 
    'sdsw_tr_decomp_0_ecc_en_0',
    (0x834504c0, 0x834504c4),
    'sdsw tr decomp0 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_ecc_en_1 = ( 
    'sdsw_tr_decomp_0_ecc_en_1',
    (0x834504c4, 0x834504c8),
    'sdsw tr decomp0 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_inj_0 = ( 
    'sdsw_tr_decomp_0_cor_err_inj_0',
    (0x834504c8, 0x834504cc),
    'sdsw tr decomp0 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_inj_1 = ( 
    'sdsw_tr_decomp_0_cor_err_inj_1',
    (0x834504cc, 0x834504d0),
    'sdsw tr decomp0 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_inj_0 = ( 
    'sdsw_tr_decomp_0_uncor_err_inj_0',
    (0x834504d0, 0x834504d4),
    'sdsw tr decomp0 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_inj_1 = ( 
    'sdsw_tr_decomp_0_uncor_err_inj_1',
    (0x834504d4, 0x834504d8),
    'sdsw tr decomp0 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_clr_0 = ( 
    'sdsw_tr_decomp_0_cor_err_clr_0',
    (0x834504d8, 0x834504dc),
    'sdsw tr decomp0 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_clr_1 = ( 
    'sdsw_tr_decomp_0_cor_err_clr_1',
    (0x834504dc, 0x834504e0),
    'sdsw tr decomp0 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_clr_0 = ( 
    'sdsw_tr_decomp_0_uncor_err_clr_0',
    (0x834504e0, 0x834504e4),
    'sdsw tr decomp0 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_clr_1 = ( 
    'sdsw_tr_decomp_0_uncor_err_clr_1',
    (0x834504e4, 0x834504e8),
    'sdsw tr decomp0 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_0 = ( 
    'sdsw_tr_decomp_0_cor_err_0',
    (0x834504e8, 0x834504ec),
    'sdsw tr decomp0 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_cor_err_1 = ( 
    'sdsw_tr_decomp_0_cor_err_1',
    (0x834504ec, 0x834504f0),
    'sdsw tr decomp0 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_0 = ( 
    'sdsw_tr_decomp_0_uncor_err_0',
    (0x834504f0, 0x834504f4),
    'sdsw tr decomp0 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_0_uncor_err_1 = ( 
    'sdsw_tr_decomp_0_uncor_err_1',
    (0x834504f4, 0x834504f8),
    'sdsw tr decomp0 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_ecc_en_0 = ( 
    'sdsw_tr_decomp_1_ecc_en_0',
    (0x834504f8, 0x834504fc),
    'sdsw tr decomp1 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_ecc_en_1 = ( 
    'sdsw_tr_decomp_1_ecc_en_1',
    (0x834504fc, 0x83450500),
    'sdsw tr decomp1 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_inj_0 = ( 
    'sdsw_tr_decomp_1_cor_err_inj_0',
    (0x83450500, 0x83450504),
    'sdsw tr decomp1 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_inj_1 = ( 
    'sdsw_tr_decomp_1_cor_err_inj_1',
    (0x83450504, 0x83450508),
    'sdsw tr decomp1 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_inj_0 = ( 
    'sdsw_tr_decomp_1_uncor_err_inj_0',
    (0x83450508, 0x8345050c),
    'sdsw tr decomp1 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_inj_1 = ( 
    'sdsw_tr_decomp_1_uncor_err_inj_1',
    (0x8345050c, 0x83450510),
    'sdsw tr decomp1 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_clr_0 = ( 
    'sdsw_tr_decomp_1_cor_err_clr_0',
    (0x83450510, 0x83450514),
    'sdsw tr decomp1 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_clr_1 = ( 
    'sdsw_tr_decomp_1_cor_err_clr_1',
    (0x83450514, 0x83450518),
    'sdsw tr decomp1 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_clr_0 = ( 
    'sdsw_tr_decomp_1_uncor_err_clr_0',
    (0x83450518, 0x8345051c),
    'sdsw tr decomp1 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_clr_1 = ( 
    'sdsw_tr_decomp_1_uncor_err_clr_1',
    (0x8345051c, 0x83450520),
    'sdsw tr decomp1 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_0 = ( 
    'sdsw_tr_decomp_1_cor_err_0',
    (0x83450520, 0x83450524),
    'sdsw tr decomp1 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_cor_err_1 = ( 
    'sdsw_tr_decomp_1_cor_err_1',
    (0x83450524, 0x83450528),
    'sdsw tr decomp1 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_0 = ( 
    'sdsw_tr_decomp_1_uncor_err_0',
    (0x83450528, 0x8345052c),
    'sdsw tr decomp1 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsw_tr_decomp_1_uncor_err_1 = ( 
    'sdsw_tr_decomp_1_uncor_err_1',
    (0x8345052c, 0x83450530),
    'sdsw tr decomp1 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_ecc_en_0 = ( 
    'sdsr_tr_decomp_0_ecc_en_0',
    (0x83450530, 0x83450534),
    'sdsr tr decomp0 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_ecc_en_1 = ( 
    'sdsr_tr_decomp_0_ecc_en_1',
    (0x83450534, 0x83450538),
    'sdsr tr decomp0 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_inj_0 = ( 
    'sdsr_tr_decomp_0_cor_err_inj_0',
    (0x83450538, 0x8345053c),
    'sdsr tr decomp0 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_inj_1 = ( 
    'sdsr_tr_decomp_0_cor_err_inj_1',
    (0x8345053c, 0x83450540),
    'sdsr tr decomp0 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_inj_0 = ( 
    'sdsr_tr_decomp_0_uncor_err_inj_0',
    (0x83450540, 0x83450544),
    'sdsr tr decomp0 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_inj_1 = ( 
    'sdsr_tr_decomp_0_uncor_err_inj_1',
    (0x83450544, 0x83450548),
    'sdsr tr decomp0 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_clr_0 = ( 
    'sdsr_tr_decomp_0_cor_err_clr_0',
    (0x83450548, 0x8345054c),
    'sdsr tr decomp0 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_clr_1 = ( 
    'sdsr_tr_decomp_0_cor_err_clr_1',
    (0x8345054c, 0x83450550),
    'sdsr tr decomp0 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_clr_0 = ( 
    'sdsr_tr_decomp_0_uncor_err_clr_0',
    (0x83450550, 0x83450554),
    'sdsr tr decomp0 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_clr_1 = ( 
    'sdsr_tr_decomp_0_uncor_err_clr_1',
    (0x83450554, 0x83450558),
    'sdsr tr decomp0 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_0 = ( 
    'sdsr_tr_decomp_0_cor_err_0',
    (0x83450558, 0x8345055c),
    'sdsr tr decomp0 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_cor_err_1 = ( 
    'sdsr_tr_decomp_0_cor_err_1',
    (0x8345055c, 0x83450560),
    'sdsr tr decomp0 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_0 = ( 
    'sdsr_tr_decomp_0_uncor_err_0',
    (0x83450560, 0x83450564),
    'sdsr tr decomp0 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_0_uncor_err_1 = ( 
    'sdsr_tr_decomp_0_uncor_err_1',
    (0x83450564, 0x83450568),
    'sdsr tr decomp0 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_ecc_en_0 = ( 
    'sdsr_tr_decomp_1_ecc_en_0',
    (0x83450568, 0x8345056c),
    'sdsr tr decomp1 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_ecc_en_1 = ( 
    'sdsr_tr_decomp_1_ecc_en_1',
    (0x8345056c, 0x83450570),
    'sdsr tr decomp1 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_inj_0 = ( 
    'sdsr_tr_decomp_1_cor_err_inj_0',
    (0x83450570, 0x83450574),
    'sdsr tr decomp1 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_inj_1 = ( 
    'sdsr_tr_decomp_1_cor_err_inj_1',
    (0x83450574, 0x83450578),
    'sdsr tr decomp1 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_inj_0 = ( 
    'sdsr_tr_decomp_1_uncor_err_inj_0',
    (0x83450578, 0x8345057c),
    'sdsr tr decomp1 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_inj_1 = ( 
    'sdsr_tr_decomp_1_uncor_err_inj_1',
    (0x8345057c, 0x83450580),
    'sdsr tr decomp1 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_clr_0 = ( 
    'sdsr_tr_decomp_1_cor_err_clr_0',
    (0x83450580, 0x83450584),
    'sdsr tr decomp1 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_clr_1 = ( 
    'sdsr_tr_decomp_1_cor_err_clr_1',
    (0x83450584, 0x83450588),
    'sdsr tr decomp1 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_clr_0 = ( 
    'sdsr_tr_decomp_1_uncor_err_clr_0',
    (0x83450588, 0x8345058c),
    'sdsr tr decomp1 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_clr_1 = ( 
    'sdsr_tr_decomp_1_uncor_err_clr_1',
    (0x8345058c, 0x83450590),
    'sdsr tr decomp1 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_0 = ( 
    'sdsr_tr_decomp_1_cor_err_0',
    (0x83450590, 0x83450594),
    'sdsr tr decomp1 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_cor_err_1 = ( 
    'sdsr_tr_decomp_1_cor_err_1',
    (0x83450594, 0x83450598),
    'sdsr tr decomp1 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_0 = ( 
    'sdsr_tr_decomp_1_uncor_err_0',
    (0x83450598, 0x8345059c),
    'sdsr tr decomp1 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_1_uncor_err_1 = ( 
    'sdsr_tr_decomp_1_uncor_err_1',
    (0x8345059c, 0x834505a0),
    'sdsr tr decomp1 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_ecc_en_0 = ( 
    'sdsr_tr_decomp_2_ecc_en_0',
    (0x834505a0, 0x834505a4),
    'sdsr tr decomp0 mem_ecc_en_0',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_ecc_en_1 = ( 
    'sdsr_tr_decomp_2_ecc_en_1',
    (0x834505a4, 0x834505a8),
    'sdsr tr decomp0 mem_ecc_en_1',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_inj_0 = ( 
    'sdsr_tr_decomp_2_cor_err_inj_0',
    (0x834505a8, 0x834505ac),
    'sdsr tr decomp0 mem_cor_err_inj_0',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_inj_1 = ( 
    'sdsr_tr_decomp_2_cor_err_inj_1',
    (0x834505ac, 0x834505b0),
    'sdsr tr decomp0 mem_cor_err_inj_1',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_inj_0 = ( 
    'sdsr_tr_decomp_2_uncor_err_inj_0',
    (0x834505b0, 0x834505b4),
    'sdsr tr decomp0 mem_uncor_err_inj_0',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_inj_1 = ( 
    'sdsr_tr_decomp_2_uncor_err_inj_1',
    (0x834505b4, 0x834505b8),
    'sdsr tr decomp0 mem_uncor_err_inj_1',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_clr_0 = ( 
    'sdsr_tr_decomp_2_cor_err_clr_0',
    (0x834505b8, 0x834505bc),
    'sdsr tr decomp0 mem_cor_err_clr_0',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_clr_1 = ( 
    'sdsr_tr_decomp_2_cor_err_clr_1',
    (0x834505bc, 0x834505c0),
    'sdsr tr decomp0 mem_cor_err_clr_1',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clear correctable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_clr_0 = ( 
    'sdsr_tr_decomp_2_uncor_err_clr_0',
    (0x834505c0, 0x834505c4),
    'sdsr tr decomp0 mem_uncor_err_clr_0',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_clr_1 = ( 
    'sdsr_tr_decomp_2_uncor_err_clr_1',
    (0x834505c4, 0x834505c8),
    'sdsr tr decomp0 mem_uncor_err_clr_1',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clear uncorrectable error .'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_0 = ( 
    'sdsr_tr_decomp_2_cor_err_0',
    (0x834505c8, 0x834505cc),
    'sdsr tr decomp0 mem_cor_err_0',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_cor_err_1 = ( 
    'sdsr_tr_decomp_2_cor_err_1',
    (0x834505cc, 0x834505d0),
    'sdsr tr decomp0 mem_cor_err_1',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_0 = ( 
    'sdsr_tr_decomp_2_uncor_err_0',
    (0x834505d0, 0x834505d4),
    'sdsr tr decomp0 mem_uncor_err_0',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_tr_decomp_2_uncor_err_1 = ( 
    'sdsr_tr_decomp_2_uncor_err_1',
    (0x834505d4, 0x834505d8),
    'sdsr tr decomp0 mem_uncor_err_1',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_ecc_en = ( 
    'sdsr_mem_ecc_en',
    (0x83450600, 0x83450604),
    'sdsr memory ecc enable',
    [ 
       ('mem_ecc_en', 0, 31, 'set 1 to enable mem_ecc_en .\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_cor_err_inj = ( 
    'sdsr_mem_cor_err_inj',
    (0x83450604, 0x83450608),
    'sdsr memory correctable error injection',
    [ 
       ('mem_cor_err_inj', 0, 31, 'set 1 to inject correctable error.\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_uncor_err_inj = ( 
    'sdsr_mem_uncor_err_inj',
    (0x83450608, 0x8345060c),
    'sdsr memory uncorrectable error injection',
    [ 
       ('mem_uncor_err_inj', 0, 31, 'set 1 to inject uncorrectable error.\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_cor_err_clr = ( 
    'sdsr_mem_cor_err_clr',
    (0x8345060c, 0x83450610),
    'sdsr memory correctable error status clear',
    [ 
       ('mem_cor_err_clr', 0, 31, 'set 1 to clr correctable error. Auto-clear to 0 at the next cycle\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_uncor_err_clr = ( 
    'sdsr_mem_uncor_err_clr',
    (0x83450610, 0x83450614),
    'sdsr memory uncorrectable error status clear',
    [ 
       ('mem_uncor_err_clr', 0, 31, 'set 1 to clr uncorrectable error. Auto-clear to 0 at the next cycle\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_cor_err = ( 
    'sdsr_mem_cor_err',
    (0x83450614, 0x83450618),
    'sdsr memory correctable error status',
    [ 
       ('mem_cor_err', 0, 31, 'memory correctable error status.\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sdsr_mem_uncor_err = ( 
    'sdsr_mem_uncor_err',
    (0x83450618, 0x8345061c),
    'sdsr memory uncorrectable error status',
    [ 
       ('mem_uncor_err', 0, 31, 'memory uncorrectable error status.\n              bit0: sds_s1 memory fifo;\n              bit1: sds_s2 memory fifo;\n              bit2: shim_rdma ch0 memory fifo;\n              bit3: shim_rdma ch1 memory fifo;\n              bit4: shim_rdma ch2 memory fifo;\n              bit5: shim_rdma ch3 memory fifo;\n              bit6: SM4 input memory;\n              bit7: SM4 output memory;\n              Others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_sds_ip_clock_enable = ( 
    'sds_ip_clock_enable',
    (0x8345061c, 0x83450620),
    'sds IP clock gate enable Register',
    [ 
       ('tr_comp_cge', 0, 0, 'set 1 to enable sdsw tr_comp and sdsr tr_decomp clock.'),
       ('tr_decomp_cge', 1, 1, 'set 1 to enable sdsw tr_decomp  clock.'),
       ('aes_cge', 2, 2, 'set 1 to enable AES  clock.'),
       ('sm4_cge', 3, 3, 'set 1 to enable SM4 clock.'),
       ('pat_cge', 4, 4, 'set 1 to enable pattern encoder and decoder clock.'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		chip_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_scratch_lo = ( 
    'scratch_lo',
    (0x83400000, 0x83400004),
    'Scracth Register; Lower 32 bits',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scratch_hi = ( 
    'scratch_hi',
    (0x83400004, 0x83400008),
    'Scracth Register; Higher 32 bits',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_csr_pio_timeout = ( 
    'csr_pio_timeout',
    (0x83400010, 0x83400014),
    "CSR Timeout Register.\n            When there is no reponse after timeout, write is dropped and 32'hDEADBEEF is returned for read.\n            Value of 0 means no timeout.",
    [ 
       ('MASK_ENABLE', 31, 31, '0: MASK timeout flag, 1: UNMASK timeout feature, Default : Value 0'),
       ('cycle', 0, 30, 'PCIe Clock Cycles'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_control_0 = ( 
    'chip_control_0',
    (0x83400020, 0x83400024),
    'Chip Control Register 0.',
    [ 
       ('Reserved0', 0, 3, 'Reserved'),
       ('ddr0_parity_enable', 4, 4, 'Enable DDR0 P2 parity check.'),
       ('ddr1_parity_enable', 8, 8, 'Enable DDR1 P2 parity check.'),
       ('Reserved1', 9, 31, 'Reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_control_1 = ( 
    'chip_control_1',
    (0x83400024, 0x83400028),
    'Chip Control Register 1.',
    [ 
       ('aes_tweak_step', 0, 31, 'AES tweak step value for tweak update per cycle.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_0 = ( 
    'LBA_mask_0',
    (0x83400030, 0x83400034),
    'LBA Mask Register 0.',
    [ 
       ('crc_gen_l', 0, 31, 'Lower 32-bit LBA mask for CRC generation.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_1 = ( 
    'LBA_mask_1',
    (0x83400034, 0x83400038),
    'LBA Mask Register 1.',
    [ 
       ('crc_gen_h', 0, 31, 'Higher 32-bit LBA mask for CRC generation.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_2 = ( 
    'LBA_mask_2',
    (0x83400038, 0x8340003c),
    'LBA Mask Register 2.',
    [ 
       ('crc_chk_l', 0, 31, 'Lower 32-bit LBA mask for CRC Check.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_3 = ( 
    'LBA_mask_3',
    (0x8340003c, 0x83400040),
    'LBA Mask Register 3.',
    [ 
       ('crc_chk_h', 0, 31, 'Higher 32-bit LBA mask for CRC Check.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_4 = ( 
    'LBA_mask_4',
    (0x83400040, 0x83400044),
    'LBA Mask Register 4.',
    [ 
       ('lba_comp_l', 0, 31, 'Lower 32-bit LBA mask for LBA compare.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_LBA_mask_5 = ( 
    'LBA_mask_5',
    (0x83400044, 0x83400048),
    'LBA Mask Register 5.',
    [ 
       ('lba_comp_h', 0, 31, 'Higher 32-bit LBA mask for LBA compare.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_status = ( 
    'err_stat_intr_status',
    (0x83400050, 0x83400054),
    'Error State Interrupt Status Register\n            Write 1 to clear',
    [ 
       ('vec', 0, 31, 'Interrupt Status:\n                bit[0:0]   ddr0_p2_s wdata parity error (IRQ) \n                bit[4:1]   gdma parity error(IRQ)\n                bit[8:5]   sysdma0 parity error(IRQ)\n                bit[12:9]  sysdma1 parity error(IRQ)\n                bit[13:13] ddr1_p2_s wdata parity error (IRQ)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_mask = ( 
    'err_stat_intr_mask',
    (0x83400054, 0x83400058),
    'Error State Interrupt Mask Register',
    [ 
       ('vec', 0, 31, "Error State_Interrupt Mask\n              Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_rc = ( 
    'err_stat_intr_rc',
    (0x83400058, 0x8340005c),
    'Error State Interrupt Read to Clear Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_err_stat_intr_shadow = ( 
    'err_stat_intr_shadow',
    (0x8340005c, 0x83400060),
    'Error State Interrupt Shadow Register',
    [ 
       ('vec', 0, 31, 'Interrupts'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddr0_parity_addr_0 = ( 
    'ddr0_parity_addr_0',
    (0x83400060, 0x83400064),
    'DDR 0 parity check failed address log  Register 0',
    [ 
       ('ddr_addr_0', 0, 31, 'ddr parity address log lower 32 bits'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddr0_parity_addr_1 = ( 
    'ddr0_parity_addr_1',
    (0x83400064, 0x83400068),
    'DDR 0 parity check failed address log  Register 1',
    [ 
       ('ddr_addr_1', 0, 31, 'ddr parity address log higher bits'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_mem_ctrl_0 = ( 
    'chip_mem_ctrl_0',
    (0x8340006c, 0x83400070),
    'CHIP Memory Control Register 0',
    [ 
       ('ecc_en', 0, 15, 'ECC/parity enable control\n              Bit 0: gdma fifo mem\n              Bit 1: sysdma fifo mem\n              others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_mem_err_inj_en = ( 
    'chip_mem_err_inj_en',
    (0x83400070, 0x83400074),
    'CHIP Memory Error Inject Register',
    [ 
       ('val', 0, 1, "2'h0: no error injection;\n              2'h1: 1 bit ecc error injection;\n              others: reserved"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_mem_err_inj_sel = ( 
    'chip_mem_err_inj_sel',
    (0x83400074, 0x83400078),
    'CHIP Memory Error Inject Select Register',
    [ 
       ('sel', 0, 7, "8'h0: gdma FIFO mem\n              8'h1: sysdma FIFO mem\n              others: reserved"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_chip_mem_err_inj_stat_0 = ( 
    'chip_mem_err_inj_stat_0',
    (0x83400078, 0x8340007c),
    'CHIP Memory Error Inject Status Register 0',
    [ 
       ('cor_err', 0, 15, 'Bit 0: gdma ch0 fifo error\n              Bit 1: gdma ch1 fifo  error\n              Bit 2: gdma ch2 fifo  error\n              Bit 3: gdma ch3 fifo  error\n              Bit 4: sysdma ch0 fifo error      \n              Bit 5: sysdma ch1 fifo error\n              Bit 6: sysdma ch2 fifo error\n              Bit 7: sysdma ch3 fifo error\n              others: reserved'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddr1_parity_addr_0 = ( 
    'ddr1_parity_addr_0',
    (0x83400080, 0x83400084),
    'DDR 1 parity check failed address log  Register 0',
    [ 
       ('ddr_addr_0', 0, 31, 'ddr parity address log lower 32 bits'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_ddr1_parity_addr_1 = ( 
    'ddr1_parity_addr_1',
    (0x83400084, 0x83400088),
    'DDR 1 parity check failed address log  Register 1',
    [ 
       ('ddr_addr_1', 0, 31, 'ddr parity address log higher bits'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		pss_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_pcie_pio_indir_addr = ( 
    'pcie_pio_indir_addr',
    (0x83504000, 0x83504004),
    '[axi_clk] PCIe PIO Address Register',
    [ 
       ('csraddr', 0, 31, 'CSR Address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_pio_indir_wr = ( 
    'pcie_pio_indir_wr',
    (0x83504004, 0x83504008),
    'PCIe PIO CSR Write Register\n            Write to this register from PCIe will trigger a CSR write with "write data" to the register with address in "address register".',
    [ 
       ('data', 0, 31, 'CSR Write Data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_pio_indir_rd = ( 
    'pcie_pio_indir_rd',
    (0x83504008, 0x8350400c),
    'PCIe PIO CSR Read Register\n            Read to this register from PCIe will read the value from the register with address in "address register". \n            Read to this register from FW will get the value of last PCIe read to this register. \n            Write to this register has no effect.',
    [ 
       ('data', 0, 31, 'CSR Read Data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_pio_indir_status = ( 
    'pcie_pio_indir_status',
    (0x8350400c, 0x83504010),
    'PCIe PIO Status Register',
    [ 
       ('hresp', 1, 1, 'The value of 1 indicates NACK'),
       ('misaligned', 0, 0, 'Misaligned register access'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_pio_indir_addr_hi = ( 
    'pcie_pio_indir_addr_hi',
    (0x83504010, 0x83504014),
    '[axi_clk] PCIe PIO Address Register',
    [ 
       ('csraddr', 0, 31, 'CSR Address'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_axinic_offset_lo = ( 
    'pcie_axinic_offset_lo',
    (0x83504014, 0x83504018),
    '[axi_clk] PCIe AXI Offset Register; The requests from 64KB-128KB is redirected to NIC with this offset added',
    [ 
       ('val', 0, 31, 'Address Offset'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_axinic_offset_hi = ( 
    'pcie_axinic_offset_hi',
    (0x83504018, 0x8350401c),
    '[axi_clk] PCIe AXI Offset Register; The requests from 64KB-128KB is redirected to NIC with this offset added',
    [ 
       ('val', 0, 31, 'Address Offset'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_mailbox = ( 
    'pcie_mailbox',
    (0x83505000, 0x83505080),
    'PCIe Mailbox Registe\n            For ECO10 TRAC883, pcie_mailbox[28]~pcie_mailbox[31](the addr of these four registers are:(0x24105070 ~ 0x2410507C)) used for fis_s2/s3 addr translate.\n            {csr_pcie_mailbox_reg[29], csr_pcie_mailbox_reg[28][31:20]} used as the high 44bits of fis_s2,\n            {csr_pcie_mailbox_reg[31], csr_pcie_mailbox_reg[30][31:20]} used as the high 44bits of fis_s3,',
    [ 
    ], 
    0x4,
    0x20,
    0,
    )
reg_inst0_tl_cfg_1 = ( 
    'inst0_tl_cfg_1',
    (0x83506000, 0x83506004),
    'PCIe Port 0 TL Config Register 1',
    [ 
       ('report_hotplug', 0, 15, 'TL Report Hot Plug Event (reserved for Endpoint)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_tl_cfg_1 = ( 
    'inst1_tl_cfg_1',
    (0x83506004, 0x83506008),
    'PCIe Port 1 TL Config Register 1',
    [ 
       ('report_hotplug', 0, 15, 'TL Report Hot Plug Event (reserved for Endpoint)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_lane_mux = ( 
    'lane_mux',
    (0x83506008, 0x8350600c),
    'TBD',
    [ 
       ('mux_cfg', 0, 31, 'TBD'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_bw_cfg = ( 
    'pcie_bw_cfg',
    (0x8350600c, 0x83506010),
    'PCIE BW CFG Register',
    [ 
       ('inst0_bw_cfg', 0, 15, 'Inst0 Bandwidth Config'),
       ('inst1_bw_cfg', 16, 31, 'Inst1 Bandwidth Config'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_pipe_cfg = ( 
    'pcie_pipe_cfg',
    (0x83506010, 0x83506014),
    'PCIE PIPE CFG Register',
    [ 
       ('inst0_cg_cfg', 0, 0, 'Inst0 Clock gating configuration Config'),
       ('inst1_cg_cfg', 1, 1, 'Inst1 clock gating configure'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scratch_lo = ( 
    'scratch_lo',
    (0x83508010, 0x83508014),
    'Scracth Register; Lower 32 bits',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_scratch_hi = ( 
    'scratch_hi',
    (0x83508014, 0x83508018),
    'Scracth Register; Higher 32 bits',
    [ 
       ('val', 0, 31, 'value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_port0_link_status = ( 
    'pcie_port0_link_status',
    (0x83508018, 0x8350801c),
    'PCIe Port0 Link Status Register',
    [ 
       ('pcie_ltssmstate', 0, 4, "PCIe LTSSM State\n              'h00: Detect.Quiet\n              'h01: Detect.Active\n              'h02: Polling.Active\n              'h03: Polling.Compliance\n              'h04: Polling.Configuration\n              'h05: Configuration.Linkwidth.Start\n              'h06: Configuration.Linkwidth.Accept \n              'h07: Configuration.Lanenum.Wait\n              'h08: Configuration.Lanenum.Accept\n              'h09: Configuration.Complete\n              'h0A: Configuration.Idle\n              'h0B: Recovery.RcvrLock\n              'h0C: Recovery.RcvrLock\n              'h0D: Recovery.Speed\n              'h0E: Recovery.RcvrCfg\n              'h0F: Recovery.Idle\n              'h10: L0\n              'h11: L0s\n              'h12: L1.Entry\n              'h13: L1.Idle\n              'h14: L2.Idle/L2.TransmitWake\n              'h15: RSVD\n              'h16: DISABLED\n              'h17: Loopback.Entry\n              'h18: Loopback.Active\n              'h19: Loopback.Exit\n              'h1A: HotReset"),
       ('pcie_lane_act', 8, 11, "PCIe Active Lanes\n              4'b0001: 1 lane\n              4'b0010: 2 lanes\n              4'b0100: 4 lanes\n              4'b1000: 8 lanes"),
       ('pcie_currentspeed', 12, 14, "PCIe Current Speed\n              3'd1: Gen1\n              3'd2: Gen2\n              3'd3: Gen3\n              3'd4: Gen4"),
       ('pcie_dlup', 30, 30, 'Indicate PCIe Data Link is up'),
       ('pcie_in_l0', 31, 31, 'Indicate PCIe is in L0 state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_port1_link_status = ( 
    'pcie_port1_link_status',
    (0x8350801c, 0x83508020),
    'PCIe Port1 Link Status Register',
    [ 
       ('pcie_ltssmstate', 0, 4, "PCIe LTSSM State\n              'h00: Detect.Quiet\n              'h01: Detect.Active\n              'h02: Polling.Active\n              'h03: Polling.Compliance\n              'h04: Polling.Configuration\n              'h05: Configuration.Linkwidth.Start\n              'h06: Configuration.Linkwidth.Accept \n              'h07: Configuration.Lanenum.Wait\n              'h08: Configuration.Lanenum.Accept\n              'h09: Configuration.Complete\n              'h0A: Configuration.Idle\n              'h0B: Recovery.RcvrLock\n              'h0C: Recovery.RcvrLock\n              'h0D: Recovery.Speed\n              'h0E: Recovery.RcvrCfg\n              'h0F: Recovery.Idle\n              'h10: L0\n              'h11: L0s\n              'h12: L1.Entry\n              'h13: L1.Idle\n              'h14: L2.Idle/L2.TransmitWake\n              'h15: RSVD\n              'h16: DISABLED\n              'h17: Loopback.Entry\n              'h18: Loopback.Active\n              'h19: Loopback.Exit\n              'h1A: HotReset"),
       ('pcie_lane_act', 8, 11, "PCIe Active Lanes\n              4'b0001: 1 lane\n              4'b0010: 2 lanes\n              4'b0100: 4 lanes\n              4'b1000: 8 lanes"),
       ('pcie_currentspeed', 12, 14, "PCIe Current Speed\n              3'd1: Gen1\n              3'd2: Gen2\n              3'd3: Gen3\n              3'd4: Gen4"),
       ('pcie_dlup', 30, 30, 'Indicate PCIe Data Link is up'),
       ('pcie_in_l0', 31, 31, 'Indicate PCIe is in L0 state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_port0_status = ( 
    'pcie_port0_status',
    (0x83508028, 0x8350802c),
    'PCIe Port0 Status Register',
    [ 
       ('pcie_bus_num', 0, 7, 'Bus Number assigned by host'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_port1_status = ( 
    'pcie_port1_status',
    (0x8350802c, 0x83508030),
    'PCIe Port1 Status Register',
    [ 
       ('pcie_bus_num', 0, 7, 'Bus Number assigned by host'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_err_ctrl = ( 
    'pcie_err_ctrl',
    (0x83509000, 0x83509004),
    'PCIe err control Register',
    [ 
       ('pcie_inst0_mst0_aruser_ecrc_cnt_en', 0, 0, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_inst1_mst0_aruser_ecrc_cnt_en', 1, 1, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_inst0_mst0_awuser_ecrc_cnt_en', 2, 2, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_inst1_mst0_awuser_ecrc_cnt_en', 3, 3, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_inst0_slv0_ruser_ecrc_cnt_en', 4, 4, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_inst1_slv0_ruser_ecrc_cnt_en', 5, 5, '0: dont count ecrc, pcie_ecrc_cnt_reg keep zero; 1: count enable.'),
       ('pcie_tx_pll_ready_out_cnt_en', 6, 7, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
       ('pcie_rx_pll_ready_out_cnt_en', 8, 9, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
       ('all_pll_txready_rfc_d_cnt_en', 10, 11, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
       ('all_phy_config_done_pl_out_cnt_en', 12, 13, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
       ('all_pll_txready_s5c_re_out_cnt_en', 14, 15, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
       ('any_pll_txready_s5c_fe_out_cnt_en', 16, 17, '0: dont count err, pcie_err_cnt_reg keep zero; 1: count enable.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_tx_pll_ready_out_cnt_0 = ( 
    'pcie_tx_pll_ready_out_cnt_0',
    (0x8350901c, 0x83509020),
    'PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_tx_pll_ready_out_cnt_1 = ( 
    'pcie_tx_pll_ready_out_cnt_1',
    (0x83509020, 0x83509024),
    'PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_rx_pll_ready_out_cnt_0 = ( 
    'pcie_rx_pll_ready_out_cnt_0',
    (0x83509024, 0x83509028),
    'PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_rx_pll_ready_out_cnt_1 = ( 
    'pcie_rx_pll_ready_out_cnt_1',
    (0x83509028, 0x8350902c),
    'PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_debug_select = ( 
    'pss_debug_select',
    (0x8350ff00, 0x8350ff04),
    'pss debug select',
    [ 
       ('pss_debug_select_internal', 0, 22, 'select pss internal debug port'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_debug_monitor = ( 
    'pss_debug_monitor',
    (0x8350ff04, 0x8350ff08),
    'fis debug monitor Register.',
    [ 
       ('pss_debug_monitor', 0, 31, 'pss debug monitor Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_intr_status = ( 
    'pss_intr_status',
    (0x8350ffa0, 0x8350ffa4),
    'PSS Interrupt Status Register.',
    [ 
       ('pss_intr_status', 0, 31, 'PSS Interrupt status; Write 1 to clear; one bit per interrupt source\n              bit 7: inst1_pf_flr_req\n              bit 6: inst0_vf_flr_req\n              bit 5: inst0_pf_flr_req\n              Bit 4: inst0_pl_rstn_srst_out\n              Bit 3: inst1_pl_rstn_srst_out\n              Bit 2: inst0_tl_crstn_crst_out\n              Bit 1: inst1_tl_crstn_crst_out       \n              Bit 0: phy_agg_intr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_intr_mask = ( 
    'pss_intr_mask',
    (0x8350ffa4, 0x8350ffa8),
    'PSS Interrupt Mask Register',
    [ 
       ('pss_intr_mask', 0, 31, "Interrupt Mask, Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked, but won't generated Interrupt to CPU"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_intr_rc = ( 
    'pss_intr_rc',
    (0x8350ffa8, 0x8350ffac),
    'PSS Interrupt Read Clear Register',
    [ 
       ('pss_intr_rc', 0, 31, 'Interrupts Read clear'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_intr_shadow = ( 
    'pss_intr_shadow',
    (0x8350ffac, 0x8350ffb0),
    'PSS Interrupt Shadow Register',
    [ 
       ('pss_intr_shadow', 0, 31, 'Interrupts Shawdow Register, when write one, the status bit will be asserted'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_error_status = ( 
    'fis_error_status',
    (0x8350ffd0, 0x8350ffd4),
    'PSS Error Status Register.',
    [ 
       ('fis_error_status', 0, 10, 'PSS Error status; Write 1 to clear; one bit per error source\n              Bit 7:  fis_ahb_m_resp_err\n              Bit 6:  rderr_fis_s0\n              Bit 5:0 RSVD'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_error_mask = ( 
    'fis_error_mask',
    (0x8350ffd4, 0x8350ffd8),
    'PSS Error Mask Register',
    [ 
       ('fis_error_mask', 0, 10, "Error Mask, Mask out to interrupt\n              The value of interrupt status register won't be masked, but won't generated Interrupt to CPU"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_error_rc = ( 
    'fis_error_rc',
    (0x8350ffd8, 0x8350ffdc),
    'PSS Error Read Clear Register',
    [ 
       ('fis_error_rc', 0, 10, 'Interrupts Read clear'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_error_shadow = ( 
    'fis_error_shadow',
    (0x8350ffdc, 0x8350ffe0),
    'IS Error Shadow Register',
    [ 
       ('fis_error_shadow', 0, 10, 'PSS Error Shawdow Register, when write one, the status bit will be asserted'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_pf_hook_vf = ( 
    'inst0_pf_hook_vf',
    (0x83520000, 0x83520100),
    'Inst0 pf hook vf',
    [ 
       ('vf_base', 0, 9, 'vf base'),
       ('vf_top', 16, 25, 'vf top'),
    ], 
    0x4,
    0x40,
    1,
    )
reg_bridge_ctrl_0 = ( 
    'bridge_ctrl_0',
    (0x83520100, 0x83520104),
    'Bridge Control 0 register',
    [ 
       ('inst0_clr_cnt', 0, 0, 'inst0 clr cnt'),
       ('inst1_clr_cnt', 1, 1, 'inst1 clr cnt'),
       ('inst0_err_clr', 2, 2, 'inst0 err clr'),
       ('inst1_err_clr', 3, 3, 'inst1 err clr'),
       ('inst0_pl_pclk_sel', 8, 9, 'inst0_pl_pclk_sel'),
       ('inst1_pl_pclk_sel', 10, 11, 'inst1_pl_pclk_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_test_in_bridge = ( 
    'inst0_test_in_bridge',
    (0x83520104, 0x83520108),
    'Inst0 test in register',
    [ 
       ('val', 0, 31, 'test value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_test_in_bridge = ( 
    'inst1_test_in_bridge',
    (0x83520108, 0x8352010c),
    'Inst1 test in register',
    [ 
       ('val', 0, 31, 'test value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_k_gen_0 = ( 
    'inst0_k_gen_0',
    (0x83520110, 0x83520114),
    'Inst0 key gen 0 register',
    [ 
       ('val', 0, 31, '[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_k_gen_1 = ( 
    'inst0_k_gen_1',
    (0x83520114, 0x83520118),
    'Inst0 key gen 1 register',
    [ 
       ('val', 0, 31, '[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_k_gen_2 = ( 
    'inst0_k_gen_2',
    (0x83520118, 0x8352011c),
    'Inst0 key gen 2 register',
    [ 
       ('val', 0, 31, '[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_k_gen_0 = ( 
    'inst1_k_gen_0',
    (0x83520120, 0x83520124),
    'Inst1 key gen 0 register',
    [ 
       ('val', 0, 31, '[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_k_gen_1 = ( 
    'inst1_k_gen_1',
    (0x83520124, 0x83520128),
    'Inst1 key gen 1 register',
    [ 
       ('val', 0, 31, '[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_k_gen_2 = ( 
    'inst1_k_gen_2',
    (0x83520128, 0x8352012c),
    'Inst1 key gen 2 register',
    [ 
       ('val', 0, 31, '[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fsm_state_6 = ( 
    'fsm_state_6',
    (0x83521018, 0x8352101c),
    'PSS FSM States 6',
    [ 
       ('phy1_rst_st', 18, 23, 'pss phy1 reset state'),
       ('phy0_rst_st', 12, 17, 'pss phy0 reset state'),
       ('msg_rx_state', 0, 6, 'msg rx state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fsm_state_7 = ( 
    'fsm_state_7',
    (0x8352101c, 0x83521020),
    'PSS FSM States 7',
    [ 
       ('pcie_pio_state', 24, 30, 'PCIe pio state'),
       ('pcie_mulint_state', 16, 20, 'PCIe mulint state'),
       ('pcie_intx_state', 8, 12, 'PCIe intx state'),
       ('pcie_rx_state', 0, 5, 'PCIe rx state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_nvme_intr_cnt = ( 
    'nvme_intr_cnt',
    (0x8352111c, 0x83521120),
    'NVMe Interrupt Counter',
    [ 
       ('cnt', 0, 31, 'Free running counter (debug only)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl0 = ( 
    'pss_ctrl0',
    (0x83522000, 0x83522004),
    'PSS Control Register 0',
    [ 
       ('timer_thred', 0, 31, 'PF timer threshold'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl1 = ( 
    'pss_ctrl1',
    (0x83522004, 0x83522008),
    'PSS Control Register 1',
    [ 
       ('pf_flr_req_mask_l', 0, 31, 'PF FLR Req Mask [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl2 = ( 
    'pss_ctrl2',
    (0x83522008, 0x8352200c),
    'PSS Control Register 2',
    [ 
       ('pf_flr_req_mask_h', 0, 31, 'PF FLR Req Mask [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl3 = ( 
    'pss_ctrl3',
    (0x8352200c, 0x83522010),
    'PSS Control Register 3',
    [ 
       ('vf_flr_req_mask', 0, 31, 'VF FLR Req Mask'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl4 = ( 
    'pss_ctrl4',
    (0x83522010, 0x83522014),
    'PSS Control Register 4',
    [ 
       ('perst_force_mask', 0, 0, 'PERST force Mask'),
       ('time_out_force_mask', 1, 1, 'TImeout Force Mask'),
       ('pfi_force_mask', 2, 2, 'PFI Force Mask'),
       ('pfi_high_active', 3, 3, 'PFI High active'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl5 = ( 
    'pss_ctrl5',
    (0x83522014, 0x83522018),
    'PSS Control Register 5',
    [ 
       ('test_clk_sel', 0, 17, 'Test Clk sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_ctrl6 = ( 
    'pss_ctrl6',
    (0x83522018, 0x8352201c),
    'PSS Control Register 6',
    [ 
       ('serdes_dig_testmux_sel', 0, 17, 'VF FLR Req Mask'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_sbus_mst0 = ( 
    'pss_sbus_mst0',
    (0x83522050, 0x83522054),
    'PSS SBUS Master Register 0',
    [ 
       ('sbus_data_addr', 0, 7, 'sbus data address'),
       ('sbus_command', 8, 15, 'sbus command'),
       ('sbus_addr', 16, 23, 'sbus address'),
       ('sbus_start', 24, 24, 'sbus start, write 1 pulse'),
       ('sbus_write_busy', 30, 30, 'sbus write busy'),
       ('sbus_rd_done', 31, 31, 'sbus read done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_sbus_mst1 = ( 
    'pss_sbus_mst1',
    (0x83522054, 0x83522058),
    'PSS sbus mst1',
    [ 
       ('sbus_wr_data', 0, 31, 'SBUS write data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_sbus_mst2 = ( 
    'pss_sbus_mst2',
    (0x83522058, 0x8352205c),
    'PSS SBUS mst 2',
    [ 
       ('sbus_rd_data', 0, 31, 'sbus read data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_status0 = ( 
    'pss_status0',
    (0x83522100, 0x83522104),
    'PSS status register 0',
    [ 
       ('tx_parity_err', 0, 11, 'tx_parity error'),
       ('phy_pdclk_source', 16, 21, 'phy pdclk source'),
       ('test_clk_observe_out', 24, 29, 'test_clk observe out'),
       ('nvme_padding_force_before', 30, 30, 'nvme_padding_force_before'),
       ('pfi_before', 31, 31, 'pfi_before'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_ctrl = ( 
    'fis_ctrl',
    (0x83530000, 0x83530004),
    'PSS Control Register',
    [ 
       ('inst1_rc_mode', 2, 2, 'PCIe Inst1 is in RC mode'),
       ('inst1_nvme_en', 1, 1, 'Connect PCIe Inst1 to NVMe IP'),
       ('bifurcation_mode', 8, 10, "Bifurcation Mode\n             BF_U2_SINGLE_PORT : 3'b000\n             BF_U3_SINGLE_PORT : 3'b001\n             BF_DUAL_PORT      : 3'b010"),
       ('inst0_csr_pf_mode', 16, 16, "Inst0 CSR PF mode\n              1'b1: 64 PF only\n              1'b0: 32PF/32VF, 1PF/32VF, or others"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_rst_ctrl = ( 
    'fis_rst_ctrl',
    (0x83530008, 0x8353000c),
    'PSS Reset Control Register',
    [ 
       ('inst1_perst_int_mask', 29, 29, 'inst1 perst interrupt mask'),
       ('inst1_perst_func_mask', 28, 28, 'inst1 perst function mask'),
       ('inst1_perst_func_tri', 27, 27, 'inst1 perst function set'),
       ('inst0_perst_int_mask', 26, 26, 'inst0 perst interrupt mask'),
       ('inst0_perst_func_mask', 25, 25, 'inst0 perst function mask'),
       ('inst0_perst_func_tri', 24, 24, 'inst0 perst function set'),
       ('inst1_presetn_mask', 22, 22, 'Mask the output from phy inst1_presetn to PCIe inst1'),
       ('inst0_presetn_mask', 21, 21, 'Mask the output from phy inst0_presetn to PCIe inst0'),
       ('pin_pss_p1_perst_out', 20, 20, 'pin_pss_p1_perst_out'),
       ('pin_pss_p1_perst_oe', 19, 19, 'pin_pss_p1_perst_oe'),
       ('inst1_tl_rstn_mask', 12, 12, 'PCIe Inst 1 tl rstn Mask'),
       ('inst1_pl_rstn_mask', 11, 11, 'PCIe Inst 1 pl rstn Mask'),
       ('inst0_tl_rstn_mask', 10, 10, 'PCIe Inst 0 tl rstn Mask'),
       ('inst0_pl_rstn_mask', 9, 9, 'PCIe Inst 0 pl rstn Mask'),
       ('inst1_tl_crstn_crst_out_mask', 8, 8, 'PCIe Inst 1 inst1_tl_crstn_crst_out Mask'),
       ('inst1_pl_rstn_srst_out_mask', 7, 7, 'PCIe Inst 1 rstn_srst_out Mask'),
       ('inst0_pl_rstn_srst_out_mask', 6, 6, 'PCIe Inst 0 rstn_srst_out Mask'),
       ('inst1_rst_n', 5, 5, 'PCIe Inst 1 Reset (Ative Low)'),
       ('inst0_rst_n', 4, 4, 'PCIe Inst 0 Reset (Ative Low)'),
       ('phy1_pipe_reset', 3, 3, 'PIPE 1 Reset (Ative High)'),
       ('phy0_pipe_reset', 2, 2, 'PIPE 0 Reset (Ative High)'),
       ('phy1_serdes_resetn', 1, 1, 'PHY1 Serdes Reset TBD for each lanes (Ative Low)'),
       ('phy0_serdes_resetn', 0, 0, 'PHY0 Serdes Reset TBD for each lanes (Ative Low)'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_rst_status = ( 
    'fis_rst_status',
    (0x83530010, 0x83530014),
    'PSS Reset Status Register',
    [ 
       ('inst1_tl_crstn_crst_out', 3, 3, 'PCIe Inst 1 tl_crstn_crst_out'),
       ('inst0_tl_crstn_crst_out', 2, 2, 'PCIe Inst 0 tl_crstn_crst_out'),
       ('inst1_pl_rstn_srst_out', 1, 1, 'PCIe Inst 1 pl_rstn_srst_out'),
       ('inst0_pl_rstn_srst_out', 0, 0, 'PCIe Inst 0 pl_rstn_srst_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_rst_cnt_sticky = ( 
    'fis_rst_cnt_sticky',
    (0x83530014, 0x83530018),
    'PSS Reset Counter Register; Reseted by sys reset only.',
    [ 
       ('inst1_pl_mperst_cnt', 28, 31, 'inst1_pl_mperst_cnt'),
       ('inst0_pl_mperst_cnt', 24, 27, 'inst0_pl_mperst_cnt'),
       ('inst1_pl_rstn_cnt', 20, 23, 'inst1_pl_rstn_cnt'),
       ('inst0_pl_rstn_cnt', 16, 19, 'inst0_pl_rstn_cnt'),
       ('phy1_pipe_reset_cnt', 12, 15, 'phy1_pipe_reset_cnt'),
       ('phy0_pipe_reset_cnt', 8, 11, 'phy0_pipe_reset_cnt'),
       ('phy1_serdes_resetn_cnt', 4, 7, 'phy1_serdes_resetn_cnt'),
       ('phy0_serdes_resetn_cnt', 0, 3, 'phy0_serdes_resetn_cnt'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_pss_rst_cnt = ( 
    'fis_pss_rst_cnt',
    (0x83530018, 0x8353001c),
    'PCIe PIPE and PHY Reset Control Coutner; Each tick is 16 system clocks.',
    [ 
       ('cnt1', 16, 31, 'Counter 1; PIPE is under reset while SerDes is not.'),
       ('cnt0', 0, 15, 'Counter 0; Use this for PIPE/PHY config.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_pss_rst_cnt_1 = ( 
    'fis_pss_rst_cnt_1',
    (0x8353001c, 0x83530020),
    'PCIe PIPE and PHY Reset Control Coutner; Each tick is 16 system clocks.',
    [ 
       ('cnt3', 16, 31, 'Counter 3; Both PIPE and SeDes are out of reset. Waiting cnt3 for PhyStaus.'),
       ('cnt2', 0, 15, 'Counter 2; SerDes is under reset again during cnt1.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_clk_ctrl = ( 
    'fis_clk_ctrl',
    (0x83530030, 0x83530034),
    'PSS Clock Control Register',
    [ 
       ('clkbuf_1_REF_CMOS_DIS_SER', 24, 24, 'clkbuf_1_REF_CMOS_DIS_SER'),
       ('clkbuf_1_REF_CMOS_DIS2', 23, 23, 'clkbuf_1_REF_CMOS_DIS2'),
       ('clkbuf_1_REF_CMOS_DIS1', 22, 22, 'clkbuf_1_REF_CMOS_DIS1'),
       ('clkbuf_1_REF_LP_MODE', 21, 21, 'clkbuf_1_REF_LP_MODE'),
       ('clkbuf_1_BYPCLK_SERDES_SEL', 20, 20, 'clkbuf_1_BYPCLK_SERDES_SEL\n              This bit should be clear (set to 0) in bifurcation mode'),
       ('clkbuf_0_REF_CMOS_DIS_SER', 16, 16, 'clkbuf_0_REF_CMOS_DIS_SER'),
       ('clkbuf_0_REF_CMOS_DIS2', 15, 15, 'clkbuf_0_REF_CMOS_DIS2'),
       ('clkbuf_0_REF_CMOS_DIS1', 14, 14, 'clkbuf_0_REF_CMOS_DIS1'),
       ('clkbuf_0_REF_LP_MODE', 13, 13, 'clkbuf_0_REF_LP_MODE'),
       ('clkbuf_0_BYPCLK_SERDES_SEL', 12, 12, 'clkbuf_0_BYPCLK_SERDES_SEL'),
       ('xtal_0_REF_CMOS_DIS_SER', 11, 11, 'xtal_0_REF_CMOS_DIS_SER'),
       ('xtal_0_REF_CMOS_DIS2', 10, 10, 'xtal_0_REF_CMOS_DIS2'),
       ('xtal_0_REF_LP_MODE', 9, 9, 'xtal_0_REF_LP_MODE'),
       ('xtal_0_BYPCLK_SERDES_SEL', 8, 8, 'xtal_0_BYPCLK_SERDES_SEL'),
       ('phy1_refclk_secmos1_dig_sel', 7, 7, 'phy1_refclk_secmos1_dig_sel\n              This bit should be set in bifurcation mode'),
       ('isnt1_tl_clk_gate_en_mask', 6, 6, 'This bit is ANDed with tl_clk_gate from PLDA IP.\n              Setting to 0 will disable tl_clk gating during L1/L2 state.'),
       ('isnt0_tl_clk_gate_en_mask', 5, 5, 'This bit is ANDed with tl_clk_gate from PLDA IP.\n              Setting to 0 will disable tl_clk gating during L1/L2 state.'),
       ('phy1_hclk_gate_en', 4, 4, 'AHB Clock Gate for PCIe PHY1'),
       ('isnt1_aclk_gate_en', 3, 3, 'AXI Clock Gate for PCIe Inst1'),
       ('inst1_sysclk_gate_en', 2, 2, 'System Clock Gate for PCIe Inst1/PHY1'),
       ('oc_sysclk_gate_en', 1, 1, 'System Clock Gate for OC'),
       ('oc_aclk_gate_en', 0, 0, 'AXI Clock Gate for OC'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_clk_status = ( 
    'fis_clk_status',
    (0x83530034, 0x83530038),
    'PSS Clock Status Register',
    [ 
       ('dualporten_pin', 5, 5, 'dualporten_pin'),
       ('clkbuf_1_REFCLK_RDY', 4, 4, 'clkbuf_1_REFCLK_RDY'),
       ('clkbuf_0_REFCLK_RDY', 3, 3, 'clkbuf_0_REFCLK_RDY'),
       ('xtal_0_REFCLK_RDY', 2, 2, 'xtal_0_REFCLK_RDY'),
       ('inst1_tl_clk_gate_en', 1, 1, 'TL Clock Gating Enable (Port 1).\n              This signal is asserted when the Core is in either the L1 or L2 states and both the RX and TX buffers are empty.'),
       ('inst0_tl_clk_gate_en', 0, 0, 'TL Clock Gating Enable (Port 0).\n              This signal is asserted when the Core is in either the L1 or L2 states and both the RX and TX buffers are empty.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_pf_0_flr_req = ( 
    'pcie_inst0_pf_0_flr_req',
    (0x83530040, 0x83530044),
    'PCIe Inst 0 PF [31:0] FLR Requests Register',
    [ 
       ('inst0_pf', 0, 31, 'PCIe Inst 0 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_pf_1_flr_req = ( 
    'pcie_inst0_pf_1_flr_req',
    (0x83530044, 0x83530048),
    'PCIe Inst 0 PF [63:32] FLR Requests Register',
    [ 
       ('inst0_pf', 0, 31, 'PCIe Inst 0 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_vf_flr_req = ( 
    'pcie_inst0_vf_flr_req',
    (0x83530048, 0x8353004c),
    'PCIe Inst 0 VF FLR Requests Register',
    [ 
       ('inst0_vf', 0, 31, 'PCIe Inst 0 VF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst1_pf_flr_req = ( 
    'pcie_inst1_pf_flr_req',
    (0x8353004c, 0x83530050),
    'PCIe Inst 1 PF FLR Requests Register',
    [ 
       ('inst1_pf', 0, 0, 'PCIe Inst 1 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst1_vf_flr_req = ( 
    'pcie_inst1_vf_flr_req',
    (0x83530050, 0x83530054),
    'PCIe Inst 1 VF FLR Requests Register',
    [ 
       ('inst1_vf', 0, 0, 'PCIe Inst 1 VF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_pf_0_flr_ack = ( 
    'pcie_inst0_pf_0_flr_ack',
    (0x83530054, 0x83530058),
    'PCIe Inst0 PF [31:0] FLR Ack Register (FW needs to toggle it 0->1->0.)',
    [ 
       ('inst0_pf', 0, 31, 'PCIe Inst 0 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_pf_1_flr_ack = ( 
    'pcie_inst0_pf_1_flr_ack',
    (0x83530058, 0x8353005c),
    'PCIe Inst0 PF [63:32] FLR Ack Register (FW needs to toggle it 0->1->0.)',
    [ 
       ('inst0_pf', 0, 31, 'PCIe Inst 0 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst0_vf_flr_ack = ( 
    'pcie_inst0_vf_flr_ack',
    (0x83530060, 0x83530064),
    'PCIe Inst0 VF FLR Ack Register (FW needs to toggle it 0->1->0.)',
    [ 
       ('inst0_vf', 0, 31, 'PCIe Inst 0 VF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst1_pf_flr_ack = ( 
    'pcie_inst1_pf_flr_ack',
    (0x83530064, 0x83530068),
    'PCIe Inst1 PF FLR Ack Register (FW needs to toggle it 0->1->0.)',
    [ 
       ('inst1_pf', 0, 0, 'PCIe Inst 1 PF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pcie_inst1_vf_flr_ack = ( 
    'pcie_inst1_vf_flr_ack',
    (0x83530068, 0x8353006c),
    'PCIe Inst1 VF FLR Ack Register (FW needs to toggle it 0->1->0.)',
    [ 
       ('inst1_vf', 0, 0, 'PCIe Inst 1 VF FLR'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus0 = ( 
    'pss_spare_config_bus0',
    (0x83530070, 0x83530074),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus1 = ( 
    'pss_spare_config_bus1',
    (0x83530074, 0x83530078),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus2 = ( 
    'pss_spare_config_bus2',
    (0x83530078, 0x8353007c),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus3 = ( 
    'pss_spare_config_bus3',
    (0x8353007c, 0x83530080),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus4 = ( 
    'pss_spare_config_bus4',
    (0x83530080, 0x83530084),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus5 = ( 
    'pss_spare_config_bus5',
    (0x83530084, 0x83530088),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_pss_spare_config_bus6 = ( 
    'pss_spare_config_bus6',
    (0x83530088, 0x8353008c),
    'PSS Spare Config Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_pcie_test_in = ( 
    'inst0_pcie_test_in',
    (0x835300a0, 0x835300a4),
    'PCIe Port 0 Test in',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_pcie_test_in = ( 
    'inst1_pcie_test_in',
    (0x835300a4, 0x835300a8),
    'PCIe Port 1 Test in',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_pcie_test_in_errinj = ( 
    'inst0_pcie_test_in_errinj',
    (0x835300a8, 0x835300ac),
    'PCIe Port 0 Test in Errinj',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_pcie_test_in_errinj = ( 
    'inst1_pcie_test_in_errinj',
    (0x835300ac, 0x835300b0),
    'PCIe Port 1 Test in Errinj',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_tl_cfg = ( 
    'inst0_tl_cfg',
    (0x835300b0, 0x835300b4),
    'PCIe Port 0 TL Conig Register',
    [ 
       ('pm_refclk_rem', 31, 31, 'Allow Slot REFCLK Removal'),
       ('clock_freq', 8, 29, 'TL Clock Frequency'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_tl_cfg = ( 
    'inst1_tl_cfg',
    (0x835300b4, 0x835300b8),
    'PCIe Port 1 TL Conig Register',
    [ 
       ('pm_refclk_rem', 31, 31, 'Allow Slot REFCLK Removal'),
       ('clock_freq', 8, 29, 'TL Clock Frequency'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_pipe_mode = ( 
    'fis_pipe_mode',
    (0x835300b8, 0x835300bc),
    'PCIe PIPE Mode',
    [ 
       ('phy1_bifurcation', 8, 11, 'Mode for PHY1 in Bifurcation Mode'),
       ('phy1', 4, 7, 'Mode for PHY1'),
       ('phy0', 0, 3, 'Mode for PHY0.\n              Bit0: pipe_pclk_mode;\n              Bit1: pipe_asic_clk_mode;\n              Bit2: pipe_txvalid_mode;\n              Bit3: pipe_reset_mode;'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_l1ss_state = ( 
    'inst0_l1ss_state',
    (0x835300c0, 0x835300c4),
    'inst0_l1ss_state',
    [ 
       ('inst0_l1ss_state', 0, 7, 'inst0_l1ss_state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst1_l1ss_state = ( 
    'inst1_l1ss_state',
    (0x835300c4, 0x835300c8),
    'inst1_l1ss_state',
    [ 
       ('inst1_l1ss_state', 0, 3, 'inst1_l1ss_state'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_axi4_slvl_func = ( 
    'inst0_axi4_slvl_func',
    (0x83530124, 0x83530128),
    '[axi_clk] drive the func port to PLDA',
    [ 
       ('inst0_axi4_slvl_awfunc', 0, 14, 'inst0_axi4_slvl_awfunc'),
       ('inst0_axi4_slvl_arfunc', 16, 30, 'inst0_axi4_slvl_arfunc'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_inst0_func_map = ( 
    'inst0_func_map',
    (0x83530200, 0x83530280),
    'Inst0 func map',
    [ 
       ('func_map_l', 0, 15, 'first func map'),
       ('func_map_h', 16, 31, 'the second func map'),
    ], 
    0x4,
    0x20,
    1,
    )
reg_inst1_axi4_slvl_func = ( 
    'inst1_axi4_slvl_func',
    (0x83530500, 0x83530504),
    '[axi_clk] drive the func port to PLDA inst1',
    [ 
       ('inst1_axi4_slvl_awfunc', 0, 14, 'inst1_axi4_slvl_awfunc'),
       ('inst1_axi4_slvl_arfunc', 16, 30, 'inst1_axi4_slvl_arfunc'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_pll_txready_rfc_d_out_0 = ( 
    'all_pll_txready_rfc_d_out_0',
    (0x83532000, 0x83532004),
    '[ref_0_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_phy_config_done_pl_out_0 = ( 
    'all_phy_config_done_pl_out_0',
    (0x83532004, 0x83532008),
    '[ref_0_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_pll_txready_rfc_d_out_1 = ( 
    'all_pll_txready_rfc_d_out_1',
    (0x83532100, 0x83532104),
    '[ref_1_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_phy_config_done_pl_out_1 = ( 
    'all_phy_config_done_pl_out_1',
    (0x83532104, 0x83532108),
    '[ref_1_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_pll_txready_s5c_re_out_0 = ( 
    'all_pll_txready_s5c_re_out_0',
    (0x83532300, 0x83532304),
    '[sys500_0_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_any_pll_txready_s5c_fe_out_0 = ( 
    'any_pll_txready_s5c_fe_out_0',
    (0x83532304, 0x83532308),
    '[sys500_0_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_all_pll_txready_s5c_re_out_1 = ( 
    'all_pll_txready_s5c_re_out_1',
    (0x83532400, 0x83532404),
    '[sys500_1_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_any_pll_txready_s5c_fe_out_1 = ( 
    'any_pll_txready_s5c_fe_out_1',
    (0x83532404, 0x83532408),
    '[sys500_1_clk] PCIe error counter Register',
    [ 
       ('cnt', 0, 31, 'PCIe error counter Register.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_fis_phy_ctrl_misc = ( 
    'fis_phy_ctrl_misc',
    (0x835340d0, 0x835340d4),
    'PHY control misc Register',
    [ 
       ('ser_addr_offset_en', 0, 0, "This is a workaround if AXI master cannot do 16-bit access. \n              When this bit is set, address bit[1] is set to 1 so it's reading address with offset +0x2. \n              This only works for read."),
    ], 
    0x4,
    0x1,
    1,
    )
reg_phy_intr_status = ( 
    'phy_intr_status',
    (0x835340e0, 0x835340e4),
    'PHY Interrupt Status Register.',
    [ 
       ('phy_intr_status', 0, 31, 'PHY Interrupt status; Write 1 to clear; one bit per interrupt source\n              Bit[24] lsssm=1a\n              Bit[23:18] inst0_bit_lock_done\n              Bit[17:12] inst0_pl_rxelecidle\n              Bit[11: 6] inst0_phy_config_done\n              Bit[ 5: 0] inst0_tx_phyready'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_phy_intr_mask = ( 
    'phy_intr_mask',
    (0x835340e4, 0x835340e8),
    'PHY Interrupt Mask Register',
    [ 
       ('phy_intr_mask', 0, 31, "Interrupt Mask, Mask out interrupt IRQs/PINs\n              The value of interrupt status register won't be masked, but won't generated Interrupt to CPU"),
    ], 
    0x4,
    0x1,
    1,
    )
reg_phy_intr_rc = ( 
    'phy_intr_rc',
    (0x835340e8, 0x835340ec),
    'PHY Interrupt Read Clear Register',
    [ 
       ('phy_intr_rc', 0, 31, 'Interrupts Read clear'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_phy_intr_shadow = ( 
    'phy_intr_shadow',
    (0x835340ec, 0x835340f0),
    'PHY Interrupt Shadow Register',
    [ 
       ('phy_intr_shadow', 0, 31, 'Interrupts Shawdow Register, when write one, the status bit will be asserted'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_0 = ( 
    'p0l0_serdes_cfg_0',
    (0x83540000, 0x83540004),
    'PSS PHY0 Lane0 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_1 = ( 
    'p0l0_serdes_cfg_1',
    (0x83540004, 0x83540008),
    'PSS PHY0 Lane0 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_2 = ( 
    'p0l0_serdes_cfg_2',
    (0x83540008, 0x8354000c),
    'PSS PHY0 Lane0 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_3 = ( 
    'p0l0_serdes_cfg_3',
    (0x8354000c, 0x83540010),
    'PSS PHY0 Lane0 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_4 = ( 
    'p0l0_serdes_cfg_4',
    (0x83540010, 0x83540014),
    'PSS PHY0 Lane0 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_5 = ( 
    'p0l0_serdes_cfg_5',
    (0x83540014, 0x83540018),
    'PSS PHY0 Lane0 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_6 = ( 
    'p0l0_serdes_cfg_6',
    (0x83540018, 0x8354001c),
    'PSS PHY0 Lane0 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_7 = ( 
    'p0l0_serdes_cfg_7',
    (0x8354001c, 0x83540020),
    'PSS PHY0 Lane0 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_serdes_cfg_8 = ( 
    'p0l0_serdes_cfg_8',
    (0x83540020, 0x83540024),
    'PSS PHY0 Lane0 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_0 = ( 
    'p0l0_ctrl_0',
    (0x83540024, 0x83540028),
    'PSS PHY0 Lane0 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_1 = ( 
    'p0l0_ctrl_1',
    (0x83540028, 0x8354002c),
    'PSS PHY0 Lane0 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_2 = ( 
    'p0l0_ctrl_2',
    (0x8354002c, 0x83540030),
    'PSS PHY0 Lane0 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_3 = ( 
    'p0l0_ctrl_3',
    (0x83540030, 0x83540034),
    'PSS PHY0 Lane0 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_4 = ( 
    'p0l0_ctrl_4',
    (0x83540034, 0x83540038),
    'PSS PHY0 Lane0 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_5 = ( 
    'p0l0_ctrl_5',
    (0x83540038, 0x8354003c),
    'PSS PHY0 Lane0 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_6 = ( 
    'p0l0_ctrl_6',
    (0x8354003c, 0x83540040),
    'PSS PHY0 Lane0 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_7 = ( 
    'p0l0_ctrl_7',
    (0x83540040, 0x83540044),
    'PSS PHY0 Lane0 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_8 = ( 
    'p0l0_ctrl_8',
    (0x83540044, 0x83540048),
    'PSS PHY0 Lane0 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_9 = ( 
    'p0l0_ctrl_9',
    (0x83540048, 0x8354004c),
    'PSS PHY0 Lane0 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_10 = ( 
    'p0l0_ctrl_10',
    (0x8354004c, 0x83540050),
    'PSS PHY0 Lane0 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_11 = ( 
    'p0l0_ctrl_11',
    (0x83540050, 0x83540054),
    'PSS PHY0 Lane0 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_12 = ( 
    'p0l0_ctrl_12',
    (0x83540054, 0x83540058),
    'PSS PHY0 Lane0 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_13 = ( 
    'p0l0_ctrl_13',
    (0x83540058, 0x8354005c),
    'PSS PHY0 Lane0 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_14 = ( 
    'p0l0_ctrl_14',
    (0x8354005c, 0x83540060),
    'PSS PHY0 Lane0 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_15 = ( 
    'p0l0_ctrl_15',
    (0x83540060, 0x83540064),
    'PSS PHY0 Lane0 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_16 = ( 
    'p0l0_ctrl_16',
    (0x83540064, 0x83540068),
    'PSS PHY0 Lane0 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_17 = ( 
    'p0l0_ctrl_17',
    (0x83540068, 0x8354006c),
    'PSS PHY0 Lane0 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_18 = ( 
    'p0l0_ctrl_18',
    (0x8354006c, 0x83540070),
    'PSS PHY0 Lane0 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_ctrl_19 = ( 
    'p0l0_ctrl_19',
    (0x83540070, 0x83540074),
    'PSS PHY0 Lane0 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_status_0 = ( 
    'p0l0_status_0',
    (0x83540074, 0x83540078),
    'PSS PHY0 Lane0 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_status_1 = ( 
    'p0l0_status_1',
    (0x83540078, 0x8354007c),
    'PSS PHY0 Lane0 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_status_2 = ( 
    'p0l0_status_2',
    (0x8354007c, 0x83540080),
    'PSS PHY0 Lane0 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_status_3 = ( 
    'p0l0_status_3',
    (0x83540080, 0x83540084),
    'PSS PHY0 Lane0 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_status_4 = ( 
    'p0l0_status_4',
    (0x83540084, 0x83540088),
    'PSS PHY0 Lane0 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_debug_sel = ( 
    'p0l0_debug_sel',
    (0x83540088, 0x8354008c),
    'PSS PHY0 Lane0 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l0_debug_out = ( 
    'p0l0_debug_out',
    (0x8354008c, 0x83540090),
    'PSS PHY0 Lane0 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_0 = ( 
    'p0l1_serdes_cfg_0',
    (0x83541000, 0x83541004),
    'PSS PHY0 Lane1 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_1 = ( 
    'p0l1_serdes_cfg_1',
    (0x83541004, 0x83541008),
    'PSS PHY0 Lane1 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_2 = ( 
    'p0l1_serdes_cfg_2',
    (0x83541008, 0x8354100c),
    'PSS PHY0 Lane1 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_3 = ( 
    'p0l1_serdes_cfg_3',
    (0x8354100c, 0x83541010),
    'PSS PHY0 Lane1 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_4 = ( 
    'p0l1_serdes_cfg_4',
    (0x83541010, 0x83541014),
    'PSS PHY0 Lane1 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_5 = ( 
    'p0l1_serdes_cfg_5',
    (0x83541014, 0x83541018),
    'PSS PHY0 Lane1 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_6 = ( 
    'p0l1_serdes_cfg_6',
    (0x83541018, 0x8354101c),
    'PSS PHY0 Lane1 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_7 = ( 
    'p0l1_serdes_cfg_7',
    (0x8354101c, 0x83541020),
    'PSS PHY0 Lane1 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_serdes_cfg_8 = ( 
    'p0l1_serdes_cfg_8',
    (0x83541020, 0x83541024),
    'PSS PHY0 Lane1 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_0 = ( 
    'p0l1_ctrl_0',
    (0x83541024, 0x83541028),
    'PSS PHY0 Lane1 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_1 = ( 
    'p0l1_ctrl_1',
    (0x83541028, 0x8354102c),
    'PSS PHY0 Lane1 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_2 = ( 
    'p0l1_ctrl_2',
    (0x8354102c, 0x83541030),
    'PSS PHY0 Lane1 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_3 = ( 
    'p0l1_ctrl_3',
    (0x83541030, 0x83541034),
    'PSS PHY0 Lane1 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_4 = ( 
    'p0l1_ctrl_4',
    (0x83541034, 0x83541038),
    'PSS PHY0 Lane1 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_5 = ( 
    'p0l1_ctrl_5',
    (0x83541038, 0x8354103c),
    'PSS PHY0 Lane1 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_6 = ( 
    'p0l1_ctrl_6',
    (0x8354103c, 0x83541040),
    'PSS PHY0 Lane1 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_7 = ( 
    'p0l1_ctrl_7',
    (0x83541040, 0x83541044),
    'PSS PHY0 Lane1 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_8 = ( 
    'p0l1_ctrl_8',
    (0x83541044, 0x83541048),
    'PSS PHY0 Lane1 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_9 = ( 
    'p0l1_ctrl_9',
    (0x83541048, 0x8354104c),
    'PSS PHY0 Lane1 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_10 = ( 
    'p0l1_ctrl_10',
    (0x8354104c, 0x83541050),
    'PSS PHY0 Lane1 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_11 = ( 
    'p0l1_ctrl_11',
    (0x83541050, 0x83541054),
    'PSS PHY0 Lane1 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_12 = ( 
    'p0l1_ctrl_12',
    (0x83541054, 0x83541058),
    'PSS PHY0 Lane1 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_13 = ( 
    'p0l1_ctrl_13',
    (0x83541058, 0x8354105c),
    'PSS PHY0 Lane1 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_14 = ( 
    'p0l1_ctrl_14',
    (0x8354105c, 0x83541060),
    'PSS PHY0 Lane1 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_15 = ( 
    'p0l1_ctrl_15',
    (0x83541060, 0x83541064),
    'PSS PHY0 Lane1 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_16 = ( 
    'p0l1_ctrl_16',
    (0x83541064, 0x83541068),
    'PSS PHY0 Lane1 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_17 = ( 
    'p0l1_ctrl_17',
    (0x83541068, 0x8354106c),
    'PSS PHY0 Lane1 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_18 = ( 
    'p0l1_ctrl_18',
    (0x8354106c, 0x83541070),
    'PSS PHY0 Lane1 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_ctrl_19 = ( 
    'p0l1_ctrl_19',
    (0x83541070, 0x83541074),
    'PSS PHY0 Lane1 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_status_0 = ( 
    'p0l1_status_0',
    (0x83541074, 0x83541078),
    'PSS PHY0 Lane1 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_status_1 = ( 
    'p0l1_status_1',
    (0x83541078, 0x8354107c),
    'PSS PHY0 Lane1 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_status_2 = ( 
    'p0l1_status_2',
    (0x8354107c, 0x83541080),
    'PSS PHY0 Lane1 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_status_3 = ( 
    'p0l1_status_3',
    (0x83541080, 0x83541084),
    'PSS PHY0 Lane1 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_status_4 = ( 
    'p0l1_status_4',
    (0x83541084, 0x83541088),
    'PSS PHY0 Lane1 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_debug_sel = ( 
    'p0l1_debug_sel',
    (0x83541088, 0x8354108c),
    'PSS PHY0 Lane1 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l1_debug_out = ( 
    'p0l1_debug_out',
    (0x8354108c, 0x83541090),
    'PSS PHY0 Lane1 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_0 = ( 
    'p0l2_serdes_cfg_0',
    (0x83542000, 0x83542004),
    'PSS PHY0 Lane2 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_1 = ( 
    'p0l2_serdes_cfg_1',
    (0x83542004, 0x83542008),
    'PSS PHY0 Lane2 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_2 = ( 
    'p0l2_serdes_cfg_2',
    (0x83542008, 0x8354200c),
    'PSS PHY0 Lane2 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_3 = ( 
    'p0l2_serdes_cfg_3',
    (0x8354200c, 0x83542010),
    'PSS PHY0 Lane2 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_4 = ( 
    'p0l2_serdes_cfg_4',
    (0x83542010, 0x83542014),
    'PSS PHY0 Lane2 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_5 = ( 
    'p0l2_serdes_cfg_5',
    (0x83542014, 0x83542018),
    'PSS PHY0 Lane2 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_6 = ( 
    'p0l2_serdes_cfg_6',
    (0x83542018, 0x8354201c),
    'PSS PHY0 Lane2 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_7 = ( 
    'p0l2_serdes_cfg_7',
    (0x8354201c, 0x83542020),
    'PSS PHY0 Lane2 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_serdes_cfg_8 = ( 
    'p0l2_serdes_cfg_8',
    (0x83542020, 0x83542024),
    'PSS PHY0 Lane2 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_0 = ( 
    'p0l2_ctrl_0',
    (0x83542024, 0x83542028),
    'PSS PHY0 Lane2 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_1 = ( 
    'p0l2_ctrl_1',
    (0x83542028, 0x8354202c),
    'PSS PHY0 Lane2 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_2 = ( 
    'p0l2_ctrl_2',
    (0x8354202c, 0x83542030),
    'PSS PHY0 Lane2 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_3 = ( 
    'p0l2_ctrl_3',
    (0x83542030, 0x83542034),
    'PSS PHY0 Lane2 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_4 = ( 
    'p0l2_ctrl_4',
    (0x83542034, 0x83542038),
    'PSS PHY0 Lane2 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_5 = ( 
    'p0l2_ctrl_5',
    (0x83542038, 0x8354203c),
    'PSS PHY0 Lane2 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_6 = ( 
    'p0l2_ctrl_6',
    (0x8354203c, 0x83542040),
    'PSS PHY0 Lane2 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_7 = ( 
    'p0l2_ctrl_7',
    (0x83542040, 0x83542044),
    'PSS PHY0 Lane2 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_8 = ( 
    'p0l2_ctrl_8',
    (0x83542044, 0x83542048),
    'PSS PHY0 Lane2 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_9 = ( 
    'p0l2_ctrl_9',
    (0x83542048, 0x8354204c),
    'PSS PHY0 Lane2 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_10 = ( 
    'p0l2_ctrl_10',
    (0x8354204c, 0x83542050),
    'PSS PHY0 Lane2 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_11 = ( 
    'p0l2_ctrl_11',
    (0x83542050, 0x83542054),
    'PSS PHY0 Lane2 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_12 = ( 
    'p0l2_ctrl_12',
    (0x83542054, 0x83542058),
    'PSS PHY0 Lane2 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_13 = ( 
    'p0l2_ctrl_13',
    (0x83542058, 0x8354205c),
    'PSS PHY0 Lane2 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_14 = ( 
    'p0l2_ctrl_14',
    (0x8354205c, 0x83542060),
    'PSS PHY0 Lane2 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_15 = ( 
    'p0l2_ctrl_15',
    (0x83542060, 0x83542064),
    'PSS PHY0 Lane2 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_16 = ( 
    'p0l2_ctrl_16',
    (0x83542064, 0x83542068),
    'PSS PHY0 Lane2 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_17 = ( 
    'p0l2_ctrl_17',
    (0x83542068, 0x8354206c),
    'PSS PHY0 Lane2 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_18 = ( 
    'p0l2_ctrl_18',
    (0x8354206c, 0x83542070),
    'PSS PHY0 Lane2 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_ctrl_19 = ( 
    'p0l2_ctrl_19',
    (0x83542070, 0x83542074),
    'PSS PHY0 Lane2 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_status_0 = ( 
    'p0l2_status_0',
    (0x83542074, 0x83542078),
    'PSS PHY0 Lane2 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_status_1 = ( 
    'p0l2_status_1',
    (0x83542078, 0x8354207c),
    'PSS PHY0 Lane2 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_status_2 = ( 
    'p0l2_status_2',
    (0x8354207c, 0x83542080),
    'PSS PHY0 Lane2 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_status_3 = ( 
    'p0l2_status_3',
    (0x83542080, 0x83542084),
    'PSS PHY0 Lane2 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_status_4 = ( 
    'p0l2_status_4',
    (0x83542084, 0x83542088),
    'PSS PHY0 Lane2 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_debug_sel = ( 
    'p0l2_debug_sel',
    (0x83542088, 0x8354208c),
    'PSS PHY0 Lane2 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l2_debug_out = ( 
    'p0l2_debug_out',
    (0x8354208c, 0x83542090),
    'PSS PHY0 Lane2 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_0 = ( 
    'p0l3_serdes_cfg_0',
    (0x83543000, 0x83543004),
    'PSS PHY0 Lane3 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_1 = ( 
    'p0l3_serdes_cfg_1',
    (0x83543004, 0x83543008),
    'PSS PHY0 Lane3 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_2 = ( 
    'p0l3_serdes_cfg_2',
    (0x83543008, 0x8354300c),
    'PSS PHY0 Lane3 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_3 = ( 
    'p0l3_serdes_cfg_3',
    (0x8354300c, 0x83543010),
    'PSS PHY0 Lane3 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_4 = ( 
    'p0l3_serdes_cfg_4',
    (0x83543010, 0x83543014),
    'PSS PHY0 Lane3 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_5 = ( 
    'p0l3_serdes_cfg_5',
    (0x83543014, 0x83543018),
    'PSS PHY0 Lane3 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_6 = ( 
    'p0l3_serdes_cfg_6',
    (0x83543018, 0x8354301c),
    'PSS PHY0 Lane3 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_7 = ( 
    'p0l3_serdes_cfg_7',
    (0x8354301c, 0x83543020),
    'PSS PHY0 Lane3 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_serdes_cfg_8 = ( 
    'p0l3_serdes_cfg_8',
    (0x83543020, 0x83543024),
    'PSS PHY0 Lane3 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_0 = ( 
    'p0l3_ctrl_0',
    (0x83543024, 0x83543028),
    'PSS PHY0 Lane3 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_1 = ( 
    'p0l3_ctrl_1',
    (0x83543028, 0x8354302c),
    'PSS PHY0 Lane3 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_2 = ( 
    'p0l3_ctrl_2',
    (0x8354302c, 0x83543030),
    'PSS PHY0 Lane3 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_3 = ( 
    'p0l3_ctrl_3',
    (0x83543030, 0x83543034),
    'PSS PHY0 Lane3 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_4 = ( 
    'p0l3_ctrl_4',
    (0x83543034, 0x83543038),
    'PSS PHY0 Lane3 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_5 = ( 
    'p0l3_ctrl_5',
    (0x83543038, 0x8354303c),
    'PSS PHY0 Lane3 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_6 = ( 
    'p0l3_ctrl_6',
    (0x8354303c, 0x83543040),
    'PSS PHY0 Lane3 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_7 = ( 
    'p0l3_ctrl_7',
    (0x83543040, 0x83543044),
    'PSS PHY0 Lane3 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_8 = ( 
    'p0l3_ctrl_8',
    (0x83543044, 0x83543048),
    'PSS PHY0 Lane3 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_9 = ( 
    'p0l3_ctrl_9',
    (0x83543048, 0x8354304c),
    'PSS PHY0 Lane3 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_10 = ( 
    'p0l3_ctrl_10',
    (0x8354304c, 0x83543050),
    'PSS PHY0 Lane3 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_11 = ( 
    'p0l3_ctrl_11',
    (0x83543050, 0x83543054),
    'PSS PHY0 Lane3 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_12 = ( 
    'p0l3_ctrl_12',
    (0x83543054, 0x83543058),
    'PSS PHY0 Lane3 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_13 = ( 
    'p0l3_ctrl_13',
    (0x83543058, 0x8354305c),
    'PSS PHY0 Lane3 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_14 = ( 
    'p0l3_ctrl_14',
    (0x8354305c, 0x83543060),
    'PSS PHY0 Lane3 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_15 = ( 
    'p0l3_ctrl_15',
    (0x83543060, 0x83543064),
    'PSS PHY0 Lane3 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_16 = ( 
    'p0l3_ctrl_16',
    (0x83543064, 0x83543068),
    'PSS PHY0 Lane3 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_17 = ( 
    'p0l3_ctrl_17',
    (0x83543068, 0x8354306c),
    'PSS PHY0 Lane3 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_18 = ( 
    'p0l3_ctrl_18',
    (0x8354306c, 0x83543070),
    'PSS PHY0 Lane3 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_ctrl_19 = ( 
    'p0l3_ctrl_19',
    (0x83543070, 0x83543074),
    'PSS PHY0 Lane3 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_status_0 = ( 
    'p0l3_status_0',
    (0x83543074, 0x83543078),
    'PSS PHY0 Lane3 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_status_1 = ( 
    'p0l3_status_1',
    (0x83543078, 0x8354307c),
    'PSS PHY0 Lane3 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_status_2 = ( 
    'p0l3_status_2',
    (0x8354307c, 0x83543080),
    'PSS PHY0 Lane3 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_status_3 = ( 
    'p0l3_status_3',
    (0x83543080, 0x83543084),
    'PSS PHY0 Lane3 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_status_4 = ( 
    'p0l3_status_4',
    (0x83543084, 0x83543088),
    'PSS PHY0 Lane3 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_debug_sel = ( 
    'p0l3_debug_sel',
    (0x83543088, 0x8354308c),
    'PSS PHY0 Lane3 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p0l3_debug_out = ( 
    'p0l3_debug_out',
    (0x8354308c, 0x83543090),
    'PSS PHY0 Lane3 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_0 = ( 
    'p1l0_serdes_cfg_0',
    (0x83544000, 0x83544004),
    'PSS PHY1 Lane0 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_1 = ( 
    'p1l0_serdes_cfg_1',
    (0x83544004, 0x83544008),
    'PSS PHY1 Lane0 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_2 = ( 
    'p1l0_serdes_cfg_2',
    (0x83544008, 0x8354400c),
    'PSS PHY1 Lane0 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_3 = ( 
    'p1l0_serdes_cfg_3',
    (0x8354400c, 0x83544010),
    'PSS PHY1 Lane0 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_4 = ( 
    'p1l0_serdes_cfg_4',
    (0x83544010, 0x83544014),
    'PSS PHY1 Lane0 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_5 = ( 
    'p1l0_serdes_cfg_5',
    (0x83544014, 0x83544018),
    'PSS PHY1 Lane0 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_6 = ( 
    'p1l0_serdes_cfg_6',
    (0x83544018, 0x8354401c),
    'PSS PHY1 Lane0 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_7 = ( 
    'p1l0_serdes_cfg_7',
    (0x8354401c, 0x83544020),
    'PSS PHY1 Lane0 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_serdes_cfg_8 = ( 
    'p1l0_serdes_cfg_8',
    (0x83544020, 0x83544024),
    'PSS PHY1 Lane0 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_0 = ( 
    'p1l0_ctrl_0',
    (0x83544024, 0x83544028),
    'PSS PHY1 Lane0 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_1 = ( 
    'p1l0_ctrl_1',
    (0x83544028, 0x8354402c),
    'PSS PHY1 Lane0 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_2 = ( 
    'p1l0_ctrl_2',
    (0x8354402c, 0x83544030),
    'PSS PHY1 Lane0 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_3 = ( 
    'p1l0_ctrl_3',
    (0x83544030, 0x83544034),
    'PSS PHY1 Lane0 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_4 = ( 
    'p1l0_ctrl_4',
    (0x83544034, 0x83544038),
    'PSS PHY1 Lane0 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_5 = ( 
    'p1l0_ctrl_5',
    (0x83544038, 0x8354403c),
    'PSS PHY1 Lane0 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_6 = ( 
    'p1l0_ctrl_6',
    (0x8354403c, 0x83544040),
    'PSS PHY1 Lane0 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_7 = ( 
    'p1l0_ctrl_7',
    (0x83544040, 0x83544044),
    'PSS PHY1 Lane0 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_8 = ( 
    'p1l0_ctrl_8',
    (0x83544044, 0x83544048),
    'PSS PHY1 Lane0 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_9 = ( 
    'p1l0_ctrl_9',
    (0x83544048, 0x8354404c),
    'PSS PHY1 Lane0 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_10 = ( 
    'p1l0_ctrl_10',
    (0x8354404c, 0x83544050),
    'PSS PHY1 Lane0 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_11 = ( 
    'p1l0_ctrl_11',
    (0x83544050, 0x83544054),
    'PSS PHY1 Lane0 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_12 = ( 
    'p1l0_ctrl_12',
    (0x83544054, 0x83544058),
    'PSS PHY1 Lane0 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_13 = ( 
    'p1l0_ctrl_13',
    (0x83544058, 0x8354405c),
    'PSS PHY1 Lane0 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_14 = ( 
    'p1l0_ctrl_14',
    (0x8354405c, 0x83544060),
    'PSS PHY1 Lane0 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_15 = ( 
    'p1l0_ctrl_15',
    (0x83544060, 0x83544064),
    'PSS PHY1 Lane0 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_16 = ( 
    'p1l0_ctrl_16',
    (0x83544064, 0x83544068),
    'PSS PHY1 Lane0 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_17 = ( 
    'p1l0_ctrl_17',
    (0x83544068, 0x8354406c),
    'PSS PHY1 Lane0 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_18 = ( 
    'p1l0_ctrl_18',
    (0x8354406c, 0x83544070),
    'PSS PHY1 Lane0 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_ctrl_19 = ( 
    'p1l0_ctrl_19',
    (0x83544070, 0x83544074),
    'PSS PHY1 Lane0 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_status_0 = ( 
    'p1l0_status_0',
    (0x83544074, 0x83544078),
    'PSS PHY1 Lane0 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_status_1 = ( 
    'p1l0_status_1',
    (0x83544078, 0x8354407c),
    'PSS PHY1 Lane0 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_status_2 = ( 
    'p1l0_status_2',
    (0x8354407c, 0x83544080),
    'PSS PHY1 Lane0 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_status_3 = ( 
    'p1l0_status_3',
    (0x83544080, 0x83544084),
    'PSS PHY1 Lane0 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_status_4 = ( 
    'p1l0_status_4',
    (0x83544084, 0x83544088),
    'PSS PHY1 Lane0 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_debug_sel = ( 
    'p1l0_debug_sel',
    (0x83544088, 0x8354408c),
    'PSS PHY1 Lane0 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l0_debug_out = ( 
    'p1l0_debug_out',
    (0x8354408c, 0x83544090),
    'PSS PHY1 Lane0 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_0 = ( 
    'p1l1_serdes_cfg_0',
    (0x83545000, 0x83545004),
    'PSS PHY1 Lane1 Serdes Config Bus0 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_1 = ( 
    'p1l1_serdes_cfg_1',
    (0x83545004, 0x83545008),
    'PSS PHY1 Lane1 Serdes Config Bus1 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_2 = ( 
    'p1l1_serdes_cfg_2',
    (0x83545008, 0x8354500c),
    'PSS PHY1 Lane1 Serdes Config Bus2 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_3 = ( 
    'p1l1_serdes_cfg_3',
    (0x8354500c, 0x83545010),
    'PSS PHY1 Lane1 Serdes Config Bus3 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_4 = ( 
    'p1l1_serdes_cfg_4',
    (0x83545010, 0x83545014),
    'PSS PHY1 Lane1 Serdes Config Bus4 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_5 = ( 
    'p1l1_serdes_cfg_5',
    (0x83545014, 0x83545018),
    'PSS PHY1 Lane1 Serdes Config Bus5 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_6 = ( 
    'p1l1_serdes_cfg_6',
    (0x83545018, 0x8354501c),
    'PSS PHY1 Lane1 Serdes Config Bus6 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_7 = ( 
    'p1l1_serdes_cfg_7',
    (0x8354501c, 0x83545020),
    'PSS PHY1 Lane1 Serdes Config Bus7 Register',
    [ 
       ('data', 0, 31, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_serdes_cfg_8 = ( 
    'p1l1_serdes_cfg_8',
    (0x83545020, 0x83545024),
    'PSS PHY1 Lane1 Serdes Config Bus8 Register',
    [ 
       ('data', 0, 23, 'data'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_0 = ( 
    'p1l1_ctrl_0',
    (0x83545024, 0x83545028),
    'PSS PHY1 Lane1 Control0 Register',
    [ 
       ('refclk_select', 0, 0, 'Refclk Select; 0: refclk_secmos0; 1: refclk_secmos1'),
       ('refclk_select_override', 1, 1, 'Refclk Select Override; Should be the same as refclk_select'),
       ('ssc_ena', 3, 3, 'SSC ENA'),
       ('sris_ena', 4, 4, 'SRIS ENA'),
       ('pmu_pipe_clkgate_en_tiezero', 5, 5, 'Tie pmu_pipe_clkgate_en to 0.'),
       ('asyncpowerchangeack_tiezero', 6, 6, 'Tie asyncpowerchangeack_tiezero to 0.'),
       ('ser_lpbk_en', 7, 7, 'SER LPBK ENA'),
       ('inact_ser', 8, 15, 'Inactive SerDes channel'),
       ('sel_serdes_asic_clkout', 16, 23, 'sel_serdes_asic_clkout'),
       ('asic_clkpd', 24, 27, 'asic_clkpd'),
       ('tx_invert', 28, 31, 'tx_invert'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_1 = ( 
    'p1l1_ctrl_1',
    (0x83545028, 0x8354502c),
    'PSS PHY1 Lane1 Control 1 Register',
    [ 
       ('g3_bca_fom_sel', 0, 0, 'g3_bca_fom_sel'),
       ('g4_bca_fom_sel', 1, 1, 'g4_bca_fom_sel'),
       ('g5_bca_fom_sel', 2, 2, 'g5_bca_fom_sel'),
       ('force_tx_margin_comm', 3, 3, 'force_tx_margin_comm'),
       ('force_rcv_det', 4, 4, 'force_rcv_det'),
       ('rcv_det_override_value', 5, 5, 'rcv_det_override_value'),
       ('force_tx_param', 6, 6, 'force_tx_param'),
       ('force_rx_param', 7, 7, 'force_rx_param'),
       ('short_ch_pwr_ctrl', 8, 10, 'short channel power control'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_2 = ( 
    'p1l1_ctrl_2',
    (0x8354502c, 0x83545030),
    'PSS PHY1 Lane1 Control 2 Register',
    [ 
       ('pipe_reset_mode', 0, 0, 'g3_bca_fom_sel'),
       ('pipe_master_mode', 1, 1, 'g4_bca_fom_sel'),
       ('tx_master_pll', 2, 2, 'serdes_txidle_override'),
       ('serdes_clkreqn', 3, 3, 'force_tx_margin_comm'),
       ('pipe_iso_enable', 4, 4, 'force_tx_param_in'),
       ('pipe_retention_save', 5, 5, 'force_rx_param_in'),
       ('pipe_retention_rest_pclk', 6, 6, 'PIPE Refclk Frequency Select; 0: 100MHz; 1: 25MHz; 2: 31.25MHz'),
       ('pipe_retention_rest_alt_clk', 7, 7, 'g3_bca_fom_sel'),
       ('pipe_retention_rest_hclk', 8, 8, 'g4_bca_fom_sel'),
       ('serdes_refclk_off_req', 9, 9, 'serdes_txidle_override'),
       ('pipe_altclk_sel', 16, 18, 'force_tx_margin_comm'),
       ('pipe_sleep_resetn', 19, 19, 'force_tx_param_in'),
       ('pmu_pipe_clkgate_en', 20, 20, 'force_rx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_3 = ( 
    'p1l1_ctrl_3',
    (0x83545030, 0x83545034),
    'PSS PHY1 Lane1 Control 3 Register',
    [ 
       ('pipe_config_in', 0, 31, 'pipe link cfg'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_4 = ( 
    'p1l1_ctrl_4',
    (0x83545034, 0x83545038),
    'PSS PHY1 Lane1 Control 4 Register',
    [ 
       ('pipe_config2_in', 0, 31, 'pipe link cfg2'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_5 = ( 
    'p1l1_ctrl_5',
    (0x83545038, 0x8354503c),
    'PSS PHY1 Lane1 Control 5 Register',
    [ 
       ('tx_margin_in_comm_0', 0, 31, 'tx_margin_in_comm [31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_6 = ( 
    'p1l1_ctrl_6',
    (0x8354503c, 0x83545040),
    'PSS PHY1 Lane1 Control 6 Register',
    [ 
       ('tx_margin_in_comm_1', 0, 31, 'tx_margin_in_comm [63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_7 = ( 
    'p1l1_ctrl_7',
    (0x83545040, 0x83545044),
    'PSS PHY1 Lane1 Control 7 Register',
    [ 
       ('tx_margin_in_comm_2', 0, 31, 'tx_margin_in_comm [95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_8 = ( 
    'p1l1_ctrl_8',
    (0x83545044, 0x83545048),
    'PSS PHY1 Lane1 Control 8 Register',
    [ 
       ('tx_margin_in_comm_3', 0, 31, 'tx_margin_in_comm [127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_9 = ( 
    'p1l1_ctrl_9',
    (0x83545048, 0x8354504c),
    'PSS PHY1 Lane1 Control 9 Register',
    [ 
       ('tx_margin_in_comm_4', 0, 31, 'tx_margin_in_comm [159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_10 = ( 
    'p1l1_ctrl_10',
    (0x8354504c, 0x83545050),
    'PSS PHY1 Lane1 Control 10 Register',
    [ 
       ('tx_margin_in_comm_5', 0, 31, 'tx_margin_in_comm [191:160]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_11 = ( 
    'p1l1_ctrl_11',
    (0x83545050, 0x83545054),
    'PSS PHY1 Lane1 Control 11 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[31:0]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_12 = ( 
    'p1l1_ctrl_12',
    (0x83545054, 0x83545058),
    'PSS PHY1 Lane1 Control 12 Register',
    [ 
       ('rx_param_in_1', 0, 31, 'rx_param_in[63:32]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_13 = ( 
    'p1l1_ctrl_13',
    (0x83545058, 0x8354505c),
    'PSS PHY1 Lane1 Control 13 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[95:64]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_14 = ( 
    'p1l1_ctrl_14',
    (0x8354505c, 0x83545060),
    'PSS PHY1 Lane1 Control 14 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[127:96]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_15 = ( 
    'p1l1_ctrl_15',
    (0x83545060, 0x83545064),
    'PSS PHY1 Lane1 Control 15 Register',
    [ 
       ('rx_param_in_0', 0, 31, 'rx_param_in[159:128]'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_16 = ( 
    'p1l1_ctrl_16',
    (0x83545064, 0x83545068),
    'PSS PHY1 Lane1 Control 16 Register',
    [ 
       ('rx_param_in_0', 0, 19, 'rx_param_in[179:160]'),
       ('rx_param_in_dft_123_120', 20, 23, 'rx_param_in_dft_123_120'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_17 = ( 
    'p1l1_ctrl_17',
    (0x83545068, 0x8354506c),
    'PSS PHY1 Lane1 Control 17 Register',
    [ 
       ('tx_param_in', 0, 31, 'tx_param_in'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_18 = ( 
    'p1l1_ctrl_18',
    (0x8354506c, 0x83545070),
    'PSS PHY1 Lane1 Control 18 Register',
    [ 
       ('tx_sparein', 0, 7, 'tx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_ctrl_19 = ( 
    'p1l1_ctrl_19',
    (0x83545070, 0x83545074),
    'PSS PHY1 Lane1 Control 19 Register',
    [ 
       ('rx_sparein', 0, 7, 'rx_sparein'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_status_0 = ( 
    'p1l1_status_0',
    (0x83545074, 0x83545078),
    'PSS PHY1 Lane1 Status 0 Register',
    [ 
       ('rate_o', 0, 3, 'rate_o'),
       ('bit_lock_done', 4, 4, 'bit_lock_done'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_status_1 = ( 
    'p1l1_status_1',
    (0x83545078, 0x8354507c),
    'PSS PHY1 Lane1 Status 1 Register',
    [ 
       ('tx_pll_ready', 0, 0, 'bit_lock_done'),
       ('rx_pll_ready', 1, 1, 'rate_o'),
       ('width_o', 4, 5, 'width_o'),
       ('serdes_refclk_off_ack', 8, 8, 'serdes_refclk_off_ack'),
       ('allow_altclk_off', 9, 9, 'allow_altclk_off'),
       ('allow_vddh_off', 10, 10, 'allow_vddh_off'),
       ('allow_vdda_off', 11, 11, 'allow_vdda_off'),
       ('p2s_application_mode', 12, 15, 'p2s_application_mode'),
       ('presetn', 16, 16, 'presetn'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_status_2 = ( 
    'p1l1_status_2',
    (0x8354507c, 0x83545080),
    'PSS PHY1 Lane1 Status 2 Register',
    [ 
       ('pipe_spare_out', 0, 31, 'pipe_spare_out'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_status_3 = ( 
    'p1l1_status_3',
    (0x83545080, 0x83545084),
    'PSS PHY1 Lane1 Status 3 Register',
    [ 
       ('serdes_dig_sync_testmux_ch', 0, 15, 'serdes_dig_sync_testmux_ch'),
       ('serdes_dig_testmux', 16, 31, 'serdes_dig_testmux'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_status_4 = ( 
    'p1l1_status_4',
    (0x83545084, 0x83545088),
    'PSS PHY1 Lane1 Status 4 Register',
    [ 
       ('rx_spareout', 0, 7, 'rx_spareout'),
       ('tx_spareout', 8, 15, 'tx_spareout'),
       ('phy_config_done', 16, 16, 'phy_config_done'),
       ('tx_phyready', 17, 17, 'tx_phyready'),
       ('tx_pdclk_source', 18, 18, 'tx_pdclk_source'),
       ('rx_phyready', 19, 19, 'rx_phyready'),
       ('rxlos_fil', 20, 20, 'rxlos_fil'),
       ('ser_rx_pll_ready', 21, 21, 'ser_rx_pll_ready'),
       ('ser_tx_pll_ready', 22, 22, 'ser_tx_pll_ready'),
       ('serdes_dig_sync_testclk_ch', 23, 23, 'serdes_dig_sync_testclk_ch'),
       ('asic_clk_source', 24, 24, 'asic_clk_source'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_debug_sel = ( 
    'p1l1_debug_sel',
    (0x83545088, 0x8354508c),
    'PSS PHY1 Lane1 Debug Sel Register',
    [ 
       ('pipe_debug_sel', 0, 7, 'pipe_debug_sel'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_p1l1_debug_out = ( 
    'p1l1_debug_out',
    (0x8354508c, 0x83545090),
    'PSS PHY1 Lane1 Debug out Register',
    [ 
       ('pipe_debug_o', 0, 15, 'pipe_debug_o'),
    ], 
    0x4,
    0x1,
    1,
    )
#############################################################
#		qspi_csr_auto.xml
#############################################################

# 

# reg_obj = 

#       (name, (address, address_end), description, 

#       [ (field, bit, bit_end,description)....],  

#       width, dimension )
#

reg_spi_format = ( 
    'spi_format',
    (0x83010010, 0x83010014),
    'This register defines the spi transfer format.',
    [ 
       ('cpha', 0, 0, 'spi clock phase 0: sampling data at odd sclk edge 1: sampling data at even sclk edge'),
       ('cpol', 1, 1, 'spi clock polarity 0: sclk is low in the idle state 1: sclk is high in the idle state'),
       ('lsb', 2, 2, 'transfer data with least significant bit first. 0x1: least significant bit first'),
       ('mosibidir', 3, 3, 'Bi-directional MOSI in single mode. 0: MOSI is uni-directional signal in single mode. 1: MOSI is bi-directional signal in single mode.'),
       ('datamerge', 4, 4, 'Enable data merge. 1: each write to the data register will transmit all 4 bytes of the write data; each read from the data register will retrieve 4 bytes of received data as a single DW. 0: only the least 8 significient bits of the data register are valid for read/write operations.'),
       ('addrlen', 8, 9, 'Address length in bytes 0: 1 bytes 1: 2 bytes 2: 3 bytes 3: 4 bytes'),
       ('fifo_ctrl_sel', 12, 12, '0: fifo access from apb 1: fifo access from axi.'),
       ('axi_wr_mode', 16, 16, '0:close axi write mode 1:open axi write mode Flash addr and len from axi araddr and arlen, others from apb'),
       ('axi_rd_mode', 20, 20, '0:close axi read mode   1:open axi read mode Flash addr and len from axi awaddr and awlen, others from apb'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_direct_io_ctrl_rw = ( 
    'spi_direct_io_ctrl_rw',
    (0x83010014, 0x83010018),
    'This register enables the direct control of the spi interface signals.(read-write)',
    [ 
       ('cs_o', 0, 0, 'Output of the spi cs signal'),
       ('sclk_o', 1, 1, 'Output of the spi sclk signal'),
       ('mosi_o', 2, 2, 'Output of the spi mosi signal'),
       ('miso_o', 3, 3, 'Output of the spi miso signal'),
       ('wp_o', 4, 4, 'Output of the spi wp signal'),
       ('hold_o', 5, 5, 'Output of the spi hold signal'),
       ('cs_oe', 8, 8, 'Output enable of the spi cs signal'),
       ('sclk_oe', 9, 9, 'Output enable of the spi sclk signal'),
       ('mosi_oe', 10, 10, 'Output enable of the spi mosi signal'),
       ('miso_oe', 11, 11, 'Output enable of the spi miso signal'),
       ('wp_oe', 12, 12, 'Output enable of the spi wp signal'),
       ('hold_oe', 13, 13, 'Output enable of the spi hold signal'),
       ('direct_io_en', 16, 16, 'Enable direct io'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_direct_io_ctrl_r = ( 
    'spi_direct_io_ctrl_r',
    (0x83010018, 0x8301001c),
    'This register enables the direct control of the spi interface signals.(read-only)',
    [ 
       ('cs_i', 0, 0, 'Status of the spi cs signal'),
       ('sclk_i', 1, 1, 'Status of the spi sclk signal'),
       ('mosi_i', 2, 2, 'Status of the spi mosi signal'),
       ('miso_i', 3, 3, 'Status of the spi miso signal'),
       ('wp_i', 4, 4, 'Status of the spi wp signal'),
       ('hold_i', 5, 5, 'Status of the spi hold signal'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_trans_ctrl = ( 
    'spi_trans_ctrl',
    (0x8301001c, 0x83010020),
    'This register controls aspects of SPI transfers.',
    [ 
       ('dummy_num', 0, 7, 'the number of dummy cycle will be dummy_num + 1'),
       ('token_num', 8, 10, 'token data count. The actual token num is (token_num +1). The number of token cycles on the spi interface will be (token_numt+1)* (8/spi io width) The data pins are put into the high impedance during the token data phase. token_num is only used for trans_mode 5, 6, which has token data phase. Example below: (token_num+1)  (spi io width)  (token cycle on spi IF) 1                     single                     8 1                      dual                      4 1                      quad                     4 2                      quad                     8'),
       ('dummy_val_en', 11, 11, 'The value of the one-byte special dummy following the address phase for spi read transfers. 0: dummy value = 0x00 1: decided by dummy value'),
       ('dummy_en', 21, 21, 'Append an one-byte special dummy following the address phase for SPI read transfer. The value of the special dummy.'),
       ('data_fmt', 22, 23, 'The spi data phase format 0: single mode 1: dual mode 2: quad mode 3: Reserved'),
       ('trans_mode', 24, 27, 'Transfer mode. The transfer sequence could be 0x1: Write only 0x2: Read only 0x3: Write, Read 0x4: Read, Write 0x5: Write, Token, Read 0x6: Read, Token, Write 0x7: None Data (must enable cmd_en or addr_en) 0x8:Dummy Write 0x9:Dummy Read Others: Reserved'),
       ('addr_fmt', 28, 28, 'The spi address phase format 0: Address phase is single mode 1: Address phase is the same as the data phase (Dual or Quad).'),
       ('addr_en', 29, 29, 'The spi address phase enable'),
       ('cmd_en', 30, 30, 'The spi command phase enable'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_cmd = ( 
    'spi_cmd',
    (0x83010020, 0x83010024),
    'Write operation on this register trigger spi transfer. This register must be written with a dummy value to start a spi transfer even when the command phase is not enabled.',
    [ 
       ('spi_cmd', 0, 7, 'The spi cmd'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_addr = ( 
    'spi_addr',
    (0x83010024, 0x83010028),
    'spi addr register',
    [ 
       ('spi_addr', 0, 31, 'The spi addr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_data = ( 
    'spi_data',
    (0x83010028, 0x8301002c),
    'Data to transmit or the received data',
    [ 
       ('spi_data', 0, 31, 'The spi data For write, data is enqueued to the txfifo. The least significant byte is transmitted first. For read, data is read and dequeued from the rxfifo. The least significant byte is the first received byte. The FIFOs decouple the speed of the SPI transfers and the software generation/consumption of data. When the txfifo is empty, spi transfers will hold until more data is written to the txfifo; when the rxfifo is full, spi transfers will hold until there is more room in the rxfifo. If more data is written to the txfifo than the write transfer count (wr_trans_num), the remaining data will stay in the txfifo for the next transfer or until the txfifo is reset.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_ctrl = ( 
    'spi_ctrl',
    (0x8301002c, 0x83010030),
    'spi control register',
    [ 
       ('spi_rst', 0, 0, 'spi reset Write 1 to reset. It is cleared to 0 after the reset operation complete.'),
       ('rxfifo_rst', 1, 1, 'rxfifo reset Write 1 to reset. It is cleared to 0 after the reset operation complete.'),
       ('txfifo_rst', 2, 2, 'txfifo reset Write 1 to reset. It is cleared to 0 after the reset operation complete.'),
       ('rx_dma_en', 3, 3, 'RX DMA enable'),
       ('tx_dma_en', 4, 4, 'TX DMA enable'),
       ('p2a_fifo_rst', 5, 5, 'p2afifo reset write 1 to reset. It is cleared to 0 after the reset operation complete.'),
       ('a2p_fifo_rst', 6, 6, 'a2pfifo reset write 1 to reset. It is cleared to 0 after the reset operation complete.'),
       ('rx_thres', 8, 14, 'rxfifo threshold The rxfifo interrupt or DMA request would be issued for consuming the rxfifo when the rx data count is more than or equal to the rxfifo threshold.'),
       ('tx_thres', 16, 22, 'txfifo threshold The rxfifo interrupt or DMA request would be issued for consuming the txfifo when the tx data count is less than or equal to the txfifo threshold.'),
       ('rxfifo_auto_clr', 27, 27, 'open this bit,rxfifo and a2pfifo are cleared before transfer start'),
       ('spi_debug_clk_en', 28, 28, 'debug clk enable'),
       ('spi_debug_en', 31, 31, 'This bit controls qspi debug output or not.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_intr_en = ( 
    'spi_intr_en',
    (0x83010030, 0x83010034),
    'spi interrupt enable register',
    [ 
       ('rxfifo_intr_en', 0, 0, 'Control whether interrupt is triggered when the valid entries is greater than or equal to the rxfifo threshold.'),
       ('txfifo_intr_en', 1, 1, 'Control whether interrupt is triggered when the valid entries is less than or equal to the txfifo threshold.'),
       ('end_intr_en', 2, 2, 'Control whether interrupt is triggered when SPI transfer end.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_intr_sts = ( 
    'spi_intr_sts',
    (0x83010034, 0x83010038),
    'spi interrupt status register',
    [ 
       ('rxfifo_intr', 0, 0, '1)This bit is set when the data that is not read in rxfifo(axi read) or a2pfifo(apb read) is greater than or equal to the threshold. 2)it is used to remind the FW that the RXFIFO is almost full and stop writing data to it. 3)this bit can be set to 1 by hardware logic, and can also be manually set or cleared through the configuration register'),
       ('txfifo_intr', 1, 1, '1)This bit is set when the remaining space in txfifo(axi write) or p2afifo(apb write) is less than or equal to the threshold. 2)it is used to remind the FW that the TXFIFO is about to be empty, and data can be written into it. Guaranteed uninterrupted data transmission. 3)this bit can be set to 1 by hardware logic, and can also be manually set or cleared through the configuration register'),
       ('end_intr', 2, 2, 'This bit is set when end of spi transfer interrupt occur.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_timing = ( 
    'spi_timing',
    (0x83010038, 0x8301003c),
    'This register controls the spi interface timing for satisfying the spi slave interface timing requirement.',
    [ 
       ('sclk_div', 0, 7, 'The clock frequency ratio between the clock source and spi interface sclk. sclk period=(sclk_div+1)*2*(period of source clk) Note: sclk_div=0xff indicates the SCLK frequency is same as the spi source clock frequency.'),
       ('t_cshigh', 8, 15, 'The minimum time that spi should stay high.'),
       ('t_cs2sclk', 16, 23, 'The minimum time between the edge of spi cs and the edge of sclk.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_sts = ( 
    'spi_sts',
    (0x83010040, 0x83010044),
    'spi status register',
    [ 
       ('clr_done_sts', 1, 1, 'the status of fifo clear'),
       ('spi_busy', 0, 0, 'spi direct register programming is in progress'),
       ('rx_num', 8, 14, 'num of valid entries in the rxfifo'),
       ('rx_empty', 16, 16, 'rxfifo empty flag'),
       ('rx_full', 17, 17, 'rxfifo full flag'),
       ('tx_num', 20, 26, 'num of valid entries in the txfifo'),
       ('tx_empty', 28, 28, 'txfifo empty flag'),
       ('tx_full', 29, 29, 'txfifo full flag'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_config = ( 
    'spi_config',
    (0x83010044, 0x83010048),
    'spi configuration register',
    [ 
       ('qpi_en', 0, 0, 'enable quad mode in command phase'),
       ('reg_token_en', 1, 1, 'enable token count during apb register access'),
       ('dummy_value', 4, 11, 'dummy value'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_token_cnt = ( 
    'spi_token_cnt',
    (0x83010048, 0x8301004c),
    'spi dummy cnt register',
    [ 
       ('reg_token_cnt', 0, 3, 'set token cycles for apb register access'),
       ('mem_token_cnt', 4, 7, 'set token cycles for mem register access'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_trans_num = ( 
    'spi_trans_num',
    (0x8301004c, 0x83010050),
    'spi trans num register',
    [ 
       ('rd_trans_num', 0, 11, 'Transfer num for read data rd_trans_num indicates the number of bytes of data to be received from spi bus and stored to the date register. The actual received num is (rd_trans_num+1).'),
       ('wr_trans_num', 16, 27, 'Transfer num for write data wr_trans_num indicates the number of bytes of data to be transmitted to the spi bus from the data register. The actual transfer num is (wr_trans_num+1).'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_axi_base_addr = ( 
    'spi_axi_base_addr',
    (0x83010050, 0x83010054),
    'axi base addr register',
    [ 
       ('axi_base_addr', 0, 31, 'axi_base_addr'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_rclk_dly = ( 
    'spi_rclk_dly',
    (0x83010054, 0x83010058),
    'spi rclk dly register.',
    [ 
       ('rclk_dly', 0, 31, 'rclk_dly = 0 mean no delay, rclk_dly = 1 mean dealy one cycle,and so on.'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_debug_sel = ( 
    'spi_debug_sel',
    (0x83010058, 0x8301005c),
    'spi debug select register.',
    [ 
       ('debug_sel', 0, 31, 'qspi debug select'),
    ], 
    0x4,
    0x1,
    1,
    )
reg_spi_debug_monitor = ( 
    'spi_debug_monitor',
    (0x8301005c, 0x83010060),
    'spi debug data output',
    [ 
       ('debug_monitor', 0, 31, 'qspi debug data output'),
    ], 
    0x4,
    0x1,
    1,
    )
# 
# key:regname, (obj, start,stop, size, dim) 
#
reg_list = { 
    'Global_Control'          : (reg_Global_Control        , 0x00000000, 0x00000004, 32, 1),
    'Interrupt_Status'        : (reg_Interrupt_Status      , 0x00000004, 0x00000008, 32, 1),
    'Interrupt_Enable'        : (reg_Interrupt_Enable      , 0x00000008, 0x0000000c, 32, 1),
    'Wait_Timer_Control'      : (reg_Wait_Timer_Control    , 0x0000000c, 0x00000010, 32, 1),
    'IBML_tTIMEOUT_Control'   : (reg_IBML_tTIMEOUT_Control , 0x00000010, 0x00000014, 32, 1),
    'IBML_tLOWMEXT_Control'   : (reg_IBML_tLOWMEXT_Control , 0x00000014, 0x00000018, 32, 1),
    'IBML_tLOWSEXT_Control'   : (reg_IBML_tLOWSEXT_Control , 0x00000018, 0x0000001c, 32, 1),
    'Timer_Clock_Divider_Control': (reg_Timer_Clock_Divider_Control, 0x0000001c, 0x00000020, 32, 1),
    'I2C_Bus_Monitor'         : (reg_I2C_Bus_Monitor       , 0x00000020, 0x00000024, 32, 1),
    'Soft_Reset_I2C'          : (reg_Soft_Reset_I2C        , 0x00000024, 0x00000028, 32, 1),
    'Master_Command'          : (reg_Master_Command        , 0x00000028, 0x0000002c, 32, 1),
    'Master_Rx_Xfer_Length'   : (reg_Master_Rx_Xfer_Length , 0x0000002c, 0x00000030, 32, 1),
    'Master_Tx_Xfer_Len'      : (reg_Master_Tx_Xfer_Len    , 0x00000030, 0x00000034, 32, 1),
    'Master_Address_Register_1': (reg_Master_Address_Register_1, 0x00000034, 0x00000038, 32, 1),
    'Master_Address_Register_2': (reg_Master_Address_Register_2, 0x00000038, 0x0000003c, 32, 1),
    'Master_Data'             : (reg_Master_Data           , 0x0000003c, 0x00000040, 32, 1),
    'Master_Transmit_FIFO_Status': (reg_Master_Transmit_FIFO_Status, 0x00000040, 0x00000044, 32, 1),
    'Master_Receive_FIFO_Status': (reg_Master_Receive_FIFO_Status, 0x00000044, 0x00000048, 32, 1),
    'Master_Interrupt_Enable' : (reg_Master_Interrupt_Enable, 0x00000048, 0x0000004c, 32, 1),
    'Master_Interrupt_Status' : (reg_Master_Interrupt_Status, 0x0000004c, 0x00000050, 32, 1),
    'Master_Tx_Bytes_Xferred' : (reg_Master_Tx_Bytes_Xferred, 0x00000050, 0x00000054, 32, 1),
    'Master_Rx_Bytes_Xferred' : (reg_Master_Rx_Bytes_Xferred, 0x00000054, 0x00000058, 32, 1),
    'Slave_decode_control'    : (reg_Slave_decode_control  , 0x00000058, 0x0000005c, 32, 1),
    'Slave_Address_1'         : (reg_Slave_Address_1       , 0x0000005c, 0x00000060, 32, 1),
    'Slave_Address_2'         : (reg_Slave_Address_2       , 0x00000060, 0x00000064, 32, 1),
    'Slave_Receive_Control'   : (reg_Slave_Receive_Control , 0x00000064, 0x00000068, 32, 1),
    'Slave_Data_Port'         : (reg_Slave_Data_Port       , 0x00000068, 0x0000006c, 32, 1),
    'Slave_Receive_FIFO_status': (reg_Slave_Receive_FIFO_status, 0x0000006c, 0x00000070, 32, 1),
    'Slave_Interrupt_Enable'  : (reg_Slave_Interrupt_Enable, 0x00000070, 0x00000074, 32, 1),
    'Slave_Interrupt_Status'  : (reg_Slave_Interrupt_Status, 0x00000074, 0x00000078, 32, 1),
    'Slave_read_dummy_byte'   : (reg_Slave_read_dummy_byte , 0x00000078, 0x0000007c, 32, 1),
    'Unused_7C'               : (reg_Unused_7C             , 0x0000007c, 0x00000080, 32, 1),
    'SCL_High_Period'         : (reg_SCL_High_Period       , 0x00000080, 0x00000084, 32, 1),
    'SCL_Low_Period'          : (reg_SCL_Low_Period        , 0x00000084, 0x00000088, 32, 1),
    'Spike_Filter_Control'    : (reg_Spike_Filter_Control  , 0x00000088, 0x0000008c, 32, 1),
    'SDA_Setup_Time'          : (reg_SDA_Setup_Time        , 0x0000008c, 0x00000090, 32, 1),
    'SDA_Hold_Time'           : (reg_SDA_Hold_Time         , 0x00000090, 0x00000094, 32, 1),
    'SMB_Alert'               : (reg_SMB_Alert             , 0x00000094, 0x00000098, 32, 1),
    'UDID_Word7_UDID_127_112' : (reg_UDID_Word7_UDID_127_112, 0x00000098, 0x0000009c, 32, 1),
    'UDID_Word6_UDID_111_96'  : (reg_UDID_Word6_UDID_111_96, 0x0000009c, 0x000000a0, 32, 1),
    'UDID_Word5_UDID_95_80'   : (reg_UDID_Word5_UDID_95_80 , 0x000000a0, 0x000000a4, 32, 1),
    'UDID_Word4_UDID_79_64'   : (reg_UDID_Word4_UDID_79_64 , 0x000000a4, 0x000000a8, 32, 1),
    'UDID_Word3_UDID_63_48'   : (reg_UDID_Word3_UDID_63_48 , 0x000000a8, 0x000000ac, 32, 1),
    'UDID_Word2_UDID_47_32'   : (reg_UDID_Word2_UDID_47_32 , 0x000000ac, 0x000000b0, 32, 1),
    'UDID_Word1_UDID_31_16'   : (reg_UDID_Word1_UDID_31_16 , 0x000000b0, 0x000000b4, 32, 1),
    'UDID_Word0_UDID_15_0'    : (reg_UDID_Word0_UDID_15_0  , 0x000000b4, 0x000000b8, 32, 1),
    'ARP_PEC_Config_and_Stat' : (reg_ARP_PEC_Config_and_Stat, 0x000000b8, 0x000000bc, 32, 1),
    'ARP_Slave_Interrupt_Enable': (reg_ARP_Slave_Interrupt_Enable, 0x000000bc, 0x000000c0, 32, 1),
    'ARP_Slave_Interrupt_Status': (reg_ARP_Slave_Interrupt_Status, 0x000000c0, 0x000000c4, 32, 1),
    'ARP_Master_Interrupt_Enable': (reg_ARP_Master_Interrupt_Enable, 0x000000c4, 0x000000c8, 32, 1),
    'ARP_Master_Interrupt_Status': (reg_ARP_Master_Interrupt_Status, 0x000000c8, 0x000000cc, 32, 1),
    'SCL_Slowest_Period_LSB'  : (reg_SCL_Slowest_Period_LSB, 0x000000cc, 0x000000d0, 32, 1),
    'SCL_Slowest_Period_MSB'  : (reg_SCL_Slowest_Period_MSB, 0x000000d0, 0x000000d4, 32, 1),
    'Unused_D4'               : (reg_Unused_D4             , 0x000000d4, 0x000000d8, 32, 1),
    'Slave_Address_3'         : (reg_Slave_Address_3       , 0x000000d4, 0x000000d8, 32, 1),
    'Slave_Address_4'         : (reg_Slave_Address_4       , 0x000000d8, 0x000000dc, 32, 1),
    'Slave_Interrupt_2_Enable': (reg_Slave_Interrupt_2_Enable, 0x000000dc, 0x000000e0, 32, 1),
    'Slave_Interrupt_2_Status': (reg_Slave_Interrupt_2_Status, 0x000000e0, 0x000000e4, 32, 1),
    'GPIODATA'                : (reg_GPIODATA              , 0x000003fc, 0x00000400, 32, 1),
    'GPIODIR'                 : (reg_GPIODIR               , 0x00000400, 0x00000404, 32, 1),
    'GPIOIS'                  : (reg_GPIOIS                , 0x00000404, 0x00000408, 32, 1),
    'GPIOIBE'                 : (reg_GPIOIBE               , 0x00000408, 0x0000040c, 32, 1),
    'GPIOIEV'                 : (reg_GPIOIEV               , 0x0000040c, 0x00000410, 32, 1),
    'GPIOIE'                  : (reg_GPIOIE                , 0x00000410, 0x00000414, 32, 1),
    'GPIORIS'                 : (reg_GPIORIS               , 0x00000414, 0x00000418, 32, 1),
    'GPIOMIS'                 : (reg_GPIOMIS               , 0x00000418, 0x0000041c, 32, 1),
    'GPIOIC'                  : (reg_GPIOIC                , 0x0000041c, 0x00000420, 32, 1),
    'GPIOAFSEL'               : (reg_GPIOAFSEL             , 0x00000420, 0x00000424, 32, 1),
    'GPIOPeriphID0'           : (reg_GPIOPeriphID0         , 0x00000fe0, 0x00000fe4, 32, 1),
    'GPIOPeriphID1'           : (reg_GPIOPeriphID1         , 0x00000fe4, 0x00000fe8, 32, 1),
    'GPIOPeriphID2'           : (reg_GPIOPeriphID2         , 0x00000fe8, 0x00000fec, 32, 1),
    'GPIOPeriphID3'           : (reg_GPIOPeriphID3         , 0x00000fec, 0x00000ff0, 32, 1),
    'GPIOPCellID0'            : (reg_GPIOPCellID0          , 0x00000ff0, 0x00000ff4, 32, 1),
    'GPIOPCellID1'            : (reg_GPIOPCellID1          , 0x00000ff4, 0x00000ff8, 32, 1),
    'GPIOPCellID2'            : (reg_GPIOPCellID2          , 0x00000ff8, 0x00000ffc, 32, 1),
    'GPIOPCellID3'            : (reg_GPIOPCellID3          , 0x00000ffc, 0x00001000, 32, 1),
    'UARTDR'                  : (reg_UARTDR                , 0x00000000, 0x00000004, 32, 1),
    'UARTRSR'                 : (reg_UARTRSR               , 0x00000004, 0x00000008, 32, 1),
    'UARTFR'                  : (reg_UARTFR                , 0x00000018, 0x0000001c, 32, 1),
    'UARTILPR'                : (reg_UARTILPR              , 0x00000020, 0x00000024, 32, 1),
    'UARTIBRD'                : (reg_UARTIBRD              , 0x00000024, 0x00000028, 32, 1),
    'UARTFBRD'                : (reg_UARTFBRD              , 0x00000028, 0x0000002c, 32, 1),
    'UARTLCR_H'               : (reg_UARTLCR_H             , 0x0000002c, 0x00000030, 32, 1),
    'UARTCR'                  : (reg_UARTCR                , 0x00000030, 0x00000034, 32, 1),
    'UARTIFLS'                : (reg_UARTIFLS              , 0x00000034, 0x00000038, 32, 1),
    'UARTIMSC'                : (reg_UARTIMSC              , 0x00000038, 0x0000003c, 32, 1),
    'UARTRIS'                 : (reg_UARTRIS               , 0x0000003c, 0x00000040, 32, 1),
    'UARTMIS'                 : (reg_UARTMIS               , 0x00000040, 0x00000044, 32, 1),
    'UARTICR'                 : (reg_UARTICR               , 0x00000044, 0x00000048, 32, 1),
    'UARTDMACR'               : (reg_UARTDMACR             , 0x00000048, 0x0000004c, 32, 1),
    'UARTPeriphID0'           : (reg_UARTPeriphID0         , 0x00000fe0, 0x00000fe4, 32, 1),
    'UARTPeriphID1'           : (reg_UARTPeriphID1         , 0x00000fe4, 0x00000fe8, 32, 1),
    'UARTPeriphID2'           : (reg_UARTPeriphID2         , 0x00000fe8, 0x00000fec, 32, 1),
    'UARTPeriphID3'           : (reg_UARTPeriphID3         , 0x00000fec, 0x00000ff0, 32, 1),
    'UARTPCellID0'            : (reg_UARTPCellID0          , 0x00000ff0, 0x00000ff4, 32, 1),
    'UARTPCellID1'            : (reg_UARTPCellID1          , 0x00000ff4, 0x00000ff8, 32, 1),
    'UARTPCellID2'            : (reg_UARTPCellID2          , 0x00000ff8, 0x00000ffc, 32, 1),
    'UARTPCellID3'            : (reg_UARTPCellID3          , 0x00000ffc, 0x00001000, 32, 1),
    'SSPCR0'                  : (reg_SSPCR0                , 0x30100000, 0x30100004, 32, 1),
    'SSPCR1'                  : (reg_SSPCR1                , 0x30100004, 0x30100008, 32, 1),
    'SSPDR'                   : (reg_SSPDR                 , 0x30100008, 0x3010000c, 32, 1),
    'SSPSR'                   : (reg_SSPSR                 , 0x3010000c, 0x30100010, 32, 1),
    'SSPCPSR'                 : (reg_SSPCPSR               , 0x30100010, 0x30100014, 32, 1),
    'SSPIMSC'                 : (reg_SSPIMSC               , 0x30100014, 0x30100018, 32, 1),
    'SSPRIS'                  : (reg_SSPRIS                , 0x30100018, 0x3010001c, 32, 1),
    'SSPMIS'                  : (reg_SSPMIS                , 0x3010001c, 0x30100020, 32, 1),
    'SSPICR'                  : (reg_SSPICR                , 0x30100020, 0x30100024, 32, 1),
    'SSPDMACR'                : (reg_SSPDMACR              , 0x30100024, 0x30100028, 32, 1),
    'SSPCS_IND_CS'            : (reg_SSPCS_IND_CS          , 0x30100028, 0x3010002c, 32, 1),
    'SSPCS_PAD_CTRL'          : (reg_SSPCS_PAD_CTRL        , 0x3010002c, 0x30100030, 32, 1),
    'SSPPeriphID0'            : (reg_SSPPeriphID0          , 0x30100fe0, 0x30100fe4, 32, 1),
    'SSPPeriphID1'            : (reg_SSPPeriphID1          , 0x30100fe4, 0x30100fe8, 32, 1),
    'SSPPeriphID2'            : (reg_SSPPeriphID2          , 0x30100fe8, 0x30100fec, 32, 1),
    'SSPPeriphID3'            : (reg_SSPPeriphID3          , 0x30100fec, 0x30100ff0, 32, 1),
    'SSPCellID0'              : (reg_SSPCellID0            , 0x30100ff0, 0x30100ff4, 32, 1),
    'SSPCellID1'              : (reg_SSPCellID1            , 0x30100ff4, 0x30100ff8, 32, 1),
    'SSPCellID2'              : (reg_SSPCellID2            , 0x30100ff8, 0x30100ffc, 32, 1),
    'SSPCellID3'              : (reg_SSPCellID3            , 0x30100ffc, 0x30101000, 32, 1),
    'dfd_debug_sel'           : (reg_dfd_debug_sel         , 0x8009c000, 0x8009c004, 32, 1),
    'dfd_control'             : (reg_dfd_control           , 0x8009c004, 0x8009c008, 32, 1),
    'dfd_stat'                : (reg_dfd_stat              , 0x8009c008, 0x8009c00c, 32, 1),
    'start_pattern'           : (reg_start_pattern         , 0x8009c100, 0x8009c104, 32, 1),
    'start_pattern_maskb'     : (reg_start_pattern_maskb   , 0x8009c104, 0x8009c108, 32, 1),
    'stop_pattern'            : (reg_stop_pattern          , 0x8009c108, 0x8009c10c, 32, 1),
    'stop_pattern_maskb'      : (reg_stop_pattern_maskb    , 0x8009c10c, 0x8009c110, 32, 1),
    'dfd_valid_map'           : (reg_dfd_valid_map         , 0x8009c110, 0x8009c114, 32, 1),
    'debug_data_write_stop_num': (reg_debug_data_write_stop_num, 0x8009c114, 0x8009c118, 32, 1),
    'stop_full_num'           : (reg_stop_full_num         , 0x8009c118, 0x8009c11c, 32, 1),
    'axi_start_pattern_addr'  : (reg_axi_start_pattern_addr, 0x8009c11c, 0x8009c120, 32, 1),
    'axi_stop_pattern_addr'   : (reg_axi_stop_pattern_addr , 0x8009c120, 0x8009c124, 32, 1),
    'axi_start_addr_offset'   : (reg_axi_start_addr_offset , 0x8009c124, 0x8009c128, 32, 1),
    'axi_start_data_offset'   : (reg_axi_start_data_offset , 0x8009c128, 0x8009c12c, 32, 1),
    'csr_ctrl_log_mem_addr'   : (reg_csr_ctrl_log_mem_addr , 0x8009c200, 0x8009c204, 32, 1),
    'csr_ctrl_log_mem_data'   : (reg_csr_ctrl_log_mem_data , 0x8009c204, 0x8009c208, 32, 1),
    'snapshot_mode_sel'       : (reg_snapshot_mode_sel     , 0x8009c254, 0x8009c258, 32, 1),
    'dfd_debug_data'          : (reg_dfd_debug_data        , 0x8009c300, 0x8009c304, 32, 1),
    'current_log_mem_write_addr': (reg_current_log_mem_write_addr, 0x8009c304, 0x8009c308, 32, 1),
    'log_mem_full_cnt'        : (reg_log_mem_full_cnt      , 0x8009c308, 0x8009c30c, 32, 1),
    'be_ace_axi_attrib_range0_saddr': (reg_be_ace_axi_attrib_range0_saddr, 0x83d10000, 0x83d10008, 64, 1),
    'be_ace_axi_attrib_range1_saddr': (reg_be_ace_axi_attrib_range1_saddr, 0x83d10008, 0x83d10010, 64, 1),
    'be_ace_axi_attrib_range2_saddr': (reg_be_ace_axi_attrib_range2_saddr, 0x83d10010, 0x83d10018, 64, 1),
    'be_ace_axi_attrib_range3_saddr': (reg_be_ace_axi_attrib_range3_saddr, 0x83d10018, 0x83d10020, 64, 1),
    'be_ace_axi_attrib_range0_eaddr': (reg_be_ace_axi_attrib_range0_eaddr, 0x83d10020, 0x83d10028, 64, 1),
    'be_ace_axi_attrib_range1_eaddr': (reg_be_ace_axi_attrib_range1_eaddr, 0x83d10028, 0x83d10030, 64, 1),
    'be_ace_axi_attrib_range2_eaddr': (reg_be_ace_axi_attrib_range2_eaddr, 0x83d10030, 0x83d10038, 64, 1),
    'be_ace_axi_attrib_range3_eaddr': (reg_be_ace_axi_attrib_range3_eaddr, 0x83d10038, 0x83d10040, 64, 1),
    'be_ace_axi_attrib_ctrl0' : (reg_be_ace_axi_attrib_ctrl0, 0x83d10040, 0x83d10048, 64, 1),
    'be_ace_axi_attrib_ctrl1' : (reg_be_ace_axi_attrib_ctrl1, 0x83d10048, 0x83d10050, 64, 1),
    'csr_ld_buf_base_addr'    : (reg_csr_ld_buf_base_addr  , 0x83d10100, 0x83d10108, 64, 1),
    'csr_obuf_base_addr_proc0': (reg_csr_obuf_base_addr_proc0, 0x83d10108, 0x83d10110, 64, 1),
    'csr_obuf_base_addr_proc1': (reg_csr_obuf_base_addr_proc1, 0x83d10110, 0x83d10118, 64, 1),
    'csr_obuf_base_addr_proc2': (reg_csr_obuf_base_addr_proc2, 0x83d10118, 0x83d10120, 64, 1),
    'csr_obuf_base_addr_proc3': (reg_csr_obuf_base_addr_proc3, 0x83d10120, 0x83d10128, 64, 1),
    'csr_folding_ctrl'        : (reg_csr_folding_ctrl      , 0x83d10200, 0x83d10208, 64, 1),
    'fcq_config_0'            : (reg_fcq_config_0          , 0x83d11000, 0x83d11008, 64, 1),
    'fcq_config_1'            : (reg_fcq_config_1          , 0x83d11008, 0x83d11010, 64, 1),
    'fcq_config_2'            : (reg_fcq_config_2          , 0x83d11010, 0x83d11018, 64, 1),
    'fcq_dbl'                 : (reg_fcq_dbl               , 0x83d11018, 0x83d11020, 64, 1),
    'fcq_q_sel'               : (reg_fcq_q_sel             , 0x83d11020, 0x83d11028, 64, 1),
    'fcq_q_property_0'        : (reg_fcq_q_property_0      , 0x83d11028, 0x83d11030, 64, 1),
    'fcq_q_property_1'        : (reg_fcq_q_property_1      , 0x83d11030, 0x83d11038, 64, 1),
    'fcq_q_property_2'        : (reg_fcq_q_property_2      , 0x83d11038, 0x83d11040, 64, 1),
    'fcq_q_ptr'               : (reg_fcq_q_ptr             , 0x83d11040, 0x83d11048, 64, 1),
    'fcq_statistic_0'         : (reg_fcq_statistic_0       , 0x83d11048, 0x83d11050, 64, 1),
    'fcq_statistic_1'         : (reg_fcq_statistic_1       , 0x83d11050, 0x83d11058, 64, 1),
    'fcq_statistic_2'         : (reg_fcq_statistic_2       , 0x83d11058, 0x83d11060, 64, 1),
    'fcq_sq_empty'            : (reg_fcq_sq_empty          , 0x83d11100, 0x83d11108, 64, 1),
    'fcq_sq_full'             : (reg_fcq_sq_full           , 0x83d11108, 0x83d11110, 64, 1),
    'fcq_cq_empty'            : (reg_fcq_cq_empty          , 0x83d11110, 0x83d11118, 64, 1),
    'fcq_cq_full'             : (reg_fcq_cq_full           , 0x83d11118, 0x83d11120, 64, 1),
    'fcq_sq_al_empty'         : (reg_fcq_sq_al_empty       , 0x83d11120, 0x83d11128, 64, 1),
    'fcq_sq_al_full'          : (reg_fcq_sq_al_full        , 0x83d11128, 0x83d11130, 64, 1),
    'fcq_cq_al_empty'         : (reg_fcq_cq_al_empty       , 0x83d11130, 0x83d11138, 64, 1),
    'fcq_cq_al_full'          : (reg_fcq_cq_al_full        , 0x83d11138, 0x83d11140, 64, 1),
    'fcq_sq_wof'              : (reg_fcq_sq_wof            , 0x83d11140, 0x83d11148, 64, 1),
    'fcq_sq_roe'              : (reg_fcq_sq_roe            , 0x83d11148, 0x83d11150, 64, 1),
    'fcq_cq_wof'              : (reg_fcq_cq_wof            , 0x83d11150, 0x83d11158, 64, 1),
    'fcq_cq_roe'              : (reg_fcq_cq_roe            , 0x83d11158, 0x83d11160, 64, 1),
    'fcq_q_ost'               : (reg_fcq_q_ost             , 0x83d11160, 0x83d11168, 64, 1),
    'fcq_intr_status'         : (reg_fcq_intr_status       , 0x83d11200, 0x83d11208, 64, 1),
    'fcq_intr_mask'           : (reg_fcq_intr_mask         , 0x83d11208, 0x83d11210, 64, 1),
    'fcq_intr_rc'             : (reg_fcq_intr_rc           , 0x83d11210, 0x83d11218, 64, 1),
    'fcq_intr_shadow'         : (reg_fcq_intr_shadow       , 0x83d11218, 0x83d11220, 64, 1),
    'fcq_sq_empty_2'          : (reg_fcq_sq_empty_2        , 0x83d11220, 0x83d11228, 64, 1),
    'fcq_sq_full_2'           : (reg_fcq_sq_full_2         , 0x83d11228, 0x83d11230, 64, 1),
    'fcq_cq_empty_2'          : (reg_fcq_cq_empty_2        , 0x83d11230, 0x83d11238, 64, 1),
    'fcq_cq_full_2'           : (reg_fcq_cq_full_2         , 0x83d11238, 0x83d11240, 64, 1),
    'fcq_sq_al_empty_2'       : (reg_fcq_sq_al_empty_2     , 0x83d11240, 0x83d11248, 64, 1),
    'fcq_sq_al_full_2'        : (reg_fcq_sq_al_full_2      , 0x83d11248, 0x83d11250, 64, 1),
    'fcq_cq_al_empty_2'       : (reg_fcq_cq_al_empty_2     , 0x83d11250, 0x83d11258, 64, 1),
    'fcq_cq_al_full_2'        : (reg_fcq_cq_al_full_2      , 0x83d11258, 0x83d11260, 64, 1),
    'fcq_sq_wof_2'            : (reg_fcq_sq_wof_2          , 0x83d11260, 0x83d11268, 64, 1),
    'fcq_sq_roe_2'            : (reg_fcq_sq_roe_2          , 0x83d11268, 0x83d11270, 64, 1),
    'fcq_cq_wof_2'            : (reg_fcq_cq_wof_2          , 0x83d11270, 0x83d11278, 64, 1),
    'fcq_cq_roe_2'            : (reg_fcq_cq_roe_2          , 0x83d11278, 0x83d11280, 64, 1),
    'fcq_q_ost_2'             : (reg_fcq_q_ost_2           , 0x83d11280, 0x83d11288, 64, 1),
    'rd_cpl_fsm_wait'         : (reg_rd_cpl_fsm_wait       , 0x83d11288, 0x83d11290, 64, 1),
    'fct_pool_0_cfg_0'        : (reg_fct_pool_0_cfg_0      , 0x83d11300, 0x83d11308, 64, 1),
    'fct_pool_0_cfg_1'        : (reg_fct_pool_0_cfg_1      , 0x83d11308, 0x83d11310, 64, 1),
    'fct_pool_0_alloc'        : (reg_fct_pool_0_alloc      , 0x83d11310, 0x83d11318, 64, 1),
    'fct_pool_0_rls'          : (reg_fct_pool_0_rls        , 0x83d11318, 0x83d11320, 64, 1),
    'fct_pool_1_cfg_0'        : (reg_fct_pool_1_cfg_0      , 0x83d11320, 0x83d11328, 64, 1),
    'fct_pool_1_cfg_1'        : (reg_fct_pool_1_cfg_1      , 0x83d11328, 0x83d11330, 64, 1),
    'fct_pool_1_alloc'        : (reg_fct_pool_1_alloc      , 0x83d11330, 0x83d11338, 64, 1),
    'fct_pool_1_rls'          : (reg_fct_pool_1_rls        , 0x83d11338, 0x83d11340, 64, 1),
    'fct_pool_2_cfg_0'        : (reg_fct_pool_2_cfg_0      , 0x83d11340, 0x83d11348, 64, 1),
    'fct_pool_2_cfg_1'        : (reg_fct_pool_2_cfg_1      , 0x83d11348, 0x83d11350, 64, 1),
    'fct_pool_2_alloc'        : (reg_fct_pool_2_alloc      , 0x83d11350, 0x83d11358, 64, 1),
    'fct_pool_2_rls'          : (reg_fct_pool_2_rls        , 0x83d11358, 0x83d11360, 64, 1),
    'fct_pool_3_cfg_0'        : (reg_fct_pool_3_cfg_0      , 0x83d11360, 0x83d11368, 64, 1),
    'fct_pool_3_cfg_1'        : (reg_fct_pool_3_cfg_1      , 0x83d11368, 0x83d11370, 64, 1),
    'fct_pool_3_alloc'        : (reg_fct_pool_3_alloc      , 0x83d11370, 0x83d11378, 64, 1),
    'fct_pool_3_rls'          : (reg_fct_pool_3_rls        , 0x83d11378, 0x83d11380, 64, 1),
    'fct_pool_4_cfg_0'        : (reg_fct_pool_4_cfg_0      , 0x83d11380, 0x83d11388, 64, 1),
    'fct_pool_4_cfg_1'        : (reg_fct_pool_4_cfg_1      , 0x83d11388, 0x83d11390, 64, 1),
    'fct_pool_4_alloc'        : (reg_fct_pool_4_alloc      , 0x83d11390, 0x83d11398, 64, 1),
    'fct_pool_4_rls'          : (reg_fct_pool_4_rls        , 0x83d11398, 0x83d113a0, 64, 1),
    'fct_pool_5_cfg_0'        : (reg_fct_pool_5_cfg_0      , 0x83d113a0, 0x83d113a8, 64, 1),
    'fct_pool_5_cfg_1'        : (reg_fct_pool_5_cfg_1      , 0x83d113a8, 0x83d113b0, 64, 1),
    'fct_pool_5_alloc'        : (reg_fct_pool_5_alloc      , 0x83d113b0, 0x83d113b8, 64, 1),
    'fct_pool_5_rls'          : (reg_fct_pool_5_rls        , 0x83d113b8, 0x83d113c0, 64, 1),
    'fct_pool_6_cfg_0'        : (reg_fct_pool_6_cfg_0      , 0x83d113c0, 0x83d113c8, 64, 1),
    'fct_pool_6_cfg_1'        : (reg_fct_pool_6_cfg_1      , 0x83d113c8, 0x83d113d0, 64, 1),
    'fct_pool_6_alloc'        : (reg_fct_pool_6_alloc      , 0x83d113d0, 0x83d113d8, 64, 1),
    'fct_pool_6_rls'          : (reg_fct_pool_6_rls        , 0x83d113d8, 0x83d113e0, 64, 1),
    'fct_pool_7_cfg_0'        : (reg_fct_pool_7_cfg_0      , 0x83d113e0, 0x83d113e8, 64, 1),
    'fct_pool_7_cfg_1'        : (reg_fct_pool_7_cfg_1      , 0x83d113e8, 0x83d113f0, 64, 1),
    'fct_pool_7_alloc'        : (reg_fct_pool_7_alloc      , 0x83d113f0, 0x83d113f8, 64, 1),
    'fct_pool_7_rls'          : (reg_fct_pool_7_rls        , 0x83d113f8, 0x83d11400, 64, 1),
    'fct_pool_8_cfg_0'        : (reg_fct_pool_8_cfg_0      , 0x83d11400, 0x83d11408, 64, 1),
    'fct_pool_8_cfg_1'        : (reg_fct_pool_8_cfg_1      , 0x83d11408, 0x83d11410, 64, 1),
    'fct_pool_8_alloc'        : (reg_fct_pool_8_alloc      , 0x83d11410, 0x83d11418, 64, 1),
    'fct_pool_8_rls'          : (reg_fct_pool_8_rls        , 0x83d11418, 0x83d11420, 64, 1),
    'fct_pool_9_cfg_0'        : (reg_fct_pool_9_cfg_0      , 0x83d11420, 0x83d11428, 64, 1),
    'fct_pool_9_cfg_1'        : (reg_fct_pool_9_cfg_1      , 0x83d11428, 0x83d11430, 64, 1),
    'fct_pool_9_alloc'        : (reg_fct_pool_9_alloc      , 0x83d11430, 0x83d11438, 64, 1),
    'fct_pool_9_rls'          : (reg_fct_pool_9_rls        , 0x83d11438, 0x83d11440, 64, 1),
    'fct_pool_10_cfg_0'       : (reg_fct_pool_10_cfg_0     , 0x83d11440, 0x83d11448, 64, 1),
    'fct_pool_10_cfg_1'       : (reg_fct_pool_10_cfg_1     , 0x83d11448, 0x83d11450, 64, 1),
    'fct_pool_10_alloc'       : (reg_fct_pool_10_alloc     , 0x83d11450, 0x83d11458, 64, 1),
    'fct_pool_10_rls'         : (reg_fct_pool_10_rls       , 0x83d11458, 0x83d11460, 64, 1),
    'fct_pool_11_cfg_0'       : (reg_fct_pool_11_cfg_0     , 0x83d11460, 0x83d11468, 64, 1),
    'fct_pool_11_cfg_1'       : (reg_fct_pool_11_cfg_1     , 0x83d11468, 0x83d11470, 64, 1),
    'fct_pool_11_alloc'       : (reg_fct_pool_11_alloc     , 0x83d11470, 0x83d11478, 64, 1),
    'fct_pool_11_rls'         : (reg_fct_pool_11_rls       , 0x83d11478, 0x83d11480, 64, 1),
    'fct_pool_12_cfg_0'       : (reg_fct_pool_12_cfg_0     , 0x83d11480, 0x83d11488, 64, 1),
    'fct_pool_12_cfg_1'       : (reg_fct_pool_12_cfg_1     , 0x83d11488, 0x83d11490, 64, 1),
    'fct_pool_12_alloc'       : (reg_fct_pool_12_alloc     , 0x83d11490, 0x83d11498, 64, 1),
    'fct_pool_12_rls'         : (reg_fct_pool_12_rls       , 0x83d11498, 0x83d114a0, 64, 1),
    'fct_pool_13_cfg_0'       : (reg_fct_pool_13_cfg_0     , 0x83d114a0, 0x83d114a8, 64, 1),
    'fct_pool_13_cfg_1'       : (reg_fct_pool_13_cfg_1     , 0x83d114a8, 0x83d114b0, 64, 1),
    'fct_pool_13_alloc'       : (reg_fct_pool_13_alloc     , 0x83d114b0, 0x83d114b8, 64, 1),
    'fct_pool_13_rls'         : (reg_fct_pool_13_rls       , 0x83d114b8, 0x83d114c0, 64, 1),
    'fct_pool_14_cfg_0'       : (reg_fct_pool_14_cfg_0     , 0x83d114c0, 0x83d114c8, 64, 1),
    'fct_pool_14_cfg_1'       : (reg_fct_pool_14_cfg_1     , 0x83d114c8, 0x83d114d0, 64, 1),
    'fct_pool_14_alloc'       : (reg_fct_pool_14_alloc     , 0x83d114d0, 0x83d114d8, 64, 1),
    'fct_pool_14_rls'         : (reg_fct_pool_14_rls       , 0x83d114d8, 0x83d114e0, 64, 1),
    'fct_pool_15_cfg_0'       : (reg_fct_pool_15_cfg_0     , 0x83d114e0, 0x83d114e8, 64, 1),
    'fct_pool_15_cfg_1'       : (reg_fct_pool_15_cfg_1     , 0x83d114e8, 0x83d114f0, 64, 1),
    'fct_pool_15_alloc'       : (reg_fct_pool_15_alloc     , 0x83d114f0, 0x83d114f8, 64, 1),
    'fct_pool_15_rls'         : (reg_fct_pool_15_rls       , 0x83d114f8, 0x83d11500, 64, 1),
    'be_ace_flow_ctrl_0'      : (reg_be_ace_flow_ctrl_0    , 0x83d11500, 0x83d11508, 64, 1),
    'be_ace_flow_ctrl_1'      : (reg_be_ace_flow_ctrl_1    , 0x83d11508, 0x83d11510, 64, 1),
    'be_ace_flow_ctrl_2'      : (reg_be_ace_flow_ctrl_2    , 0x83d11510, 0x83d11518, 64, 1),
    'be_ace_flow_ctrl_3'      : (reg_be_ace_flow_ctrl_3    , 0x83d11518, 0x83d11520, 64, 1),
    'be_ace_flow_ctrl_4'      : (reg_be_ace_flow_ctrl_4    , 0x83d11520, 0x83d11528, 64, 1),
    'be_ace_flow_ctrl_5'      : (reg_be_ace_flow_ctrl_5    , 0x83d11528, 0x83d11530, 64, 1),
    'be_ace_debug'            : (reg_be_ace_debug          , 0x83d11540, 0x83d11548, 64, 1),
    'sys_dma_cfg'             : (reg_sys_dma_cfg           , 0x83d11550, 0x83d11558, 64, 1),
    'msg_id_cfg'              : (reg_msg_id_cfg            , 0x83d11558, 0x83d11560, 64, 1),
    'gc_wr_cfg'               : (reg_gc_wr_cfg             , 0x83d11560, 0x83d11568, 64, 1),
    'sys_dma_cfg_ext'         : (reg_sys_dma_cfg_ext       , 0x83d11568, 0x83d11570, 64, 1),
    'lb_mgr_status'           : (reg_lb_mgr_status         , 0x83d11570, 0x83d11578, 64, 1),
    'gc_wr_cfg_ext'           : (reg_gc_wr_cfg_ext         , 0x83d11578, 0x83d11580, 64, 1),
    'sdma_ch1_ctrl'           : (reg_sdma_ch1_ctrl         , 0x83d11580, 0x83d11588, 64, 1),
    'sdma_ch1_mask'           : (reg_sdma_ch1_mask         , 0x83d11588, 0x83d11590, 64, 1),
    'sdma_ch2_ctrl'           : (reg_sdma_ch2_ctrl         , 0x83d11590, 0x83d11598, 64, 1),
    'sdma_ch2_mask'           : (reg_sdma_ch2_mask         , 0x83d11598, 0x83d115a0, 64, 1),
    'sdma_ch3_ctrl'           : (reg_sdma_ch3_ctrl         , 0x83d115a0, 0x83d115a8, 64, 1),
    'sdma_ch3_mask'           : (reg_sdma_ch3_mask         , 0x83d115a8, 0x83d115b0, 64, 1),
    'sdma_ch4_ctrl'           : (reg_sdma_ch4_ctrl         , 0x83d115b0, 0x83d115b8, 64, 1),
    'sdma_ch4_mask'           : (reg_sdma_ch4_mask         , 0x83d115b8, 0x83d115c0, 64, 1),
    'gc_wr_cfg_bm'            : (reg_gc_wr_cfg_bm          , 0x83d115c0, 0x83d115c8, 64, 1),
    'msgid_fifo_rdwr_cnt'     : (reg_msgid_fifo_rdwr_cnt   , 0x83d115c8, 0x83d115cc, 32, 1),
    'be_ace_mem_ctrl_0'       : (reg_be_ace_mem_ctrl_0     , 0x83d11600, 0x83d11608, 64, 1),
    'be_ace_mem_err_inj_en'   : (reg_be_ace_mem_err_inj_en , 0x83d11608, 0x83d11610, 64, 1),
    'be_ace_mem_err_inj_sel'  : (reg_be_ace_mem_err_inj_sel, 0x83d11610, 0x83d11618, 64, 1),
    'be_ace_mem_err_inj_stat_0': (reg_be_ace_mem_err_inj_stat_0, 0x83d11618, 0x83d11620, 64, 1),
    'be_ace_mem_err_inj_stat_1': (reg_be_ace_mem_err_inj_stat_1, 0x83d11620, 0x83d11628, 64, 1),
    'be_ace_mem_acc_en'       : (reg_be_ace_mem_acc_en     , 0x83d11700, 0x83d11708, 64, 1),
    'be_ace_acc_mem_ctrl_0'   : (reg_be_ace_acc_mem_ctrl_0 , 0x83d11708, 0x83d11710, 64, 1),
    'be_ace_acc_mem_ctrl_1'   : (reg_be_ace_acc_mem_ctrl_1 , 0x83d11710, 0x83d11718, 64, 1),
    'be_ace_acc_mem_out_0'    : (reg_be_ace_acc_mem_out_0  , 0x83d11718, 0x83d11720, 64, 1),
    'be_ace_acc_mem_out_1'    : (reg_be_ace_acc_mem_out_1  , 0x83d11720, 0x83d11728, 64, 1),
    'be_ace_acc_mem_out_2'    : (reg_be_ace_acc_mem_out_2  , 0x83d11728, 0x83d11730, 64, 1),
    'be_ace_acc_mem_out_3'    : (reg_be_ace_acc_mem_out_3  , 0x83d11730, 0x83d11738, 64, 1),
    'be_ace_mon_ctrl'         : (reg_be_ace_mon_ctrl       , 0x83d11738, 0x83d11740, 64, 1),
    'be_ace_mon_sel'          : (reg_be_ace_mon_sel        , 0x83d11740, 0x83d11748, 64, 1),
    'be_ace_mon_sig_out'      : (reg_be_ace_mon_sig_out    , 0x83d11748, 0x83d11750, 64, 1),
    'be_ace_status'           : (reg_be_ace_status         , 0x83d11800, 0x83d11808, 64, 1),
    'sys_dma1_cfg'            : (reg_sys_dma1_cfg          , 0x83d11880, 0x83d11888, 64, 1),
    'sys_dma1_ch1_ctrl'       : (reg_sys_dma1_ch1_ctrl     , 0x83d11890, 0x83d11898, 64, 1),
    'sys_dma1_ch1_mask'       : (reg_sys_dma1_ch1_mask     , 0x83d11898, 0x83d118a0, 64, 1),
    'sys_dma1_ch2_ctrl'       : (reg_sys_dma1_ch2_ctrl     , 0x83d118a0, 0x83d118a8, 64, 1),
    'Sys_dma1_ch2_mask'       : (reg_Sys_dma1_ch2_mask     , 0x83d118a8, 0x83d118b0, 64, 1),
    'sys_dma1_ch3_ctrl'       : (reg_sys_dma1_ch3_ctrl     , 0x83d118b0, 0x83d118b8, 64, 1),
    'sys_dma1_ch3_mask'       : (reg_sys_dma1_ch3_mask     , 0x83d118b8, 0x83d118c0, 64, 1),
    'sys_dma1_ch4_ctrl'       : (reg_sys_dma1_ch4_ctrl     , 0x83d118c0, 0x83d118c8, 64, 1),
    'sys_dma1_ch4_mask'       : (reg_sys_dma1_ch4_mask     , 0x83d118c8, 0x83d118d0, 64, 1),
    'fct_pool_16_cfg_0'       : (reg_fct_pool_16_cfg_0     , 0x83d11900, 0x83d11908, 64, 1),
    'fct_pool_16_cfg_1'       : (reg_fct_pool_16_cfg_1     , 0x83d11908, 0x83d11910, 64, 1),
    'fct_pool_16_alloc'       : (reg_fct_pool_16_alloc     , 0x83d11910, 0x83d11918, 64, 1),
    'fct_pool_16_rls'         : (reg_fct_pool_16_rls       , 0x83d11918, 0x83d11920, 64, 1),
    'fct_pool_17_cfg_0'       : (reg_fct_pool_17_cfg_0     , 0x83d11920, 0x83d11928, 64, 1),
    'fct_pool_17_cfg_1'       : (reg_fct_pool_17_cfg_1     , 0x83d11928, 0x83d11930, 64, 1),
    'fct_pool_17_alloc'       : (reg_fct_pool_17_alloc     , 0x83d11930, 0x83d11938, 64, 1),
    'fct_pool_17_rls'         : (reg_fct_pool_17_rls       , 0x83d11938, 0x83d11940, 64, 1),
    'fct_pool_18_cfg_0'       : (reg_fct_pool_18_cfg_0     , 0x83d11940, 0x83d11948, 64, 1),
    'fct_pool_18_cfg_1'       : (reg_fct_pool_18_cfg_1     , 0x83d11948, 0x83d11950, 64, 1),
    'fct_pool_18_alloc'       : (reg_fct_pool_18_alloc     , 0x83d11950, 0x83d11958, 64, 1),
    'fct_pool_18_rls'         : (reg_fct_pool_18_rls       , 0x83d11958, 0x83d11960, 64, 1),
    'fct_pool_19_cfg_0'       : (reg_fct_pool_19_cfg_0     , 0x83d11960, 0x83d11968, 64, 1),
    'fct_pool_19_cfg_1'       : (reg_fct_pool_19_cfg_1     , 0x83d11968, 0x83d11970, 64, 1),
    'fct_pool_19_alloc'       : (reg_fct_pool_19_alloc     , 0x83d11970, 0x83d11978, 64, 1),
    'fct_pool_19_rls'         : (reg_fct_pool_19_rls       , 0x83d11978, 0x83d11980, 64, 1),
    'fct_pool_20_cfg_0'       : (reg_fct_pool_20_cfg_0     , 0x83d11980, 0x83d11988, 64, 1),
    'fct_pool_20_cfg_1'       : (reg_fct_pool_20_cfg_1     , 0x83d11988, 0x83d11990, 64, 1),
    'fct_pool_20_alloc'       : (reg_fct_pool_20_alloc     , 0x83d11990, 0x83d11998, 64, 1),
    'fct_pool_20_rls'         : (reg_fct_pool_20_rls       , 0x83d11998, 0x83d119a0, 64, 1),
    'fct_pool_21_cfg_0'       : (reg_fct_pool_21_cfg_0     , 0x83d119a0, 0x83d119a8, 64, 1),
    'fct_pool_21_cfg_1'       : (reg_fct_pool_21_cfg_1     , 0x83d119a8, 0x83d119b0, 64, 1),
    'fct_pool_21_alloc'       : (reg_fct_pool_21_alloc     , 0x83d119b0, 0x83d119b8, 64, 1),
    'fct_pool_21_rls'         : (reg_fct_pool_21_rls       , 0x83d119b8, 0x83d119c0, 64, 1),
    'fct_pool_22_cfg_0'       : (reg_fct_pool_22_cfg_0     , 0x83d119c0, 0x83d119c8, 64, 1),
    'fct_pool_22_cfg_1'       : (reg_fct_pool_22_cfg_1     , 0x83d119c8, 0x83d119d0, 64, 1),
    'fct_pool_22_alloc'       : (reg_fct_pool_22_alloc     , 0x83d119d0, 0x83d119d8, 64, 1),
    'fct_pool_22_rls'         : (reg_fct_pool_22_rls       , 0x83d119d8, 0x83d119e0, 64, 1),
    'fct_pool_23_cfg_0'       : (reg_fct_pool_23_cfg_0     , 0x83d119e0, 0x83d119e8, 64, 1),
    'fct_pool_23_cfg_1'       : (reg_fct_pool_23_cfg_1     , 0x83d119e8, 0x83d119f0, 64, 1),
    'fct_pool_23_alloc'       : (reg_fct_pool_23_alloc     , 0x83d119f0, 0x83d119f8, 64, 1),
    'fct_pool_23_rls'         : (reg_fct_pool_23_rls       , 0x83d119f8, 0x83d11a00, 64, 1),
    'fct_pool_24_cfg_0'       : (reg_fct_pool_24_cfg_0     , 0x83d11a00, 0x83d11a08, 64, 1),
    'fct_pool_24_cfg_1'       : (reg_fct_pool_24_cfg_1     , 0x83d11a08, 0x83d11a10, 64, 1),
    'fct_pool_24_alloc'       : (reg_fct_pool_24_alloc     , 0x83d11a10, 0x83d11a18, 64, 1),
    'fct_pool_24_rls'         : (reg_fct_pool_24_rls       , 0x83d11a18, 0x83d11a20, 64, 1),
    'fct_pool_25_cfg_0'       : (reg_fct_pool_25_cfg_0     , 0x83d11a20, 0x83d11a28, 64, 1),
    'fct_pool_25_cfg_1'       : (reg_fct_pool_25_cfg_1     , 0x83d11a28, 0x83d11a30, 64, 1),
    'fct_pool_25_alloc'       : (reg_fct_pool_25_alloc     , 0x83d11a30, 0x83d11a38, 64, 1),
    'fct_pool_25_rls'         : (reg_fct_pool_25_rls       , 0x83d11a38, 0x83d11a40, 64, 1),
    'fct_pool_26_cfg_0'       : (reg_fct_pool_26_cfg_0     , 0x83d11a40, 0x83d11a48, 64, 1),
    'fct_pool_26_cfg_1'       : (reg_fct_pool_26_cfg_1     , 0x83d11a48, 0x83d11a50, 64, 1),
    'fct_pool_26_alloc'       : (reg_fct_pool_26_alloc     , 0x83d11a50, 0x83d11a58, 64, 1),
    'fct_pool_26_rls'         : (reg_fct_pool_26_rls       , 0x83d11a58, 0x83d11a60, 64, 1),
    'fct_pool_27_cfg_0'       : (reg_fct_pool_27_cfg_0     , 0x83d11a60, 0x83d11a68, 64, 1),
    'fct_pool_27_cfg_1'       : (reg_fct_pool_27_cfg_1     , 0x83d11a68, 0x83d11a70, 64, 1),
    'fct_pool_27_alloc'       : (reg_fct_pool_27_alloc     , 0x83d11a70, 0x83d11a78, 64, 1),
    'fct_pool_27_rls'         : (reg_fct_pool_27_rls       , 0x83d11a78, 0x83d11a80, 64, 1),
    'fct_pool_28_cfg_0'       : (reg_fct_pool_28_cfg_0     , 0x83d11a80, 0x83d11a88, 64, 1),
    'fct_pool_28_cfg_1'       : (reg_fct_pool_28_cfg_1     , 0x83d11a88, 0x83d11a90, 64, 1),
    'fct_pool_28_alloc'       : (reg_fct_pool_28_alloc     , 0x83d11a90, 0x83d11a98, 64, 1),
    'fct_pool_28_rls'         : (reg_fct_pool_28_rls       , 0x83d11a98, 0x83d11aa0, 64, 1),
    'fct_pool_29_cfg_0'       : (reg_fct_pool_29_cfg_0     , 0x83d11aa0, 0x83d11aa8, 64, 1),
    'fct_pool_29_cfg_1'       : (reg_fct_pool_29_cfg_1     , 0x83d11aa8, 0x83d11ab0, 64, 1),
    'fct_pool_29_alloc'       : (reg_fct_pool_29_alloc     , 0x83d11ab0, 0x83d11ab8, 64, 1),
    'fct_pool_29_rls'         : (reg_fct_pool_29_rls       , 0x83d11ab8, 0x83d11ac0, 64, 1),
    'fct_pool_30_cfg_0'       : (reg_fct_pool_30_cfg_0     , 0x83d11ac0, 0x83d11ac8, 64, 1),
    'fct_pool_30_cfg_1'       : (reg_fct_pool_30_cfg_1     , 0x83d11ac8, 0x83d11ad0, 64, 1),
    'fct_pool_30_alloc'       : (reg_fct_pool_30_alloc     , 0x83d11ad0, 0x83d11ad8, 64, 1),
    'fct_pool_30_rls'         : (reg_fct_pool_30_rls       , 0x83d11ad8, 0x83d11ae0, 64, 1),
    'fct_pool_31_cfg_0'       : (reg_fct_pool_31_cfg_0     , 0x83d11ae0, 0x83d11ae8, 64, 1),
    'fct_pool_31_cfg_1'       : (reg_fct_pool_31_cfg_1     , 0x83d11ae8, 0x83d11af0, 64, 1),
    'fct_pool_31_alloc'       : (reg_fct_pool_31_alloc     , 0x83d11af0, 0x83d11af8, 64, 1),
    'fct_pool_31_rls'         : (reg_fct_pool_31_rls       , 0x83d11af8, 0x83d11b00, 64, 1),
    'fct_pool_32_cfg_0'       : (reg_fct_pool_32_cfg_0     , 0x83d11b00, 0x83d11b08, 64, 1),
    'fct_pool_32_cfg_1'       : (reg_fct_pool_32_cfg_1     , 0x83d11b08, 0x83d11b10, 64, 1),
    'fct_pool_32_alloc'       : (reg_fct_pool_32_alloc     , 0x83d11b10, 0x83d11b18, 64, 1),
    'fct_pool_32_rls'         : (reg_fct_pool_32_rls       , 0x83d11b18, 0x83d11b20, 64, 1),
    'fct_pool_33_cfg_0'       : (reg_fct_pool_33_cfg_0     , 0x83d11b20, 0x83d11b28, 64, 1),
    'fct_pool_33_cfg_1'       : (reg_fct_pool_33_cfg_1     , 0x83d11b28, 0x83d11b30, 64, 1),
    'fct_pool_33_alloc'       : (reg_fct_pool_33_alloc     , 0x83d11b30, 0x83d11b38, 64, 1),
    'fct_pool_33_rls'         : (reg_fct_pool_33_rls       , 0x83d11b38, 0x83d11b40, 64, 1),
    'fct_pool_34_cfg_0'       : (reg_fct_pool_34_cfg_0     , 0x83d11b40, 0x83d11b48, 64, 1),
    'fct_pool_34_cfg_1'       : (reg_fct_pool_34_cfg_1     , 0x83d11b48, 0x83d11b50, 64, 1),
    'fct_pool_34_alloc'       : (reg_fct_pool_34_alloc     , 0x83d11b50, 0x83d11b58, 64, 1),
    'fct_pool_34_rls'         : (reg_fct_pool_34_rls       , 0x83d11b58, 0x83d11b60, 64, 1),
    'fct_pool_35_cfg_0'       : (reg_fct_pool_35_cfg_0     , 0x83d11b60, 0x83d11b68, 64, 1),
    'fct_pool_35_cfg_1'       : (reg_fct_pool_35_cfg_1     , 0x83d11b68, 0x83d11b70, 64, 1),
    'fct_pool_35_alloc'       : (reg_fct_pool_35_alloc     , 0x83d11b70, 0x83d11b78, 64, 1),
    'fct_pool_35_rls'         : (reg_fct_pool_35_rls       , 0x83d11b78, 0x83d11b80, 64, 1),
    'fct_pool_36_cfg_0'       : (reg_fct_pool_36_cfg_0     , 0x83d11b80, 0x83d11b88, 64, 1),
    'fct_pool_36_cfg_1'       : (reg_fct_pool_36_cfg_1     , 0x83d11b88, 0x83d11b90, 64, 1),
    'fct_pool_36_alloc'       : (reg_fct_pool_36_alloc     , 0x83d11b90, 0x83d11b98, 64, 1),
    'fct_pool_36_rls'         : (reg_fct_pool_36_rls       , 0x83d11b98, 0x83d11ba0, 64, 1),
    'fct_pool_37_cfg_0'       : (reg_fct_pool_37_cfg_0     , 0x83d11ba0, 0x83d11ba8, 64, 1),
    'fct_pool_37_cfg_1'       : (reg_fct_pool_37_cfg_1     , 0x83d11ba8, 0x83d11bb0, 64, 1),
    'fct_pool_37_alloc'       : (reg_fct_pool_37_alloc     , 0x83d11bb0, 0x83d11bb8, 64, 1),
    'fct_pool_37_rls'         : (reg_fct_pool_37_rls       , 0x83d11bb8, 0x83d11bc0, 64, 1),
    'fct_pool_38_cfg_0'       : (reg_fct_pool_38_cfg_0     , 0x83d11bc0, 0x83d11bc8, 64, 1),
    'fct_pool_38_cfg_1'       : (reg_fct_pool_38_cfg_1     , 0x83d11bc8, 0x83d11bd0, 64, 1),
    'fct_pool_38_alloc'       : (reg_fct_pool_38_alloc     , 0x83d11bd0, 0x83d11bd8, 64, 1),
    'fct_pool_38_rls'         : (reg_fct_pool_38_rls       , 0x83d11bd8, 0x83d11be0, 64, 1),
    'fct_pool_39_cfg_0'       : (reg_fct_pool_39_cfg_0     , 0x83d11be0, 0x83d11be8, 64, 1),
    'fct_pool_39_cfg_1'       : (reg_fct_pool_39_cfg_1     , 0x83d11be8, 0x83d11bf0, 64, 1),
    'fct_pool_39_alloc'       : (reg_fct_pool_39_alloc     , 0x83d11bf0, 0x83d11bf8, 64, 1),
    'fct_pool_39_rls'         : (reg_fct_pool_39_rls       , 0x83d11bf8, 0x83d11c00, 64, 1),
    'fct_pool_40_cfg_0'       : (reg_fct_pool_40_cfg_0     , 0x83d11c00, 0x83d11c08, 64, 1),
    'fct_pool_40_cfg_1'       : (reg_fct_pool_40_cfg_1     , 0x83d11c08, 0x83d11c10, 64, 1),
    'fct_pool_40_alloc'       : (reg_fct_pool_40_alloc     , 0x83d11c10, 0x83d11c18, 64, 1),
    'fct_pool_40_rls'         : (reg_fct_pool_40_rls       , 0x83d11c18, 0x83d11c20, 64, 1),
    'fct_pool_41_cfg_0'       : (reg_fct_pool_41_cfg_0     , 0x83d11c20, 0x83d11c28, 64, 1),
    'fct_pool_41_cfg_1'       : (reg_fct_pool_41_cfg_1     , 0x83d11c28, 0x83d11c30, 64, 1),
    'fct_pool_41_alloc'       : (reg_fct_pool_41_alloc     , 0x83d11c30, 0x83d11c38, 64, 1),
    'fct_pool_41_rls'         : (reg_fct_pool_41_rls       , 0x83d11c38, 0x83d11c40, 64, 1),
    'fct_pool_42_cfg_0'       : (reg_fct_pool_42_cfg_0     , 0x83d11c40, 0x83d11c48, 64, 1),
    'fct_pool_42_cfg_1'       : (reg_fct_pool_42_cfg_1     , 0x83d11c48, 0x83d11c50, 64, 1),
    'fct_pool_42_alloc'       : (reg_fct_pool_42_alloc     , 0x83d11c50, 0x83d11c58, 64, 1),
    'fct_pool_42_rls'         : (reg_fct_pool_42_rls       , 0x83d11c58, 0x83d11c60, 64, 1),
    'fct_pool_43_cfg_0'       : (reg_fct_pool_43_cfg_0     , 0x83d11c60, 0x83d11c68, 64, 1),
    'fct_pool_43_cfg_1'       : (reg_fct_pool_43_cfg_1     , 0x83d11c68, 0x83d11c70, 64, 1),
    'fct_pool_43_alloc'       : (reg_fct_pool_43_alloc     , 0x83d11c70, 0x83d11c78, 64, 1),
    'fct_pool_43_rls'         : (reg_fct_pool_43_rls       , 0x83d11c78, 0x83d11c80, 64, 1),
    'fct_pool_44_cfg_0'       : (reg_fct_pool_44_cfg_0     , 0x83d11c80, 0x83d11c88, 64, 1),
    'fct_pool_44_cfg_1'       : (reg_fct_pool_44_cfg_1     , 0x83d11c88, 0x83d11c90, 64, 1),
    'fct_pool_44_alloc'       : (reg_fct_pool_44_alloc     , 0x83d11c90, 0x83d11c98, 64, 1),
    'fct_pool_44_rls'         : (reg_fct_pool_44_rls       , 0x83d11c98, 0x83d11ca0, 64, 1),
    'fct_pool_45_cfg_0'       : (reg_fct_pool_45_cfg_0     , 0x83d11ca0, 0x83d11ca8, 64, 1),
    'fct_pool_45_cfg_1'       : (reg_fct_pool_45_cfg_1     , 0x83d11ca8, 0x83d11cb0, 64, 1),
    'fct_pool_45_alloc'       : (reg_fct_pool_45_alloc     , 0x83d11cb0, 0x83d11cb8, 64, 1),
    'fct_pool_45_rls'         : (reg_fct_pool_45_rls       , 0x83d11cb8, 0x83d11cc0, 64, 1),
    'fct_pool_46_cfg_0'       : (reg_fct_pool_46_cfg_0     , 0x83d11cc0, 0x83d11cc8, 64, 1),
    'fct_pool_46_cfg_1'       : (reg_fct_pool_46_cfg_1     , 0x83d11cc8, 0x83d11cd0, 64, 1),
    'fct_pool_46_alloc'       : (reg_fct_pool_46_alloc     , 0x83d11cd0, 0x83d11cd8, 64, 1),
    'fct_pool_46_rls'         : (reg_fct_pool_46_rls       , 0x83d11cd8, 0x83d11ce0, 64, 1),
    'fct_pool_47_cfg_0'       : (reg_fct_pool_47_cfg_0     , 0x83d11ce0, 0x83d11ce8, 64, 1),
    'fct_pool_47_cfg_1'       : (reg_fct_pool_47_cfg_1     , 0x83d11ce8, 0x83d11cf0, 64, 1),
    'fct_pool_47_alloc'       : (reg_fct_pool_47_alloc     , 0x83d11cf0, 0x83d11cf8, 64, 1),
    'fct_pool_47_rls'         : (reg_fct_pool_47_rls       , 0x83d11cf8, 0x83d11d00, 64, 1),
    'fct_pool_48_cfg_0'       : (reg_fct_pool_48_cfg_0     , 0x83d11d00, 0x83d11d08, 64, 1),
    'fct_pool_48_cfg_1'       : (reg_fct_pool_48_cfg_1     , 0x83d11d08, 0x83d11d10, 64, 1),
    'fct_pool_48_alloc'       : (reg_fct_pool_48_alloc     , 0x83d11d10, 0x83d11d18, 64, 1),
    'fct_pool_48_rls'         : (reg_fct_pool_48_rls       , 0x83d11d18, 0x83d11d20, 64, 1),
    'fct_pool_49_cfg_0'       : (reg_fct_pool_49_cfg_0     , 0x83d11d20, 0x83d11d28, 64, 1),
    'fct_pool_49_cfg_1'       : (reg_fct_pool_49_cfg_1     , 0x83d11d28, 0x83d11d30, 64, 1),
    'fct_pool_49_alloc'       : (reg_fct_pool_49_alloc     , 0x83d11d30, 0x83d11d38, 64, 1),
    'fct_pool_49_rls'         : (reg_fct_pool_49_rls       , 0x83d11d38, 0x83d11d40, 64, 1),
    'fct_pool_50_cfg_0'       : (reg_fct_pool_50_cfg_0     , 0x83d11d40, 0x83d11d48, 64, 1),
    'fct_pool_50_cfg_1'       : (reg_fct_pool_50_cfg_1     , 0x83d11d48, 0x83d11d50, 64, 1),
    'fct_pool_50_alloc'       : (reg_fct_pool_50_alloc     , 0x83d11d50, 0x83d11d58, 64, 1),
    'fct_pool_50_rls'         : (reg_fct_pool_50_rls       , 0x83d11d58, 0x83d11d60, 64, 1),
    'fct_pool_51_cfg_0'       : (reg_fct_pool_51_cfg_0     , 0x83d11d60, 0x83d11d68, 64, 1),
    'fct_pool_51_cfg_1'       : (reg_fct_pool_51_cfg_1     , 0x83d11d68, 0x83d11d70, 64, 1),
    'fct_pool_51_alloc'       : (reg_fct_pool_51_alloc     , 0x83d11d70, 0x83d11d78, 64, 1),
    'fct_pool_51_rls'         : (reg_fct_pool_51_rls       , 0x83d11d78, 0x83d11d80, 64, 1),
    'fct_pool_52_cfg_0'       : (reg_fct_pool_52_cfg_0     , 0x83d11d80, 0x83d11d88, 64, 1),
    'fct_pool_52_cfg_1'       : (reg_fct_pool_52_cfg_1     , 0x83d11d88, 0x83d11d90, 64, 1),
    'fct_pool_52_alloc'       : (reg_fct_pool_52_alloc     , 0x83d11d90, 0x83d11d98, 64, 1),
    'fct_pool_52_rls'         : (reg_fct_pool_52_rls       , 0x83d11d98, 0x83d11da0, 64, 1),
    'fct_pool_53_cfg_0'       : (reg_fct_pool_53_cfg_0     , 0x83d11da0, 0x83d11da8, 64, 1),
    'fct_pool_53_cfg_1'       : (reg_fct_pool_53_cfg_1     , 0x83d11da8, 0x83d11db0, 64, 1),
    'fct_pool_53_alloc'       : (reg_fct_pool_53_alloc     , 0x83d11db0, 0x83d11db8, 64, 1),
    'fct_pool_53_rls'         : (reg_fct_pool_53_rls       , 0x83d11db8, 0x83d11dc0, 64, 1),
    'fct_pool_54_cfg_0'       : (reg_fct_pool_54_cfg_0     , 0x83d11dc0, 0x83d11dc8, 64, 1),
    'fct_pool_54_cfg_1'       : (reg_fct_pool_54_cfg_1     , 0x83d11dc8, 0x83d11dd0, 64, 1),
    'fct_pool_54_alloc'       : (reg_fct_pool_54_alloc     , 0x83d11dd0, 0x83d11dd8, 64, 1),
    'fct_pool_54_rls'         : (reg_fct_pool_54_rls       , 0x83d11dd8, 0x83d11de0, 64, 1),
    'fct_pool_55_cfg_0'       : (reg_fct_pool_55_cfg_0     , 0x83d11de0, 0x83d11de8, 64, 1),
    'fct_pool_55_cfg_1'       : (reg_fct_pool_55_cfg_1     , 0x83d11de8, 0x83d11df0, 64, 1),
    'fct_pool_55_alloc'       : (reg_fct_pool_55_alloc     , 0x83d11df0, 0x83d11df8, 64, 1),
    'fct_pool_55_rls'         : (reg_fct_pool_55_rls       , 0x83d11df8, 0x83d11e00, 64, 1),
    'fct_pool_56_cfg_0'       : (reg_fct_pool_56_cfg_0     , 0x83d11e00, 0x83d11e08, 64, 1),
    'fct_pool_56_cfg_1'       : (reg_fct_pool_56_cfg_1     , 0x83d11e08, 0x83d11e10, 64, 1),
    'fct_pool_56_alloc'       : (reg_fct_pool_56_alloc     , 0x83d11e10, 0x83d11e18, 64, 1),
    'fct_pool_56_rls'         : (reg_fct_pool_56_rls       , 0x83d11e18, 0x83d11e20, 64, 1),
    'fct_pool_57_cfg_0'       : (reg_fct_pool_57_cfg_0     , 0x83d11e20, 0x83d11e28, 64, 1),
    'fct_pool_57_cfg_1'       : (reg_fct_pool_57_cfg_1     , 0x83d11e28, 0x83d11e30, 64, 1),
    'fct_pool_57_alloc'       : (reg_fct_pool_57_alloc     , 0x83d11e30, 0x83d11e38, 64, 1),
    'fct_pool_57_rls'         : (reg_fct_pool_57_rls       , 0x83d11e38, 0x83d11e40, 64, 1),
    'fct_pool_58_cfg_0'       : (reg_fct_pool_58_cfg_0     , 0x83d11e40, 0x83d11e48, 64, 1),
    'fct_pool_58_cfg_1'       : (reg_fct_pool_58_cfg_1     , 0x83d11e48, 0x83d11e50, 64, 1),
    'fct_pool_58_alloc'       : (reg_fct_pool_58_alloc     , 0x83d11e50, 0x83d11e58, 64, 1),
    'fct_pool_58_rls'         : (reg_fct_pool_58_rls       , 0x83d11e58, 0x83d11e60, 64, 1),
    'fct_pool_59_cfg_0'       : (reg_fct_pool_59_cfg_0     , 0x83d11e60, 0x83d11e68, 64, 1),
    'fct_pool_59_cfg_1'       : (reg_fct_pool_59_cfg_1     , 0x83d11e68, 0x83d11e70, 64, 1),
    'fct_pool_59_alloc'       : (reg_fct_pool_59_alloc     , 0x83d11e70, 0x83d11e78, 64, 1),
    'fct_pool_59_rls'         : (reg_fct_pool_59_rls       , 0x83d11e78, 0x83d11e80, 64, 1),
    'fct_pool_60_cfg_0'       : (reg_fct_pool_60_cfg_0     , 0x83d11e80, 0x83d11e88, 64, 1),
    'fct_pool_60_cfg_1'       : (reg_fct_pool_60_cfg_1     , 0x83d11e88, 0x83d11e90, 64, 1),
    'fct_pool_60_alloc'       : (reg_fct_pool_60_alloc     , 0x83d11e90, 0x83d11e98, 64, 1),
    'fct_pool_60_rls'         : (reg_fct_pool_60_rls       , 0x83d11e98, 0x83d11ea0, 64, 1),
    'fct_pool_61_cfg_0'       : (reg_fct_pool_61_cfg_0     , 0x83d11ea0, 0x83d11ea8, 64, 1),
    'fct_pool_61_cfg_1'       : (reg_fct_pool_61_cfg_1     , 0x83d11ea8, 0x83d11eb0, 64, 1),
    'fct_pool_61_alloc'       : (reg_fct_pool_61_alloc     , 0x83d11eb0, 0x83d11eb8, 64, 1),
    'fct_pool_61_rls'         : (reg_fct_pool_61_rls       , 0x83d11eb8, 0x83d11ec0, 64, 1),
    'fct_pool_62_cfg_0'       : (reg_fct_pool_62_cfg_0     , 0x83d11ec0, 0x83d11ec8, 64, 1),
    'fct_pool_62_cfg_1'       : (reg_fct_pool_62_cfg_1     , 0x83d11ec8, 0x83d11ed0, 64, 1),
    'fct_pool_62_alloc'       : (reg_fct_pool_62_alloc     , 0x83d11ed0, 0x83d11ed8, 64, 1),
    'fct_pool_62_rls'         : (reg_fct_pool_62_rls       , 0x83d11ed8, 0x83d11ee0, 64, 1),
    'fct_pool_63_cfg_0'       : (reg_fct_pool_63_cfg_0     , 0x83d11ee0, 0x83d11ee8, 64, 1),
    'fct_pool_63_cfg_1'       : (reg_fct_pool_63_cfg_1     , 0x83d11ee8, 0x83d11ef0, 64, 1),
    'fct_pool_63_alloc'       : (reg_fct_pool_63_alloc     , 0x83d11ef0, 0x83d11ef8, 64, 1),
    'fct_pool_63_rls'         : (reg_fct_pool_63_rls       , 0x83d11ef8, 0x83d11f00, 64, 1),
    'WDOGLOAD'                : (reg_WDOGLOAD              , 0x22220000, 0x22220004, 32, 1),
    'WDOGVALUE'               : (reg_WDOGVALUE             , 0x22220004, 0x22220008, 32, 1),
    'WDOGCONTROL'             : (reg_WDOGCONTROL           , 0x22220008, 0x2222000c, 32, 1),
    'WDOGINTCLR'              : (reg_WDOGINTCLR            , 0x2222000c, 0x22220010, 32, 1),
    'WDOGRIS'                 : (reg_WDOGRIS               , 0x22220010, 0x22220014, 32, 1),
    'WDOGMIS'                 : (reg_WDOGMIS               , 0x22220014, 0x22220018, 32, 1),
    'WDOGLOCK'                : (reg_WDOGLOCK              , 0x22220c00, 0x22220c04, 32, 1),
    'WDOGITCR'                : (reg_WDOGITCR              , 0x22220f00, 0x22220f04, 32, 1),
    'WDOGITOP'                : (reg_WDOGITOP              , 0x22220f04, 0x22220f08, 32, 1),
    'WDOGPERIPHID0'           : (reg_WDOGPERIPHID0         , 0x22220fe0, 0x22220fe4, 32, 1),
    'WDOGPERIPHID1'           : (reg_WDOGPERIPHID1         , 0x22220fe4, 0x22220fe8, 32, 1),
    'WDOGPERIPHID2'           : (reg_WDOGPERIPHID2         , 0x22220fe8, 0x22220fec, 32, 1),
    'WDOGPERIPHID3'           : (reg_WDOGPERIPHID3         , 0x22220fec, 0x22220ff0, 32, 1),
    'WDOGPCELLID0'            : (reg_WDOGPCELLID0          , 0x22220ff0, 0x22220ff4, 32, 1),
    'WDOGPCELLID1'            : (reg_WDOGPCELLID1          , 0x22220ff4, 0x22220ff8, 32, 1),
    'WDOGPCELLID2'            : (reg_WDOGPCELLID2          , 0x22220ff8, 0x22220ffc, 32, 1),
    'WDOGPCELLID3'            : (reg_WDOGPCELLID3          , 0x22220ffc, 0x22221000, 32, 1),
    'dcs_control'             : (reg_dcs_control           , 0x83470000, 0x83470004, 32, 1),
    'dcs_control1'            : (reg_dcs_control1          , 0x83470004, 0x83470008, 32, 1),
    'intr_status'             : (reg_intr_status           , 0x83470010, 0x83470014, 32, 1),
    'intr_mask'               : (reg_intr_mask             , 0x83470014, 0x83470018, 32, 1),
    'intr_rc'                 : (reg_intr_rc               , 0x83470018, 0x8347001c, 32, 1),
    'intr_shadow'             : (reg_intr_shadow           , 0x8347001c, 0x83470020, 32, 1),
    'inbuf_bitmap_intr_status': (reg_inbuf_bitmap_intr_status, 0x83470020, 0x83470024, 32, 1),
    'inbuf_bitmap_intr_mask'  : (reg_inbuf_bitmap_intr_mask, 0x83470024, 0x83470028, 32, 1),
    'inbuf_bitmap_intr_rc'    : (reg_inbuf_bitmap_intr_rc  , 0x83470028, 0x8347002c, 32, 1),
    'inbuf_bitmap_intr_shadow': (reg_inbuf_bitmap_intr_shadow, 0x8347002c, 0x83470030, 32, 1),
    'outbuf_bitmap_intr_status': (reg_outbuf_bitmap_intr_status, 0x83470030, 0x83470034, 32, 1),
    'outbuf_bitmap_intr_mask' : (reg_outbuf_bitmap_intr_mask, 0x83470034, 0x83470038, 32, 1),
    'outbuf_bitmap_intr_rc'   : (reg_outbuf_bitmap_intr_rc , 0x83470038, 0x8347003c, 32, 1),
    'outbuf_bitmap_intr_shadow': (reg_outbuf_bitmap_intr_shadow, 0x8347003c, 0x83470040, 32, 1),
    'outbuf_fuse_intr_status' : (reg_outbuf_fuse_intr_status, 0x83470040, 0x83470044, 32, 1),
    'outbuf_fuse_intr_mask'   : (reg_outbuf_fuse_intr_mask , 0x83470044, 0x83470048, 32, 1),
    'outbuf_fuse_intr_rc'     : (reg_outbuf_fuse_intr_rc   , 0x83470048, 0x8347004c, 32, 1),
    'outbuf_fuse_intr_shadow' : (reg_outbuf_fuse_intr_shadow, 0x8347004c, 0x83470050, 32, 1),
    'err_stat_intr_status'    : (reg_err_stat_intr_status  , 0x83470050, 0x83470054, 32, 1),
    'err_stat_intr_mask'      : (reg_err_stat_intr_mask    , 0x83470054, 0x83470058, 32, 1),
    'err_stat_intr_rc'        : (reg_err_stat_intr_rc      , 0x83470058, 0x8347005c, 32, 1),
    'err_stat_intr_shadow'    : (reg_err_stat_intr_shadow  , 0x8347005c, 0x83470060, 32, 1),
    'mem_control'             : (reg_mem_control           , 0x83470060, 0x83470064, 32, 1),
    'mem_cor_err'             : (reg_mem_cor_err           , 0x83470064, 0x83470068, 32, 1),
    'mem_uncor_err'           : (reg_mem_uncor_err         , 0x83470068, 0x8347006c, 32, 1),
    'dcs_inbuf_bitmap_status' : (reg_dcs_inbuf_bitmap_status, 0x83470080, 0x83470084, 32, 1),
    'dcs_outbuf_bitmap_status': (reg_dcs_outbuf_bitmap_status, 0x83470090, 0x83470094, 32, 1),
    'outbuf_bitmap_status1'   : (reg_outbuf_bitmap_status1 , 0x83470094, 0x83470098, 32, 1),
    'outbuf_bitmap_status2'   : (reg_outbuf_bitmap_status2 , 0x83470098, 0x8347009c, 32, 1),
    'outbuf_bitmap_status3'   : (reg_outbuf_bitmap_status3 , 0x8347009c, 0x834700a0, 32, 1),
    'outbuf_bitmap_status4'   : (reg_outbuf_bitmap_status4 , 0x834700a0, 0x834700a4, 32, 1),
    'outbuf_bitmap_status5'   : (reg_outbuf_bitmap_status5 , 0x834700a4, 0x834700a8, 32, 1),
    'outbuf_bitmap_status6'   : (reg_outbuf_bitmap_status6 , 0x834700a8, 0x834700ac, 32, 1),
    'outbuf_bitmap_status7'   : (reg_outbuf_bitmap_status7 , 0x834700ac, 0x834700b0, 32, 1),
    'outbuf_bitmap1_intr_status': (reg_outbuf_bitmap1_intr_status, 0x834700b0, 0x834700b4, 32, 1),
    'outbuf_bitmap1_intr_mask': (reg_outbuf_bitmap1_intr_mask, 0x834700b4, 0x834700b8, 32, 1),
    'outbuf_bitmap1_intr_rc'  : (reg_outbuf_bitmap1_intr_rc, 0x834700b8, 0x834700bc, 32, 1),
    'outbuf_bitmap1_intr_shadow': (reg_outbuf_bitmap1_intr_shadow, 0x834700bc, 0x834700c0, 32, 1),
    'outbuf_bitmap2_intr_status': (reg_outbuf_bitmap2_intr_status, 0x834700c0, 0x834700c4, 32, 1),
    'outbuf_bitmap2_intr_mask': (reg_outbuf_bitmap2_intr_mask, 0x834700c4, 0x834700c8, 32, 1),
    'outbuf_bitmap2_intr_rc'  : (reg_outbuf_bitmap2_intr_rc, 0x834700c8, 0x834700cc, 32, 1),
    'outbuf_bitmap2_intr_shadow': (reg_outbuf_bitmap2_intr_shadow, 0x834700cc, 0x834700d0, 32, 1),
    'outbuf_bitmap3_intr_status': (reg_outbuf_bitmap3_intr_status, 0x834700d0, 0x834700d4, 32, 1),
    'outbuf_bitmap3_intr_mask': (reg_outbuf_bitmap3_intr_mask, 0x834700d4, 0x834700d8, 32, 1),
    'outbuf_bitmap3_intr_rc'  : (reg_outbuf_bitmap3_intr_rc, 0x834700d8, 0x834700dc, 32, 1),
    'outbuf_bitmap3_intr_shadow': (reg_outbuf_bitmap3_intr_shadow, 0x834700dc, 0x834700e0, 32, 1),
    'outbuf_bitmap4_intr_status': (reg_outbuf_bitmap4_intr_status, 0x834700e0, 0x834700e4, 32, 1),
    'outbuf_bitmap4_intr_mask': (reg_outbuf_bitmap4_intr_mask, 0x834700e4, 0x834700e8, 32, 1),
    'outbuf_bitmap4_intr_rc'  : (reg_outbuf_bitmap4_intr_rc, 0x834700e8, 0x834700ec, 32, 1),
    'outbuf_bitmap4_intr_shadow': (reg_outbuf_bitmap4_intr_shadow, 0x834700ec, 0x834700f0, 32, 1),
    'outbuf_bitmap5_intr_status': (reg_outbuf_bitmap5_intr_status, 0x834700f0, 0x834700f4, 32, 1),
    'outbuf_bitmap5_intr_mask': (reg_outbuf_bitmap5_intr_mask, 0x834700f4, 0x834700f8, 32, 1),
    'outbuf_bitmap5_intr_rc'  : (reg_outbuf_bitmap5_intr_rc, 0x834700f8, 0x834700fc, 32, 1),
    'outbuf_bitmap5_intr_shadow': (reg_outbuf_bitmap5_intr_shadow, 0x834700fc, 0x83470100, 32, 1),
    'outbuf_bitmap6_intr_status': (reg_outbuf_bitmap6_intr_status, 0x83470100, 0x83470104, 32, 1),
    'outbuf_bitmap6_intr_mask': (reg_outbuf_bitmap6_intr_mask, 0x83470104, 0x83470108, 32, 1),
    'outbuf_bitmap6_intr_rc'  : (reg_outbuf_bitmap6_intr_rc, 0x83470108, 0x8347010c, 32, 1),
    'outbuf_bitmap6_intr_shadow': (reg_outbuf_bitmap6_intr_shadow, 0x8347010c, 0x83470110, 32, 1),
    'outbuf_bitmap7_intr_status': (reg_outbuf_bitmap7_intr_status, 0x83470110, 0x83470114, 32, 1),
    'outbuf_bitmap7_intr_mask': (reg_outbuf_bitmap7_intr_mask, 0x83470114, 0x83470118, 32, 1),
    'outbuf_bitmap7_intr_rc'  : (reg_outbuf_bitmap7_intr_rc, 0x83470118, 0x8347011c, 32, 1),
    'outbuf_bitmap7_intr_shadow': (reg_outbuf_bitmap7_intr_shadow, 0x8347011c, 0x83470120, 32, 1),
    'dcs_inbuf_bitmap_s0_status': (reg_dcs_inbuf_bitmap_s0_status, 0x83470150, 0x83470154, 32, 1),
    'dcs_inbuf_bitmap_s1_status': (reg_dcs_inbuf_bitmap_s1_status, 0x83470154, 0x83470158, 32, 1),
    'dcs_inbuf_bitmap_s2_status': (reg_dcs_inbuf_bitmap_s2_status, 0x83470158, 0x8347015c, 32, 1),
    'dcs_inbuf_bitmap_s3_status': (reg_dcs_inbuf_bitmap_s3_status, 0x8347015c, 0x83470160, 32, 1),
    'dcs_inbuf_bitmap_s4_status': (reg_dcs_inbuf_bitmap_s4_status, 0x83470160, 0x83470164, 32, 1),
    'dcs_inbuf_bitmap_s5_status': (reg_dcs_inbuf_bitmap_s5_status, 0x83470164, 0x83470168, 32, 1),
    'dcs_inbuf_bitmap_s6_status': (reg_dcs_inbuf_bitmap_s6_status, 0x83470168, 0x8347016c, 32, 1),
    'dcs_inbuf_bitmap_s7_status': (reg_dcs_inbuf_bitmap_s7_status, 0x8347016c, 0x83470170, 32, 1),
    'sed_ctrl'                : (reg_sed_ctrl              , 0x83470200, 0x83470204, 32, 1),
    'sed_ddr_base_addr0'      : (reg_sed_ddr_base_addr0    , 0x83470204, 0x83470208, 32, 1),
    'sed_ddr_base_addr1'      : (reg_sed_ddr_base_addr1    , 0x83470208, 0x8347020c, 32, 1),
    'sed_key_idx_ovr'         : (reg_sed_key_idx_ovr       , 0x8347020c, 0x83470210, 32, 1),
    'sed_key_idx_0'           : (reg_sed_key_idx_0         , 0x83470210, 0x83470214, 32, 1),
    'sed_key_idx_1'           : (reg_sed_key_idx_1         , 0x83470214, 0x83470218, 32, 1),
    'sed_key_idx_2'           : (reg_sed_key_idx_2         , 0x83470218, 0x8347021c, 32, 1),
    'sed_key_idx_3'           : (reg_sed_key_idx_3         , 0x8347021c, 0x83470220, 32, 1),
    'sed_key_idx_4'           : (reg_sed_key_idx_4         , 0x83470220, 0x83470224, 32, 1),
    'sed_key_idx_5'           : (reg_sed_key_idx_5         , 0x83470224, 0x83470228, 32, 1),
    'sed_key_idx_6'           : (reg_sed_key_idx_6         , 0x83470228, 0x8347022c, 32, 1),
    'sed_key_idx_7'           : (reg_sed_key_idx_7         , 0x8347022c, 0x83470230, 32, 1),
    'sed_key_idx_8'           : (reg_sed_key_idx_8         , 0x83470230, 0x83470234, 32, 1),
    'sed_key_idx_9'           : (reg_sed_key_idx_9         , 0x83470234, 0x83470238, 32, 1),
    'sed_key_idx_10'          : (reg_sed_key_idx_10        , 0x83470238, 0x8347023c, 32, 1),
    'sed_key_idx_11'          : (reg_sed_key_idx_11        , 0x8347023c, 0x83470240, 32, 1),
    'sed_key_idx_12'          : (reg_sed_key_idx_12        , 0x83470240, 0x83470244, 32, 1),
    'sed_key_idx_13'          : (reg_sed_key_idx_13        , 0x83470244, 0x83470248, 32, 1),
    'sed_key_idx_14'          : (reg_sed_key_idx_14        , 0x83470248, 0x8347024c, 32, 1),
    'sed_key_idx_15'          : (reg_sed_key_idx_15        , 0x8347024c, 0x83470250, 32, 1),
    'sss_control_reg_value'   : (reg_sss_control_reg_value , 0x83470250, 0x83470254, 32, 1),
    'key_cache'               : (reg_key_cache             , 0x83470400, 0x83470840, 32, 272),
    'aes_tweak'               : (reg_aes_tweak             , 0x83470900, 0x83470a10, 32, 68),
    'dcs_cplq_cnfg0'          : (reg_dcs_cplq_cnfg0        , 0x83471000, 0x83471004, 32, 1),
    'dcs_cplq_cnfg1'          : (reg_dcs_cplq_cnfg1        , 0x83471004, 0x83471008, 32, 1),
    'dcs_cplq_cnfg2'          : (reg_dcs_cplq_cnfg2        , 0x83471008, 0x8347100c, 32, 1),
    'dcs_cplq_cnfg3'          : (reg_dcs_cplq_cnfg3        , 0x8347100c, 0x83471010, 32, 1),
    'cac_base0'               : (reg_cac_base0             , 0x83471080, 0x83471084, 32, 1),
    'cac_base1'               : (reg_cac_base1             , 0x83471084, 0x83471088, 32, 1),
    'ddma_ctrl0'              : (reg_ddma_ctrl0            , 0x83471090, 0x83471094, 32, 1),
    'ddma_ctrl1'              : (reg_ddma_ctrl1            , 0x83471094, 0x83471098, 32, 1),
    'ddma_ctrl2'              : (reg_ddma_ctrl2            , 0x83471098, 0x8347109c, 32, 1),
    'ddma_ctrl3'              : (reg_ddma_ctrl3            , 0x8347109c, 0x834710a0, 32, 1),
    'dcs_mon_out'             : (reg_dcs_mon_out           , 0x834710a0, 0x834710a4, 32, 1),
    'dcs_mon_sel'             : (reg_dcs_mon_sel           , 0x834710a4, 0x834710a8, 32, 1),
    'dcs_axi_attrib_range0_saddr0': (reg_dcs_axi_attrib_range0_saddr0, 0x83472280, 0x83472284, 32, 1),
    'dcs_axi_attrib_range0_saddr1': (reg_dcs_axi_attrib_range0_saddr1, 0x83472284, 0x83472288, 32, 1),
    'dcs_axi_attrib_range1_saddr0': (reg_dcs_axi_attrib_range1_saddr0, 0x83472288, 0x8347228c, 32, 1),
    'dcs_axi_attrib_range1_saddr1': (reg_dcs_axi_attrib_range1_saddr1, 0x8347228c, 0x83472290, 32, 1),
    'dcs_axi_attrib_range2_saddr0': (reg_dcs_axi_attrib_range2_saddr0, 0x83472290, 0x83472294, 32, 1),
    'dcs_axi_attrib_range2_saddr1': (reg_dcs_axi_attrib_range2_saddr1, 0x83472294, 0x83472298, 32, 1),
    'dcs_axi_attrib_range3_saddr0': (reg_dcs_axi_attrib_range3_saddr0, 0x83472298, 0x8347229c, 32, 1),
    'dcs_axi_attrib_range3_saddr1': (reg_dcs_axi_attrib_range3_saddr1, 0x8347229c, 0x834722a0, 32, 1),
    'dcs_axi_attrib_range0_eaddr0': (reg_dcs_axi_attrib_range0_eaddr0, 0x834722a0, 0x834722a4, 32, 1),
    'dcs_axi_attrib_range0_eaddr1': (reg_dcs_axi_attrib_range0_eaddr1, 0x834722a4, 0x834722a8, 32, 1),
    'dcs_axi_attrib_range1_eaddr0': (reg_dcs_axi_attrib_range1_eaddr0, 0x834722a8, 0x834722ac, 32, 1),
    'dcs_axi_attrib_range1_eaddr1': (reg_dcs_axi_attrib_range1_eaddr1, 0x834722ac, 0x834722b0, 32, 1),
    'dcs_axi_attrib_range2_eaddr0': (reg_dcs_axi_attrib_range2_eaddr0, 0x834722b0, 0x834722b4, 32, 1),
    'dcs_axi_attrib_range2_eaddr1': (reg_dcs_axi_attrib_range2_eaddr1, 0x834722b4, 0x834722b8, 32, 1),
    'dcs_axi_attrib_range3_eaddr0': (reg_dcs_axi_attrib_range3_eaddr0, 0x834722b8, 0x834722bc, 32, 1),
    'dcs_axi_attrib_range3_eaddr1': (reg_dcs_axi_attrib_range3_eaddr1, 0x834722bc, 0x834722c0, 32, 1),
    'dcs_axi_attrib_ctrl_0'   : (reg_dcs_axi_attrib_ctrl_0 , 0x834722c0, 0x834722c4, 32, 1),
    'dcs_axi_attrib_ctrl_1'   : (reg_dcs_axi_attrib_ctrl_1 , 0x834722c4, 0x834722c8, 32, 1),
    'sm3_ctrl_0'              : (reg_sm3_ctrl_0            , 0x83472300, 0x83472304, 32, 1),
    'sm3_ctrl_1'              : (reg_sm3_ctrl_1            , 0x83472304, 0x83472308, 32, 1),
    'sm3_obj_size'            : (reg_sm3_obj_size          , 0x83472308, 0x8347230c, 32, 1),
    'sm3_load_msg'            : (reg_sm3_load_msg          , 0x8347230c, 0x83472310, 32, 1),
    'sm3_hash_data0'          : (reg_sm3_hash_data0        , 0x83472310, 0x83472314, 32, 1),
    'sm3_hash_data1'          : (reg_sm3_hash_data1        , 0x83472314, 0x83472318, 32, 1),
    'sm3_hash_data2'          : (reg_sm3_hash_data2        , 0x83472318, 0x8347231c, 32, 1),
    'sm3_hash_data3'          : (reg_sm3_hash_data3        , 0x8347231c, 0x83472320, 32, 1),
    'sm3_hash_data4'          : (reg_sm3_hash_data4        , 0x83472320, 0x83472324, 32, 1),
    'sm3_hash_data5'          : (reg_sm3_hash_data5        , 0x83472324, 0x83472328, 32, 1),
    'sm3_hash_data6'          : (reg_sm3_hash_data6        , 0x83472328, 0x8347232c, 32, 1),
    'sm3_hash_data7'          : (reg_sm3_hash_data7        , 0x8347232c, 0x83472330, 32, 1),
    'cac_csr_register'        : (reg_cac_csr_register      , 0x8347f000, 0x83480000, 32, 1024),
    'feace_control'           : (reg_feace_control         , 0x83460000, 0x83460004, 32, 1),
    'feace_ctrl1'             : (reg_feace_ctrl1           , 0x83460004, 0x83460008, 32, 1),
    'feace_ctrl2'             : (reg_feace_ctrl2           , 0x83460008, 0x8346000c, 32, 1),
    'acecsr_to'               : (reg_acecsr_to             , 0x83460010, 0x83460014, 32, 1),
    'beace_ch0_base_addr'     : (reg_beace_ch0_base_addr   , 0x83460014, 0x83460018, 32, 1),
    'beace_ch1_base_addr'     : (reg_beace_ch1_base_addr   , 0x83460018, 0x8346001c, 32, 1),
    'aes_set0_l'              : (reg_aes_set0_l            , 0x83460020, 0x83460024, 32, 1),
    'aes_set0_m'              : (reg_aes_set0_m            , 0x83460024, 0x83460028, 32, 1),
    'aes_set0_h'              : (reg_aes_set0_h            , 0x83460028, 0x8346002c, 32, 1),
    'aes_set1_l'              : (reg_aes_set1_l            , 0x8346002c, 0x83460030, 32, 1),
    'aes_set1_m'              : (reg_aes_set1_m            , 0x83460030, 0x83460034, 32, 1),
    'aes_set1_h'              : (reg_aes_set1_h            , 0x83460034, 0x83460038, 32, 1),
    'aes_set2_l'              : (reg_aes_set2_l            , 0x83460038, 0x8346003c, 32, 1),
    'aes_set2_m'              : (reg_aes_set2_m            , 0x8346003c, 0x83460040, 32, 1),
    'aes_set2_h'              : (reg_aes_set2_h            , 0x83460040, 0x83460044, 32, 1),
    'aes_set3_l'              : (reg_aes_set3_l            , 0x83460044, 0x83460048, 32, 1),
    'aes_set3_m'              : (reg_aes_set3_m            , 0x83460048, 0x8346004c, 32, 1),
    'aes_set3_h'              : (reg_aes_set3_h            , 0x8346004c, 0x83460050, 32, 1),
    'aes_set4_l'              : (reg_aes_set4_l            , 0x83460050, 0x83460054, 32, 1),
    'aes_set4_m'              : (reg_aes_set4_m            , 0x83460054, 0x83460058, 32, 1),
    'aes_set4_h'              : (reg_aes_set4_h            , 0x83460058, 0x8346005c, 32, 1),
    'aes_set5_l'              : (reg_aes_set5_l            , 0x8346005c, 0x83460060, 32, 1),
    'aes_set5_m'              : (reg_aes_set5_m            , 0x83460060, 0x83460064, 32, 1),
    'aes_set5_h'              : (reg_aes_set5_h            , 0x83460064, 0x83460068, 32, 1),
    'aes_set6_l'              : (reg_aes_set6_l            , 0x83460068, 0x8346006c, 32, 1),
    'aes_set6_m'              : (reg_aes_set6_m            , 0x8346006c, 0x83460070, 32, 1),
    'aes_set6_h'              : (reg_aes_set6_h            , 0x83460070, 0x83460074, 32, 1),
    'aes_set7_l'              : (reg_aes_set7_l            , 0x83460074, 0x83460078, 32, 1),
    'aes_set7_m'              : (reg_aes_set7_m            , 0x83460078, 0x8346007c, 32, 1),
    'aes_set7_h'              : (reg_aes_set7_h            , 0x8346007c, 0x83460080, 32, 1),
    'aes_set8_l'              : (reg_aes_set8_l            , 0x83460080, 0x83460084, 32, 1),
    'aes_set8_m'              : (reg_aes_set8_m            , 0x83460084, 0x83460088, 32, 1),
    'aes_set8_h'              : (reg_aes_set8_h            , 0x83460088, 0x8346008c, 32, 1),
    'aes_set9_l'              : (reg_aes_set9_l            , 0x8346008c, 0x83460090, 32, 1),
    'aes_set9_m'              : (reg_aes_set9_m            , 0x83460090, 0x83460094, 32, 1),
    'aes_set9_h'              : (reg_aes_set9_h            , 0x83460094, 0x83460098, 32, 1),
    'aes_set10_l'             : (reg_aes_set10_l           , 0x83460098, 0x8346009c, 32, 1),
    'aes_set10_m'             : (reg_aes_set10_m           , 0x8346009c, 0x834600a0, 32, 1),
    'aes_set10_h'             : (reg_aes_set10_h           , 0x834600a0, 0x834600a4, 32, 1),
    'aes_set11_l'             : (reg_aes_set11_l           , 0x834600a4, 0x834600a8, 32, 1),
    'aes_set11_m'             : (reg_aes_set11_m           , 0x834600a8, 0x834600ac, 32, 1),
    'aes_set11_h'             : (reg_aes_set11_h           , 0x834600ac, 0x834600b0, 32, 1),
    'aes_set12_l'             : (reg_aes_set12_l           , 0x834600b0, 0x834600b4, 32, 1),
    'aes_set12_m'             : (reg_aes_set12_m           , 0x834600b4, 0x834600b8, 32, 1),
    'aes_set12_h'             : (reg_aes_set12_h           , 0x834600b8, 0x834600bc, 32, 1),
    'aes_set13_l'             : (reg_aes_set13_l           , 0x834600bc, 0x834600c0, 32, 1),
    'aes_set13_m'             : (reg_aes_set13_m           , 0x834600c0, 0x834600c4, 32, 1),
    'aes_set13_h'             : (reg_aes_set13_h           , 0x834600c4, 0x834600c8, 32, 1),
    'aes_set14_l'             : (reg_aes_set14_l           , 0x834600c8, 0x834600cc, 32, 1),
    'aes_set14_m'             : (reg_aes_set14_m           , 0x834600cc, 0x834600d0, 32, 1),
    'aes_set14_h'             : (reg_aes_set14_h           , 0x834600d0, 0x834600d4, 32, 1),
    'aes_set15_l'             : (reg_aes_set15_l           , 0x834600d4, 0x834600d8, 32, 1),
    'aes_set15_m'             : (reg_aes_set15_m           , 0x834600d8, 0x834600dc, 32, 1),
    'aes_set15_h'             : (reg_aes_set15_h           , 0x834600dc, 0x834600e0, 32, 1),
    'cmd_qid0'                : (reg_cmd_qid0              , 0x834600e0, 0x834600e4, 32, 1),
    'cmd_qid1'                : (reg_cmd_qid1              , 0x834600e4, 0x834600e8, 32, 1),
    'cmd_qid2'                : (reg_cmd_qid2              , 0x834600e8, 0x834600ec, 32, 1),
    'cmd_qid3'                : (reg_cmd_qid3              , 0x834600ec, 0x834600f0, 32, 1),
    'cmd_qid4'                : (reg_cmd_qid4              , 0x834600f0, 0x834600f4, 32, 1),
    'qidmap0'                 : (reg_qidmap0               , 0x834600f4, 0x834600f8, 32, 1),
    'qidmap1'                 : (reg_qidmap1               , 0x834600f8, 0x834600fc, 32, 1),
    'qidmap2'                 : (reg_qidmap2               , 0x834600fc, 0x83460100, 32, 1),
    'qidmap3'                 : (reg_qidmap3               , 0x83460100, 0x83460104, 32, 1),
    'qidmap4'                 : (reg_qidmap4               , 0x83460104, 0x83460108, 32, 1),
    'qidmap5'                 : (reg_qidmap5               , 0x83460108, 0x8346010c, 32, 1),
    'qidmap6'                 : (reg_qidmap6               , 0x8346010c, 0x83460110, 32, 1),
    'qidmap7'                 : (reg_qidmap7               , 0x83460120, 0x83460124, 32, 1),
    'qidmap8'                 : (reg_qidmap8               , 0x83460124, 0x83460128, 32, 1),
    'qidmap9'                 : (reg_qidmap9               , 0x83460128, 0x8346012c, 32, 1),
    'qidmap10'                : (reg_qidmap10              , 0x8346012c, 0x83460130, 32, 1),
    'qidmap11'                : (reg_qidmap11              , 0x83460130, 0x83460134, 32, 1),
    'qidmap12'                : (reg_qidmap12              , 0x83460134, 0x83460138, 32, 1),
    'qidmap13'                : (reg_qidmap13              , 0x83460138, 0x8346013c, 32, 1),
    'qidmap14'                : (reg_qidmap14              , 0x8346013c, 0x83460140, 32, 1),
    'qidmap15'                : (reg_qidmap15              , 0x83460140, 0x83460144, 32, 1),
    'qidmap16'                : (reg_qidmap16              , 0x83460144, 0x83460148, 32, 1),
    'loc_control0'            : (reg_loc_control0          , 0x83460200, 0x83460204, 32, 1),
    'loc_control1'            : (reg_loc_control1          , 0x83460204, 0x83460208, 32, 1),
    'loc_status0'             : (reg_loc_status0           , 0x83460208, 0x8346020c, 32, 1),
    'loc_status1'             : (reg_loc_status1           , 0x8346020c, 0x83460210, 32, 1),
    'loc_status2'             : (reg_loc_status2           , 0x83460210, 0x83460214, 32, 1),
    'loc_status3'             : (reg_loc_status3           , 0x83460214, 0x83460218, 32, 1),
    'act_status0'             : (reg_act_status0           , 0x83460220, 0x83460224, 32, 1),
    'act_status1'             : (reg_act_status1           , 0x83460224, 0x83460228, 32, 1),
    'seqid0_base_addr'        : (reg_seqid0_base_addr      , 0x83460300, 0x83460304, 32, 1),
    'seqid1_base_addr'        : (reg_seqid1_base_addr      , 0x83460304, 0x83460308, 32, 1),
    'seqid2_base_addr'        : (reg_seqid2_base_addr      , 0x83460308, 0x8346030c, 32, 1),
    'seqid3_base_addr'        : (reg_seqid3_base_addr      , 0x8346030c, 0x83460310, 32, 1),
    'acq1_qid_bitmap_0'       : (reg_acq1_qid_bitmap_0     , 0x83460310, 0x83460314, 32, 1),
    'acq1_qid_bitmap_1'       : (reg_acq1_qid_bitmap_1     , 0x83460314, 0x83460318, 32, 1),
    'acq1_qid_bitmap_2'       : (reg_acq1_qid_bitmap_2     , 0x83460318, 0x8346031c, 32, 1),
    'acq1_qid_bitmap_3'       : (reg_acq1_qid_bitmap_3     , 0x8346031c, 0x83460320, 32, 1),
    'fe_ace_mem_ctrl_0'       : (reg_fe_ace_mem_ctrl_0     , 0x83460320, 0x83460324, 32, 1),
    'fe_ace_mem_err_inj_en'   : (reg_fe_ace_mem_err_inj_en , 0x83460324, 0x83460328, 32, 1),
    'fe_ace_mem_err_inj_sel'  : (reg_fe_ace_mem_err_inj_sel, 0x83460328, 0x8346032c, 32, 1),
    'fe_ace_mem_err_inj_stat_0': (reg_fe_ace_mem_err_inj_stat_0, 0x8346032c, 0x83460330, 32, 1),
    'fe_ace_mem_err_inj_stat_1': (reg_fe_ace_mem_err_inj_stat_1, 0x83460330, 0x83460334, 32, 1),
    'wcq_sdsw0'               : (reg_wcq_sdsw0             , 0x83460340, 0x83460344, 32, 1),
    'wcq_sdsw1'               : (reg_wcq_sdsw1             , 0x83460344, 0x83460348, 32, 1),
    'wcq_sdsw2'               : (reg_wcq_sdsw2             , 0x83460348, 0x8346034c, 32, 1),
    'wcq_sdsw3'               : (reg_wcq_sdsw3             , 0x8346034c, 0x83460350, 32, 1),
    'fcq_cnt'                 : (reg_fcq_cnt               , 0x83460350, 0x83460354, 32, 1),
    'cplq_cnt'                : (reg_cplq_cnt              , 0x83460354, 0x83460358, 32, 1),
    'rcq_cnt'                 : (reg_rcq_cnt               , 0x83460358, 0x8346035c, 32, 1),
    'wcq_cnt'                 : (reg_wcq_cnt               , 0x8346035c, 0x83460360, 32, 1),
    'wcpl_cnt'                : (reg_wcpl_cnt              , 0x83460360, 0x83460364, 32, 1),
    'apurcq_cnt'              : (reg_apurcq_cnt            , 0x83460364, 0x83460368, 32, 1),
    'rcpl0_cnt'               : (reg_rcpl0_cnt             , 0x83460368, 0x8346036c, 32, 1),
    'rcpl1_cnt'               : (reg_rcpl1_cnt             , 0x8346036c, 0x83460370, 32, 1),
    'actwr_cnt'               : (reg_actwr_cnt             , 0x83460370, 0x83460374, 32, 1),
    'cmdwr_cnt'               : (reg_cmdwr_cnt             , 0x83460374, 0x83460378, 32, 1),
    'cplrd_cnt'               : (reg_cplrd_cnt             , 0x83460378, 0x8346037c, 32, 1),
    'dmatrig_cnt'             : (reg_dmatrig_cnt           , 0x8346037c, 0x83460380, 32, 1),
    'dmacpl_cnt'              : (reg_dmacpl_cnt            , 0x83460380, 0x83460384, 32, 1),
    'intr_status'             : (reg_intr_status           , 0x83460400, 0x83460404, 32, 1),
    'intr_mask'               : (reg_intr_mask             , 0x83460404, 0x83460408, 32, 1),
    'intr_rc'                 : (reg_intr_rc               , 0x83460408, 0x8346040c, 32, 1),
    'intr_shadow'             : (reg_intr_shadow           , 0x8346040c, 0x83460410, 32, 1),
    'strm_id_lut'             : (reg_strm_id_lut           , 0x83460500, 0x83460600, 32, 64),
    'fce_control_0'           : (reg_fce_control_0         , 0x83410000, 0x83410004, 32, 1),
    'fce_control_1'           : (reg_fce_control_1         , 0x83410004, 0x83410008, 32, 1),
    'fce_control_2'           : (reg_fce_control_2         , 0x83410008, 0x8341000c, 32, 1),
    'fce_status_0'            : (reg_fce_status_0          , 0x8341000c, 0x83410010, 32, 1),
    'data_xfr_pause_ctrl_0'   : (reg_data_xfr_pause_ctrl_0 , 0x83410010, 0x83410014, 32, 1),
    'data_xfr_pause_ctrl_1'   : (reg_data_xfr_pause_ctrl_1 , 0x83410014, 0x83410018, 32, 1),
    'nand_addr_config_0'      : (reg_nand_addr_config_0    , 0x83410020, 0x83410024, 32, 1),
    'nand_addr_config_1'      : (reg_nand_addr_config_1    , 0x83410024, 0x83410028, 32, 1),
    'iwl_multi_link_cfg'      : (reg_iwl_multi_link_cfg    , 0x8341002c, 0x83410030, 32, 1),
    'nand_info_cfg'           : (reg_nand_info_cfg         , 0x83410030, 0x83410034, 32, 1),
    'adv_read_control'        : (reg_adv_read_control      , 0x83410034, 0x83410038, 32, 1),
    'iwl_group_mask_0'        : (reg_iwl_group_mask_0      , 0x83410038, 0x8341003c, 32, 1),
    'iwl_group_mask_1'        : (reg_iwl_group_mask_1      , 0x8341003c, 0x83410040, 32, 1),
    'nand_rd_owl_feat_addr'   : (reg_nand_rd_owl_feat_addr , 0x83410040, 0x83410044, 32, 1),
    'nand_rd_owl_feat_bytes'  : (reg_nand_rd_owl_feat_bytes, 0x83410044, 0x83410048, 32, 1),
    'nand_rd_owl_back_feat_bytes': (reg_nand_rd_owl_back_feat_bytes, 0x83410048, 0x8341004c, 32, 1),
    'nand_retry_resu_feat_bytes': (reg_nand_retry_resu_feat_bytes, 0x8341004c, 0x83410050, 32, 1),
    'nand_sts_config_0'       : (reg_nand_sts_config_0     , 0x83410050, 0x83410054, 32, 1),
    'nand_sts_config_1'       : (reg_nand_sts_config_1     , 0x83410054, 0x83410058, 32, 1),
    'nand_sts_config_2'       : (reg_nand_sts_config_2     , 0x83410058, 0x8341005c, 32, 1),
    'nand_sts_config_3'       : (reg_nand_sts_config_3     , 0x8341005c, 0x83410060, 32, 1),
    'susp_control'            : (reg_susp_control          , 0x83410060, 0x83410064, 32, 1),
    'traf_bal_control'        : (reg_traf_bal_control      , 0x83410064, 0x83410068, 32, 1),
    'retry_table_config'      : (reg_retry_table_config    , 0x83410070, 0x83410074, 32, 1),
    'retry_control'           : (reg_retry_control         , 0x83410074, 0x83410078, 32, 1),
    'retry_options_tbl0'      : (reg_retry_options_tbl0    , 0x83410080, 0x83410084, 32, 1),
    'retry_options_tbl1'      : (reg_retry_options_tbl1    , 0x83410084, 0x83410088, 32, 1),
    'retry_options_tbl2'      : (reg_retry_options_tbl2    , 0x83410088, 0x8341008c, 32, 1),
    'retry_options_tbl3'      : (reg_retry_options_tbl3    , 0x8341008c, 0x83410090, 32, 1),
    'retry_options_tbl4'      : (reg_retry_options_tbl4    , 0x83410090, 0x83410094, 32, 1),
    'retry_options_tbl5'      : (reg_retry_options_tbl5    , 0x83410094, 0x83410098, 32, 1),
    'retry_options_tbl6'      : (reg_retry_options_tbl6    , 0x83410098, 0x8341009c, 32, 1),
    'retry_options_tbl7'      : (reg_retry_options_tbl7    , 0x8341009c, 0x834100a0, 32, 1),
    'erase_page_thr'          : (reg_erase_page_thr        , 0x834100a0, 0x834100a4, 32, 1),
    'nand_prog_feat_bytes'    : (reg_nand_prog_feat_bytes  , 0x834100a4, 0x834100a8, 32, 1),
    'nand_prog_feat_back_bytes': (reg_nand_prog_feat_back_bytes, 0x834100a8, 0x834100ac, 32, 1),
    'nand_gen_cmd_cfg'        : (reg_nand_gen_cmd_cfg      , 0x834100b0, 0x834100b4, 32, 1),
    'nand_erase_cmd_cfg'      : (reg_nand_erase_cmd_cfg    , 0x834100b4, 0x834100b8, 32, 1),
    'nand_prog_cmd_cfg'       : (reg_nand_prog_cmd_cfg     , 0x834100b8, 0x834100bc, 32, 1),
    'nand_read_cmd_cfg'       : (reg_nand_read_cmd_cfg     , 0x834100bc, 0x834100c0, 32, 1),
    'nand_misc_cmd_cfg'       : (reg_nand_misc_cmd_cfg     , 0x834100c0, 0x834100c4, 32, 1),
    'fce_prot_ctrl'           : (reg_fce_prot_ctrl         , 0x834100d0, 0x834100d4, 32, 1),
    'fce_indir_mode_cfg'      : (reg_fce_indir_mode_cfg    , 0x834100e0, 0x834100e4, 32, 1),
    'fce_indir_mode_status'   : (reg_fce_indir_mode_status , 0x834100e4, 0x834100e8, 32, 1),
    'fce_indir_mode_cmd'      : (reg_fce_indir_mode_cmd    , 0x834100e8, 0x834100ec, 32, 1),
    'fce_indir_mode_cpl'      : (reg_fce_indir_mode_cpl    , 0x834100ec, 0x834100f0, 32, 1),
    'fce_indir_mode_pdata'    : (reg_fce_indir_mode_pdata  , 0x834100f0, 0x834100f4, 32, 1),
    'fce_indir_mode_rdata'    : (reg_fce_indir_mode_rdata  , 0x834100f4, 0x834100f8, 32, 1),
    'smem_acc_control'        : (reg_smem_acc_control      , 0x83410100, 0x83410104, 32, 1),
    'smem_acc_io'             : (reg_smem_acc_io           , 0x83410104, 0x83410108, 32, 1),
    'fmem_acc_control'        : (reg_fmem_acc_control      , 0x83410108, 0x8341010c, 32, 1),
    'fmem_acc_io'             : (reg_fmem_acc_io           , 0x8341010c, 0x83410110, 32, 1),
    'rs_timer_base_control'   : (reg_rs_timer_base_control , 0x83410118, 0x8341011c, 32, 1),
    'rs_timer0_control0'      : (reg_rs_timer0_control0    , 0x83410120, 0x83410124, 32, 1),
    'rs_timer0_control1'      : (reg_rs_timer0_control1    , 0x83410124, 0x83410128, 32, 1),
    'rs_timer1_control0'      : (reg_rs_timer1_control0    , 0x83410128, 0x8341012c, 32, 1),
    'rs_timer1_control1'      : (reg_rs_timer1_control1    , 0x8341012c, 0x83410130, 32, 1),
    'rs_timer2_control0'      : (reg_rs_timer2_control0    , 0x83410130, 0x83410134, 32, 1),
    'rs_timer2_control1'      : (reg_rs_timer2_control1    , 0x83410134, 0x83410138, 32, 1),
    'rs_timer3_control0'      : (reg_rs_timer3_control0    , 0x83410138, 0x8341013c, 32, 1),
    'rs_timer3_control1'      : (reg_rs_timer3_control1    , 0x8341013c, 0x83410140, 32, 1),
    'rs_timer4_control0'      : (reg_rs_timer4_control0    , 0x83410140, 0x83410144, 32, 1),
    'rs_timer4_control1'      : (reg_rs_timer4_control1    , 0x83410144, 0x83410148, 32, 1),
    'rs_timer5_control0'      : (reg_rs_timer5_control0    , 0x83410148, 0x8341014c, 32, 1),
    'rs_timer5_control1'      : (reg_rs_timer5_control1    , 0x8341014c, 0x83410150, 32, 1),
    'rs_timer6_control0'      : (reg_rs_timer6_control0    , 0x83410150, 0x83410154, 32, 1),
    'rs_timer6_control1'      : (reg_rs_timer6_control1    , 0x83410154, 0x83410158, 32, 1),
    'rs_timer7_control0'      : (reg_rs_timer7_control0    , 0x83410158, 0x8341015c, 32, 1),
    'rs_timer7_control1'      : (reg_rs_timer7_control1    , 0x8341015c, 0x83410160, 32, 1),
    'rs_timer8_control0'      : (reg_rs_timer8_control0    , 0x83410160, 0x83410164, 32, 1),
    'rs_timer8_control1'      : (reg_rs_timer8_control1    , 0x83410164, 0x83410168, 32, 1),
    'rs_timer9_control0'      : (reg_rs_timer9_control0    , 0x83410168, 0x8341016c, 32, 1),
    'rs_timer9_control1'      : (reg_rs_timer9_control1    , 0x8341016c, 0x83410170, 32, 1),
    'rs_timer10_control0'     : (reg_rs_timer10_control0   , 0x83410170, 0x83410174, 32, 1),
    'rs_timer10_control1'     : (reg_rs_timer10_control1   , 0x83410174, 0x83410178, 32, 1),
    'rs_timer11_control0'     : (reg_rs_timer11_control0   , 0x83410178, 0x8341017c, 32, 1),
    'rs_timer11_control1'     : (reg_rs_timer11_control1   , 0x8341017c, 0x83410180, 32, 1),
    'rs_timer12_control0'     : (reg_rs_timer12_control0   , 0x83410180, 0x83410184, 32, 1),
    'rs_timer12_control1'     : (reg_rs_timer12_control1   , 0x83410184, 0x83410188, 32, 1),
    'rs_timer13_control0'     : (reg_rs_timer13_control0   , 0x83410188, 0x8341018c, 32, 1),
    'rs_timer13_control1'     : (reg_rs_timer13_control1   , 0x8341018c, 0x83410190, 32, 1),
    'rs_timer14_control0'     : (reg_rs_timer14_control0   , 0x83410190, 0x83410194, 32, 1),
    'rs_timer14_control1'     : (reg_rs_timer14_control1   , 0x83410194, 0x83410198, 32, 1),
    'rs_timer15_control0'     : (reg_rs_timer15_control0   , 0x83410198, 0x8341019c, 32, 1),
    'rs_timer15_control1'     : (reg_rs_timer15_control1   , 0x8341019c, 0x834101a0, 32, 1),
    'rs_timer_select'         : (reg_rs_timer_select       , 0x834101a0, 0x834101a4, 32, 1),
    'scrambler_control'       : (reg_scrambler_control     , 0x834101b0, 0x834101b4, 32, 1),
    'scr_seed_0'              : (reg_scr_seed_0            , 0x834101b4, 0x834101b8, 32, 1),
    'scr_seed_1'              : (reg_scr_seed_1            , 0x834101b8, 0x834101bc, 32, 1),
    'ecc_control_0'           : (reg_ecc_control_0         , 0x834101c0, 0x834101c4, 32, 1),
    'ecc_control_1'           : (reg_ecc_control_1         , 0x834101c4, 0x834101c8, 32, 1),
    'ecc_control_2'           : (reg_ecc_control_2         , 0x834101c8, 0x834101cc, 32, 1),
    'ecc_control_3'           : (reg_ecc_control_3         , 0x834101cc, 0x834101d0, 32, 1),
    'ecc_control_4'           : (reg_ecc_control_4         , 0x834101d0, 0x834101d4, 32, 1),
    'ecc_control_5'           : (reg_ecc_control_5         , 0x834101d4, 0x834101d8, 32, 1),
    'ecc_status_0'            : (reg_ecc_status_0          , 0x834101d8, 0x834101dc, 32, 1),
    'ecc_status_1'            : (reg_ecc_status_1          , 0x834101dc, 0x834101e0, 32, 1),
    'ecc_status_2'            : (reg_ecc_status_2          , 0x834101e0, 0x834101e4, 32, 1),
    'ecc_status_3'            : (reg_ecc_status_3          , 0x834101e4, 0x834101e8, 32, 1),
    'ecc_status_4'            : (reg_ecc_status_4          , 0x834101e8, 0x834101ec, 32, 1),
    'ecc_status_5'            : (reg_ecc_status_5          , 0x834101ec, 0x834101f0, 32, 1),
    'ecc_status_6'            : (reg_ecc_status_6          , 0x834101f0, 0x834101f4, 32, 1),
    'ecc_status_7'            : (reg_ecc_status_7          , 0x834101f4, 0x834101f8, 32, 1),
    'ecc_control_6'           : (reg_ecc_control_6         , 0x834101f8, 0x834101fc, 32, 1),
    'ecc_control_7'           : (reg_ecc_control_7         , 0x834101fc, 0x83410200, 32, 1),
    'ndphy_control_0'         : (reg_ndphy_control_0       , 0x83410200, 0x83410204, 32, 1),
    'ndphy_rank_config_0'     : (reg_ndphy_rank_config_0   , 0x83410208, 0x8341020c, 32, 1),
    'ndphy_rank_config_1'     : (reg_ndphy_rank_config_1   , 0x8341020c, 0x83410210, 32, 1),
    'brcm_ndphy_dir_ctrl0'    : (reg_brcm_ndphy_dir_ctrl0  , 0x83410210, 0x83410214, 32, 1),
    'brcm_ndphy_dir_ctrl1'    : (reg_brcm_ndphy_dir_ctrl1  , 0x83410214, 0x83410218, 32, 1),
    'brcm_ndphy_dir_stat'     : (reg_brcm_ndphy_dir_stat   , 0x83410218, 0x8341021c, 32, 1),
    'ndphy_riu_control'       : (reg_ndphy_riu_control     , 0x83410220, 0x83410224, 32, 1),
    'ndphy_riu_wdata'         : (reg_ndphy_riu_wdata       , 0x83410224, 0x83410228, 32, 1),
    'ndphy_riu_rdata'         : (reg_ndphy_riu_rdata       , 0x83410228, 0x8341022c, 32, 1),
    'fce_intr_status'         : (reg_fce_intr_status       , 0x83410230, 0x83410234, 32, 1),
    'fce_intr_mask'           : (reg_fce_intr_mask         , 0x83410234, 0x83410238, 32, 1),
    'fce_intr_rc'             : (reg_fce_intr_rc           , 0x83410238, 0x8341023c, 32, 1),
    'fce_intr_shadow'         : (reg_fce_intr_shadow       , 0x8341023c, 0x83410240, 32, 1),
    'wfm_index_cfg0'          : (reg_wfm_index_cfg0        , 0x83410250, 0x83410254, 32, 1),
    'wfm_index_cfg1'          : (reg_wfm_index_cfg1        , 0x83410254, 0x83410258, 32, 1),
    'wfm_index_cfg2'          : (reg_wfm_index_cfg2        , 0x83410258, 0x8341025c, 32, 1),
    'wfm_index_cfg3'          : (reg_wfm_index_cfg3        , 0x8341025c, 0x83410260, 32, 1),
    'wfm_index_cfg4'          : (reg_wfm_index_cfg4        , 0x83410260, 0x83410264, 32, 1),
    'wfm_index_cfg5'          : (reg_wfm_index_cfg5        , 0x83410264, 0x83410268, 32, 1),
    'wfm_index_cfg6'          : (reg_wfm_index_cfg6        , 0x83410268, 0x8341026c, 32, 1),
    'wfm_index_cfg7'          : (reg_wfm_index_cfg7        , 0x8341026c, 0x83410270, 32, 1),
    'wfm_index_cfg8'          : (reg_wfm_index_cfg8        , 0x83410270, 0x83410274, 32, 1),
    'wfm_index_cfg9'          : (reg_wfm_index_cfg9        , 0x83410274, 0x83410278, 32, 1),
    'wfm_index_cfg10'         : (reg_wfm_index_cfg10       , 0x83410278, 0x8341027c, 32, 1),
    'wfm_index_cfg11'         : (reg_wfm_index_cfg11       , 0x8341027c, 0x83410280, 32, 1),
    'wfm_index_cfg12'         : (reg_wfm_index_cfg12       , 0x83410280, 0x83410284, 32, 1),
    'wfm_index_cfg13'         : (reg_wfm_index_cfg13       , 0x83410284, 0x83410288, 32, 1),
    'wfm_index_cfg14'         : (reg_wfm_index_cfg14       , 0x83410288, 0x8341028c, 32, 1),
    'wfm_index_cfg15'         : (reg_wfm_index_cfg15       , 0x8341028c, 0x83410290, 32, 1),
    'wfm_index_cfg16'         : (reg_wfm_index_cfg16       , 0x83410290, 0x83410294, 32, 1),
    'wfm_index_cfg17'         : (reg_wfm_index_cfg17       , 0x83410294, 0x83410298, 32, 1),
    'wfm_index_cfg18'         : (reg_wfm_index_cfg18       , 0x83410298, 0x8341029c, 32, 1),
    'wfm_index_cfg19'         : (reg_wfm_index_cfg19       , 0x8341029c, 0x834102a0, 32, 1),
    'rs_timer16_control0'     : (reg_rs_timer16_control0   , 0x834102a0, 0x834102a4, 32, 1),
    'rs_timer16_control1'     : (reg_rs_timer16_control1   , 0x834102a4, 0x834102a8, 32, 1),
    'rs_timer17_control0'     : (reg_rs_timer17_control0   , 0x834102a8, 0x834102ac, 32, 1),
    'rs_timer17_control1'     : (reg_rs_timer17_control1   , 0x834102ac, 0x834102b0, 32, 1),
    'rs_timer18_control0'     : (reg_rs_timer18_control0   , 0x834102b0, 0x834102b4, 32, 1),
    'rs_timer18_control1'     : (reg_rs_timer18_control1   , 0x834102b4, 0x834102b8, 32, 1),
    'rs_timer19_control0'     : (reg_rs_timer19_control0   , 0x834102b8, 0x834102bc, 32, 1),
    'rs_timer19_control1'     : (reg_rs_timer19_control1   , 0x834102bc, 0x834102c0, 32, 1),
    'rs_timer20_control0'     : (reg_rs_timer20_control0   , 0x834102c0, 0x834102c4, 32, 1),
    'rs_timer20_control1'     : (reg_rs_timer20_control1   , 0x834102c4, 0x834102c8, 32, 1),
    'rs_timer21_control0'     : (reg_rs_timer21_control0   , 0x834102c8, 0x834102cc, 32, 1),
    'rs_timer21_control1'     : (reg_rs_timer21_control1   , 0x834102cc, 0x834102d0, 32, 1),
    'rs_timer22_control0'     : (reg_rs_timer22_control0   , 0x834102d0, 0x834102d4, 32, 1),
    'rs_timer22_control1'     : (reg_rs_timer22_control1   , 0x834102d4, 0x834102d8, 32, 1),
    'rs_timer23_control0'     : (reg_rs_timer23_control0   , 0x834102d8, 0x834102dc, 32, 1),
    'rs_timer23_control1'     : (reg_rs_timer23_control1   , 0x834102dc, 0x834102e0, 32, 1),
    'rs_timer24_control0'     : (reg_rs_timer24_control0   , 0x834102e0, 0x834102e4, 32, 1),
    'rs_timer24_control1'     : (reg_rs_timer24_control1   , 0x834102e4, 0x834102e8, 32, 1),
    'rs_timer25_control0'     : (reg_rs_timer25_control0   , 0x834102e8, 0x834102ec, 32, 1),
    'rs_timer25_control1'     : (reg_rs_timer25_control1   , 0x834102ec, 0x834102f0, 32, 1),
    'rs_timer26_control0'     : (reg_rs_timer26_control0   , 0x834102f0, 0x834102f4, 32, 1),
    'rs_timer26_control1'     : (reg_rs_timer26_control1   , 0x834102f4, 0x834102f8, 32, 1),
    'rs_timer27_control0'     : (reg_rs_timer27_control0   , 0x834102f8, 0x834102fc, 32, 1),
    'rs_timer27_control1'     : (reg_rs_timer27_control1   , 0x834102fc, 0x83410300, 32, 1),
    'rs_timer28_control0'     : (reg_rs_timer28_control0   , 0x83410300, 0x83410304, 32, 1),
    'rs_timer28_control1'     : (reg_rs_timer28_control1   , 0x83410304, 0x83410308, 32, 1),
    'rs_timer29_control0'     : (reg_rs_timer29_control0   , 0x83410308, 0x8341030c, 32, 1),
    'rs_timer29_control1'     : (reg_rs_timer29_control1   , 0x8341030c, 0x83410310, 32, 1),
    'rs_timer30_control0'     : (reg_rs_timer30_control0   , 0x83410310, 0x83410314, 32, 1),
    'rs_timer30_control1'     : (reg_rs_timer30_control1   , 0x83410314, 0x83410318, 32, 1),
    'rs_timer31_control0'     : (reg_rs_timer31_control0   , 0x83410318, 0x8341031c, 32, 1),
    'rs_timer31_control1'     : (reg_rs_timer31_control1   , 0x8341031c, 0x83410320, 32, 1),
    'nand_volume_cfg0'        : (reg_nand_volume_cfg0      , 0x83410340, 0x83410344, 32, 1),
    'nand_volume_cfg1'        : (reg_nand_volume_cfg1      , 0x83410344, 0x83410348, 32, 1),
    'nand_volume_cfg2'        : (reg_nand_volume_cfg2      , 0x83410348, 0x8341034c, 32, 1),
    'nand_volume_cfg3'        : (reg_nand_volume_cfg3      , 0x8341034c, 0x83410350, 32, 1),
    'nps_debug_ctrl'          : (reg_nps_debug_ctrl        , 0x834103f0, 0x834103f4, 32, 1),
    'fce_mem_acc_control'     : (reg_fce_mem_acc_control   , 0x83410400, 0x83410404, 32, 1),
    'fce_mem_acc_io'          : (reg_fce_mem_acc_io        , 0x83410404, 0x83410408, 32, 1),
    'fce_event_log_acc_io'    : (reg_fce_event_log_acc_io  , 0x83410408, 0x8341040c, 32, 1),
    'lmem_acc_control'        : (reg_lmem_acc_control      , 0x83410410, 0x83410414, 32, 1),
    'lmem_acc_samp_ctrl'      : (reg_lmem_acc_samp_ctrl    , 0x83410414, 0x83410418, 32, 1),
    'lmem_acc_io'             : (reg_lmem_acc_io           , 0x83410418, 0x8341041c, 32, 1),
    'lmem_acc_io_h'           : (reg_lmem_acc_io_h         , 0x8341041c, 0x83410420, 32, 1),
    'job_info_buf_mem_addr'   : (reg_job_info_buf_mem_addr , 0x83410420, 0x83410424, 32, 1),
    'job_info_buf_mem_data'   : (reg_job_info_buf_mem_data , 0x83410424, 0x83410428, 32, 1),
    'monitor_select'          : (reg_monitor_select        , 0x83410430, 0x83410434, 32, 1),
    'monitor_sig_out'         : (reg_monitor_sig_out       , 0x83410434, 0x83410438, 32, 1),
    'preload_cw_mem_acc_control': (reg_preload_cw_mem_acc_control, 0x83410440, 0x83410444, 32, 1),
    'cw_raw_mem_acc_control'  : (reg_cw_raw_mem_acc_control, 0x83410444, 0x83410448, 32, 1),
    'preload_cw_mem_acc_io_0' : (reg_preload_cw_mem_acc_io_0, 0x83410450, 0x83410454, 32, 1),
    'preload_cw_mem_acc_io_1' : (reg_preload_cw_mem_acc_io_1, 0x83410454, 0x83410458, 32, 1),
    'preload_cw_mem_acc_io_2' : (reg_preload_cw_mem_acc_io_2, 0x83410458, 0x8341045c, 32, 1),
    'preload_cw_mem_acc_io_3' : (reg_preload_cw_mem_acc_io_3, 0x8341045c, 0x83410460, 32, 1),
    'preload_cw_mem_acc_io_4' : (reg_preload_cw_mem_acc_io_4, 0x83410460, 0x83410464, 32, 1),
    'preload_cw_mem_acc_io_5' : (reg_preload_cw_mem_acc_io_5, 0x83410464, 0x83410468, 32, 1),
    'preload_cw_mem_acc_io_6' : (reg_preload_cw_mem_acc_io_6, 0x83410468, 0x8341046c, 32, 1),
    'preload_cw_mem_acc_io_7' : (reg_preload_cw_mem_acc_io_7, 0x8341046c, 0x83410470, 32, 1),
    'cw_raw_mem_acc_io_0'     : (reg_cw_raw_mem_acc_io_0   , 0x83410470, 0x83410474, 32, 1),
    'cw_raw_mem_acc_io_1'     : (reg_cw_raw_mem_acc_io_1   , 0x83410474, 0x83410478, 32, 1),
    'cw_raw_mem_acc_io_2'     : (reg_cw_raw_mem_acc_io_2   , 0x83410478, 0x8341047c, 32, 1),
    'cw_raw_mem_acc_io_3'     : (reg_cw_raw_mem_acc_io_3   , 0x8341047c, 0x83410480, 32, 1),
    'cw_raw_mem_acc_io_4'     : (reg_cw_raw_mem_acc_io_4   , 0x83410480, 0x83410484, 32, 1),
    'cw_raw_mem_acc_io_5'     : (reg_cw_raw_mem_acc_io_5   , 0x83410484, 0x83410488, 32, 1),
    'cw_raw_mem_acc_io_6'     : (reg_cw_raw_mem_acc_io_6   , 0x83410488, 0x8341048c, 32, 1),
    'cw_raw_mem_acc_io_7'     : (reg_cw_raw_mem_acc_io_7   , 0x8341048c, 0x83410490, 32, 1),
    'dq_ecnt_bit_0'           : (reg_dq_ecnt_bit_0         , 0x83410490, 0x83410494, 32, 1),
    'dq_ecnt_bit_1'           : (reg_dq_ecnt_bit_1         , 0x83410494, 0x83410498, 32, 1),
    'dq_ecnt_bit_2'           : (reg_dq_ecnt_bit_2         , 0x83410498, 0x8341049c, 32, 1),
    'dq_ecnt_bit_3'           : (reg_dq_ecnt_bit_3         , 0x8341049c, 0x834104a0, 32, 1),
    'dq_ecnt_bit_4'           : (reg_dq_ecnt_bit_4         , 0x834104a0, 0x834104a4, 32, 1),
    'dq_ecnt_bit_5'           : (reg_dq_ecnt_bit_5         , 0x834104a4, 0x834104a8, 32, 1),
    'dq_ecnt_bit_6'           : (reg_dq_ecnt_bit_6         , 0x834104a8, 0x834104ac, 32, 1),
    'dq_ecnt_bit_7'           : (reg_dq_ecnt_bit_7         , 0x834104ac, 0x834104b0, 32, 1),
    'soft_err_inj_0'          : (reg_soft_err_inj_0        , 0x83410500, 0x83410504, 32, 1),
    'soft_err_inj_1'          : (reg_soft_err_inj_1        , 0x83410504, 0x83410508, 32, 1),
    'soft_err_inj_2'          : (reg_soft_err_inj_2        , 0x83410508, 0x8341050c, 32, 1),
    'soft_err_inj_3'          : (reg_soft_err_inj_3        , 0x8341050c, 0x83410510, 32, 1),
    'soft_err_inj_4'          : (reg_soft_err_inj_4        , 0x83410510, 0x83410514, 32, 1),
    'soft_err_inj_5'          : (reg_soft_err_inj_5        , 0x83410514, 0x83410518, 32, 1),
    'soft_err_inj_6'          : (reg_soft_err_inj_6        , 0x83410518, 0x8341051c, 32, 1),
    'fce_err_injection'       : (reg_fce_err_injection     , 0x83410520, 0x83410524, 32, 1),
    'nand_error_inj_conf'     : (reg_nand_error_inj_conf   , 0x83410530, 0x83410534, 32, 1),
    'nand_error_inj_pba'      : (reg_nand_error_inj_pba    , 0x83410534, 0x83410538, 32, 1),
    'be_csm_ctrl'             : (reg_be_csm_ctrl           , 0x83410540, 0x83410544, 32, 1),
    'be_csm_fix_pat_ctrl_0'   : (reg_be_csm_fix_pat_ctrl_0 , 0x83410544, 0x83410548, 32, 1),
    'be_csm_fix_pat_ctrl_1'   : (reg_be_csm_fix_pat_ctrl_1 , 0x83410548, 0x8341054c, 32, 1),
    'be_csm_fix_pat_ctrl_2'   : (reg_be_csm_fix_pat_ctrl_2 , 0x8341054c, 0x83410550, 32, 1),
    'be_csm_fix_pat_ctrl_3'   : (reg_be_csm_fix_pat_ctrl_3 , 0x83410550, 0x83410554, 32, 1),
    'be_csm_wr_ctrl_0'        : (reg_be_csm_wr_ctrl_0      , 0x83410554, 0x83410558, 32, 1),
    'be_csm_wr_ctrl_1'        : (reg_be_csm_wr_ctrl_1      , 0x83410558, 0x8341055c, 32, 1),
    'be_csm_rd_ctrl_0'        : (reg_be_csm_rd_ctrl_0      , 0x8341055c, 0x83410560, 32, 1),
    'be_csm_rd_ctrl_1'        : (reg_be_csm_rd_ctrl_1      , 0x83410560, 0x83410564, 32, 1),
    'be_csm_wr_status_0'      : (reg_be_csm_wr_status_0    , 0x83410564, 0x83410568, 32, 1),
    'be_csm_rd_status_0'      : (reg_be_csm_rd_status_0    , 0x83410568, 0x8341056c, 32, 1),
    'be_csm_rd_status_1'      : (reg_be_csm_rd_status_1    , 0x8341056c, 0x83410570, 32, 1),
    'ldpc_enc_secdec_test'    : (reg_ldpc_enc_secdec_test  , 0x83410600, 0x83410604, 32, 1),
    'ldpc_dec_secdec_test'    : (reg_ldpc_dec_secdec_test  , 0x83410604, 0x83410608, 32, 1),
    'ldpc_mem_secdec_err_status': (reg_ldpc_mem_secdec_err_status, 0x83410608, 0x8341060c, 32, 1),
    'nps_en_bmp'              : (reg_nps_en_bmp            , 0x83410800, 0x83410804, 32, 1),
    'bm_cfg'                  : (reg_bm_cfg                , 0x83430000, 0x83430004, 32, 1),
    'bm_ddr_data_base_l'      : (reg_bm_ddr_data_base_l    , 0x83430004, 0x83430008, 32, 1),
    'bm_ddr_data_base_h'      : (reg_bm_ddr_data_base_h    , 0x83430008, 0x8343000c, 32, 1),
    'bm_ddr_meta_base_l'      : (reg_bm_ddr_meta_base_l    , 0x8343000c, 0x83430010, 32, 1),
    'bm_ddr_meta_base_h'      : (reg_bm_ddr_meta_base_h    , 0x83430010, 0x83430014, 32, 1),
    'bm_pool_cfg'             : (reg_bm_pool_cfg           , 0x83430014, 0x83430018, 32, 1),
    'bm_pool_size_cfg_0'      : (reg_bm_pool_size_cfg_0    , 0x83430018, 0x8343001c, 32, 1),
    'bm_pool_size_cfg_1'      : (reg_bm_pool_size_cfg_1    , 0x8343001c, 0x83430020, 32, 1),
    'bm_vp_vq_th_cfg_0'       : (reg_bm_vp_vq_th_cfg_0     , 0x83430020, 0x83430024, 32, 1),
    'bm_vp_vq_th_cfg_1'       : (reg_bm_vp_vq_th_cfg_1     , 0x83430024, 0x83430028, 32, 1),
    'bm_vp_vq_th_cfg_2'       : (reg_bm_vp_vq_th_cfg_2     , 0x83430028, 0x8343002c, 32, 1),
    'bm_rbuf_cfg'             : (reg_bm_rbuf_cfg           , 0x8343002c, 0x83430030, 32, 1),
    'bm_wbuf_cfg'             : (reg_bm_wbuf_cfg           , 0x83430030, 0x83430034, 32, 1),
    'bm_crdt_cfg'             : (reg_bm_crdt_cfg           , 0x83430034, 0x83430038, 32, 1),
    'bm_rfb_cfg'              : (reg_bm_rfb_cfg            , 0x83430038, 0x8343003c, 32, 1),
    'bm_init_status'          : (reg_bm_init_status        , 0x8343003c, 0x83430040, 32, 1),
    'bm_mem_acc_ctrl'         : (reg_bm_mem_acc_ctrl       , 0x83430040, 0x83430044, 32, 1),
    'bm_mem_out_0'            : (reg_bm_mem_out_0          , 0x83430044, 0x83430048, 32, 1),
    'bm_mem_out_1'            : (reg_bm_mem_out_1          , 0x83430048, 0x8343004c, 32, 1),
    'bm_mem_out_2'            : (reg_bm_mem_out_2          , 0x8343004c, 0x83430050, 32, 1),
    'bm_mem_out_3'            : (reg_bm_mem_out_3          , 0x83430050, 0x83430054, 32, 1),
    'bm_mon_ctrl'             : (reg_bm_mon_ctrl           , 0x83430054, 0x83430058, 32, 1),
    'bm_mon_out'              : (reg_bm_mon_out            , 0x83430058, 0x8343005c, 32, 1),
    'bm_mem_err_ctrl'         : (reg_bm_mem_err_ctrl       , 0x8343005c, 0x83430060, 32, 1),
    'bm_mem_ecc_cor_err_status': (reg_bm_mem_ecc_cor_err_status, 0x83430060, 0x83430064, 32, 1),
    'bm_mem_ecc_cor_err_status_1': (reg_bm_mem_ecc_cor_err_status_1, 0x83430064, 0x83430068, 32, 1),
    'bm_mem_ecc_cor_err_status_2': (reg_bm_mem_ecc_cor_err_status_2, 0x83430068, 0x8343006c, 32, 1),
    'bm_mem_ecc_cor_err_status_3': (reg_bm_mem_ecc_cor_err_status_3, 0x8343006c, 0x83430070, 32, 1),
    'bm_mem_ecc_cor_err_status_4': (reg_bm_mem_ecc_cor_err_status_4, 0x83430070, 0x83430074, 32, 1),
    'bm_mem_ecc_uncor_err_status': (reg_bm_mem_ecc_uncor_err_status, 0x83430074, 0x83430078, 32, 1),
    'bm_axi_par_err_status'   : (reg_bm_axi_par_err_status , 0x83430078, 0x8343007c, 32, 1),
    'bm_fsm_status_0'         : (reg_bm_fsm_status_0       , 0x8343007c, 0x83430080, 32, 1),
    'bm_fsm_status_1'         : (reg_bm_fsm_status_1       , 0x83430080, 0x83430084, 32, 1),
    'bm_fsm_status_2'         : (reg_bm_fsm_status_2       , 0x83430084, 0x83430088, 32, 1),
    'bm_fsm_status_3'         : (reg_bm_fsm_status_3       , 0x83430088, 0x8343008c, 32, 1),
    'bm_fsm_status_4'         : (reg_bm_fsm_status_4       , 0x8343008c, 0x83430090, 32, 1),
    'bm_fsm_status_5'         : (reg_bm_fsm_status_5       , 0x83430090, 0x83430094, 32, 1),
    'bm_rsc_status_0'         : (reg_bm_rsc_status_0       , 0x83430094, 0x83430098, 32, 1),
    'bm_rsc_status_1'         : (reg_bm_rsc_status_1       , 0x83430098, 0x8343009c, 32, 1),
    'bm_rsc_status_2'         : (reg_bm_rsc_status_2       , 0x8343009c, 0x834300a0, 32, 1),
    'bm_rsc_status_3'         : (reg_bm_rsc_status_3       , 0x834300a0, 0x834300a4, 32, 1),
    'bm_rsc_status_4'         : (reg_bm_rsc_status_4       , 0x834300a4, 0x834300a8, 32, 1),
    'bm_rsc_status_5'         : (reg_bm_rsc_status_5       , 0x834300a8, 0x834300ac, 32, 1),
    'bm_rsc_status_6'         : (reg_bm_rsc_status_6       , 0x834300ac, 0x834300b0, 32, 1),
    'bm_rsc_status_7'         : (reg_bm_rsc_status_7       , 0x834300b0, 0x834300b4, 32, 1),
    'bm_rsc_status_8'         : (reg_bm_rsc_status_8       , 0x834300b4, 0x834300b8, 32, 1),
    'bm_rsc_status_9'         : (reg_bm_rsc_status_9       , 0x834300b8, 0x834300bc, 32, 1),
    'bm_rsc_status_10'        : (reg_bm_rsc_status_10      , 0x834300bc, 0x834300c0, 32, 1),
    'bm_rsc_status_11'        : (reg_bm_rsc_status_11      , 0x834300c0, 0x834300c4, 32, 1),
    'bm_rsc_status_12'        : (reg_bm_rsc_status_12      , 0x834300c4, 0x834300c8, 32, 1),
    'bm_rsc_status_13'        : (reg_bm_rsc_status_13      , 0x834300c8, 0x834300cc, 32, 1),
    'bm_rsc_status_14'        : (reg_bm_rsc_status_14      , 0x834300cc, 0x834300d0, 32, 1),
    'bm_rsc_status_15'        : (reg_bm_rsc_status_15      , 0x834300d0, 0x834300d4, 32, 1),
    'bm_rsc_status_16'        : (reg_bm_rsc_status_16      , 0x834300d4, 0x834300d8, 32, 1),
    'bm_rsc_status_17'        : (reg_bm_rsc_status_17      , 0x834300d8, 0x834300dc, 32, 1),
    'bm_rsc_status_18'        : (reg_bm_rsc_status_18      , 0x834300dc, 0x834300e0, 32, 1),
    'bm_rsc_status_19'        : (reg_bm_rsc_status_19      , 0x834300e0, 0x834300e4, 32, 1),
    'bm_rsc_status_20'        : (reg_bm_rsc_status_20      , 0x834300e4, 0x834300e8, 32, 1),
    'bm_rsc_status_21'        : (reg_bm_rsc_status_21      , 0x834300e8, 0x834300ec, 32, 1),
    'err_stat_intr_status'    : (reg_err_stat_intr_status  , 0x834300ec, 0x834300f0, 32, 1),
    'err_stat_intr_mask'      : (reg_err_stat_intr_mask    , 0x834300f0, 0x834300f4, 32, 1),
    'err_stat_intr_rc'        : (reg_err_stat_intr_rc      , 0x834300f4, 0x834300f8, 32, 1),
    'err_stat_intr_shadow'    : (reg_err_stat_intr_shadow  , 0x834300f8, 0x834300fc, 32, 1),
    'bm_msg_crc_err_status'   : (reg_bm_msg_crc_err_status , 0x834300fc, 0x83430100, 32, 1),
    'bm_fw_flush_ctrl'        : (reg_bm_fw_flush_ctrl      , 0x83430100, 0x83430104, 32, 1),
    'bm_wr_acc_buf_status'    : (reg_bm_wr_acc_buf_status  , 0x83430104, 0x83430108, 32, 1),
    'bm_vq_id_size_cfg'       : (reg_bm_vq_id_size_cfg     , 0x83430108, 0x8343010c, 32, 1),
    'bm_crdt_cfg1'            : (reg_bm_crdt_cfg1          , 0x8343010c, 0x83430110, 32, 1),
    'bm_misc_cfg'             : (reg_bm_misc_cfg           , 0x83430110, 0x83430114, 32, 1),
    'bm_mem_ecc_en_ctrl'      : (reg_bm_mem_ecc_en_ctrl    , 0x83430114, 0x83430118, 32, 1),
    'bm_rsc_status_22'        : (reg_bm_rsc_status_22      , 0x83430118, 0x8343011c, 32, 1),
    'bm_rsc_status_23'        : (reg_bm_rsc_status_23      , 0x8343011c, 0x83430120, 32, 1),
    'bm_rsc_status_24'        : (reg_bm_rsc_status_24      , 0x83430120, 0x83430124, 32, 1),
    'bm_rsc_status_25'        : (reg_bm_rsc_status_25      , 0x83430124, 0x83430128, 32, 1),
    'bm_rsc_status_26'        : (reg_bm_rsc_status_26      , 0x83430128, 0x8343012c, 32, 1),
    'bm_rsc_status_27'        : (reg_bm_rsc_status_27      , 0x8343012c, 0x83430130, 32, 1),
    'bm_rsc_status_28'        : (reg_bm_rsc_status_28      , 0x83430130, 0x83430134, 32, 1),
    'bm_rsc_status_29'        : (reg_bm_rsc_status_29      , 0x83430134, 0x83430138, 32, 1),
    'bm_fsm_status_6'         : (reg_bm_fsm_status_6       , 0x83430138, 0x8343013c, 32, 1),
    'bm_msg_axi_ctrl'         : (reg_bm_msg_axi_ctrl       , 0x8343013c, 0x83430140, 32, 1),
    'bm_ddr_axi_ctrl'         : (reg_bm_ddr_axi_ctrl       , 0x83430140, 0x83430144, 32, 1),
    'bm_fifo_thr_cfg_0'       : (reg_bm_fifo_thr_cfg_0     , 0x83430144, 0x83430148, 32, 1),
    'bm_fifo_thr_cfg_1'       : (reg_bm_fifo_thr_cfg_1     , 0x83430148, 0x8343014c, 32, 1),
    'bm_fifo_thr_cfg_2'       : (reg_bm_fifo_thr_cfg_2     , 0x8343014c, 0x83430150, 32, 1),
    'bm_fifo_thr_cfg_3'       : (reg_bm_fifo_thr_cfg_3     , 0x83430150, 0x83430154, 32, 1),
    'bm_fifo_thr_cfg_4'       : (reg_bm_fifo_thr_cfg_4     , 0x83430154, 0x83430158, 32, 1),
    'bm_fifo_thr_cfg_5'       : (reg_bm_fifo_thr_cfg_5     , 0x83430158, 0x8343015c, 32, 1),
    'bm_fifo_thr_cfg_6'       : (reg_bm_fifo_thr_cfg_6     , 0x8343015c, 0x83430160, 32, 1),
    'bm_fifo_thr_cfg_7'       : (reg_bm_fifo_thr_cfg_7     , 0x83430160, 0x83430164, 32, 1),
    'bm_fifo_thr_cfg_8'       : (reg_bm_fifo_thr_cfg_8     , 0x83430164, 0x83430168, 32, 1),
    'bm_fifo_thr_cfg_9'       : (reg_bm_fifo_thr_cfg_9     , 0x83430168, 0x8343016c, 32, 1),
    'bm_fifo_thr_cfg_10'      : (reg_bm_fifo_thr_cfg_10    , 0x8343016c, 0x83430170, 32, 1),
    'bm_fifo_thr_cfg_11'      : (reg_bm_fifo_thr_cfg_11    , 0x83430170, 0x83430174, 32, 1),
    'bm_fifo_thr_cfg_12'      : (reg_bm_fifo_thr_cfg_12    , 0x83430174, 0x83430178, 32, 1),
    'bm_fifo_thr_cfg_13'      : (reg_bm_fifo_thr_cfg_13    , 0x83430178, 0x8343017c, 32, 1),
    'bm_cmd_crdt_cfg_0'       : (reg_bm_cmd_crdt_cfg_0     , 0x8343017c, 0x83430180, 32, 1),
    'bm_cmd_crdt_cfg_1'       : (reg_bm_cmd_crdt_cfg_1     , 0x83430180, 0x83430184, 32, 1),
    'bm_cmd_crdt_cfg_2'       : (reg_bm_cmd_crdt_cfg_2     , 0x83430184, 0x83430188, 32, 1),
    'bm_ddr_axi_ctrl_2'       : (reg_bm_ddr_axi_ctrl_2     , 0x83430188, 0x8343018c, 32, 1),
    'bm_fifo_thr_cfg_14'      : (reg_bm_fifo_thr_cfg_14    , 0x8343018c, 0x83430190, 32, 1),
    'bm_new_sram_cfg'         : (reg_bm_new_sram_cfg       , 0x83430190, 0x83430194, 32, 1),
    'bm_mem_ecc_en_ctrl_2'    : (reg_bm_mem_ecc_en_ctrl_2  , 0x83430194, 0x83430198, 32, 1),
    'bm_fsm_status_7'         : (reg_bm_fsm_status_7       , 0x83430198, 0x8343019c, 32, 1),
    'bm_fsm_status_8'         : (reg_bm_fsm_status_8       , 0x8343019c, 0x834301a0, 32, 1),
    'bm_fsm_status_9'         : (reg_bm_fsm_status_9       , 0x834301a0, 0x834301a4, 32, 1),
    'bm_mem_uncor_err_new'    : (reg_bm_mem_uncor_err_new  , 0x834301a4, 0x834301a8, 32, 1),
    'bm_mem_cor_err_new_0'    : (reg_bm_mem_cor_err_new_0  , 0x834301a8, 0x834301ac, 32, 1),
    'bm_mem_cor_err_new_1'    : (reg_bm_mem_cor_err_new_1  , 0x834301ac, 0x834301b0, 32, 1),
    'bm_mem_cor_err_new_2'    : (reg_bm_mem_cor_err_new_2  , 0x834301b0, 0x834301b4, 32, 1),
    'bm_mem_cor_err_new_3'    : (reg_bm_mem_cor_err_new_3  , 0x834301b4, 0x834301b8, 32, 1),
    'bm_fsm_status_10'        : (reg_bm_fsm_status_10      , 0x834301b8, 0x834301bc, 32, 1),
    'bm_rsc_status_30'        : (reg_bm_rsc_status_30      , 0x834301bc, 0x834301c0, 32, 1),
    'bm_mem_cpu_acc_cfg'      : (reg_bm_mem_cpu_acc_cfg    , 0x834301c0, 0x834301c4, 32, 1),
    'bm_mem_cpu_acc_status_0' : (reg_bm_mem_cpu_acc_status_0, 0x834301c4, 0x834301c8, 32, 1),
    'bm_mem_cpu_acc_status_1' : (reg_bm_mem_cpu_acc_status_1, 0x834301c8, 0x834301cc, 32, 1),
    'bm_mem_cpu_acc_status_2' : (reg_bm_mem_cpu_acc_status_2, 0x834301cc, 0x834301d0, 32, 1),
    'bm_mem_cpu_acc_status_3' : (reg_bm_mem_cpu_acc_status_3, 0x834301d0, 0x834301d4, 32, 1),
    'ccs_control_0'           : (reg_ccs_control_0         , 0x83440000, 0x83440004, 32, 1),
    'ccs_control_1'           : (reg_ccs_control_1         , 0x83440004, 0x83440008, 32, 1),
    'ccs_control_2'           : (reg_ccs_control_2         , 0x83440008, 0x8344000c, 32, 1),
    'ccs_control_3'           : (reg_ccs_control_3         , 0x8344000c, 0x83440010, 32, 1),
    'ccs_cplq_cnfg0'          : (reg_ccs_cplq_cnfg0        , 0x83440010, 0x83440014, 32, 1),
    'ccs_cplq_cnfg1'          : (reg_ccs_cplq_cnfg1        , 0x83440014, 0x83440018, 32, 1),
    'ccs_cplq_cnfg2'          : (reg_ccs_cplq_cnfg2        , 0x83440018, 0x8344001c, 32, 1),
    'ccs_cplq_cnfg3'          : (reg_ccs_cplq_cnfg3        , 0x8344001c, 0x83440020, 32, 1),
    'bmbe_cplq_cnfg0'         : (reg_bmbe_cplq_cnfg0       , 0x83440020, 0x83440024, 32, 1),
    'bmbe_cplq_cnfg1'         : (reg_bmbe_cplq_cnfg1       , 0x83440024, 0x83440028, 32, 1),
    'bmbe_cplq_cnfg2'         : (reg_bmbe_cplq_cnfg2       , 0x83440028, 0x8344002c, 32, 1),
    'bmbe_cplq_cnfg3'         : (reg_bmbe_cplq_cnfg3       , 0x8344002c, 0x83440030, 32, 1),
    'ccs_w2p_ccount0'         : (reg_ccs_w2p_ccount0       , 0x83440030, 0x83440034, 32, 1),
    'ccs_w2p_ccount1'         : (reg_ccs_w2p_ccount1       , 0x83440034, 0x83440038, 32, 1),
    'ccs_w2p_ccount2'         : (reg_ccs_w2p_ccount2       , 0x83440038, 0x8344003c, 32, 1),
    'ccs_w2p_ccount3'         : (reg_ccs_w2p_ccount3       , 0x8344003c, 0x83440040, 32, 1),
    'ccs_memalloc_control'    : (reg_ccs_memalloc_control  , 0x83440040, 0x83440044, 32, 1),
    'ccs_memdealloc_control'  : (reg_ccs_memdealloc_control, 0x83440044, 0x83440048, 32, 1),
    'ccs_wpage_cnt_ctrl'      : (reg_ccs_wpage_cnt_ctrl    , 0x8344004c, 0x83440050, 32, 1),
    'ccs_wpage_cnt_status'    : (reg_ccs_wpage_cnt_status  , 0x83440050, 0x83440054, 32, 1),
    'ccs_raidc_status'        : (reg_ccs_raidc_status      , 0x83440054, 0x83440058, 32, 1),
    'ccs_raidr_status0'       : (reg_ccs_raidr_status0     , 0x83440058, 0x8344005c, 32, 1),
    'ccs_raidr_status1'       : (reg_ccs_raidr_status1     , 0x8344005c, 0x83440060, 32, 1),
    'ccs_mem_acc_ctrl'        : (reg_ccs_mem_acc_ctrl      , 0x83440060, 0x83440064, 32, 1),
    'ccs_mem_data'            : (reg_ccs_mem_data          , 0x83440064, 0x83440068, 32, 1),
    'ccs_msg_mem_control'     : (reg_ccs_msg_mem_control   , 0x83440068, 0x8344006c, 32, 1),
    'ccs_msg_mem_data'        : (reg_ccs_msg_mem_data      , 0x8344006c, 0x83440070, 32, 1),
    'ccs_dbg_control0'        : (reg_ccs_dbg_control0      , 0x83440080, 0x83440084, 32, 1),
    'ccs_raidc_ctrl'          : (reg_ccs_raidc_ctrl        , 0x834400c0, 0x834400c4, 32, 1),
    'ccs_raidr_status2'       : (reg_ccs_raidr_status2     , 0x834400c4, 0x834400c8, 32, 1),
    'ccs_tsc_control0'        : (reg_ccs_tsc_control0      , 0x83440100, 0x83440104, 32, 1),
    'ccs_w2p_ts01_control'    : (reg_ccs_w2p_ts01_control  , 0x83440104, 0x83440108, 32, 1),
    'ccs_w2p_to_control'      : (reg_ccs_w2p_to_control    , 0x83440108, 0x8344010c, 32, 1),
    'ccs_b2n_ts01_control'    : (reg_ccs_b2n_ts01_control  , 0x8344010c, 0x83440110, 32, 1),
    'ccs_b2n_to_control'      : (reg_ccs_b2n_to_control    , 0x83440110, 0x83440114, 32, 1),
    'ccs_erase_ts01_control'  : (reg_ccs_erase_ts01_control, 0x83440114, 0x83440118, 32, 1),
    'ccs_erase_to_control'    : (reg_ccs_erase_to_control  , 0x83440118, 0x8344011c, 32, 1),
    'ccs_read_ts01_control'   : (reg_ccs_read_ts01_control , 0x8344011c, 0x83440120, 32, 1),
    'ccs_read_to_control'     : (reg_ccs_read_to_control   , 0x83440120, 0x83440124, 32, 1),
    'ccs_intr_status'         : (reg_ccs_intr_status       , 0x83440180, 0x83440184, 32, 1),
    'ccs_intr_mask'           : (reg_ccs_intr_mask         , 0x83440184, 0x83440188, 32, 1),
    'ccs_intr_rc'             : (reg_ccs_intr_rc           , 0x83440188, 0x8344018c, 32, 1),
    'ccs_intr_shadow'         : (reg_ccs_intr_shadow       , 0x8344018c, 0x83440190, 32, 1),
    'ccs_dpp_ctrl_0'          : (reg_ccs_dpp_ctrl_0        , 0x83440200, 0x83440204, 32, 1),
    'ccs_mem_err_ctrl'        : (reg_ccs_mem_err_ctrl      , 0x83440204, 0x83440208, 32, 1),
    'ccs_mem_cor_err_status'  : (reg_ccs_mem_cor_err_status, 0x83440208, 0x8344020c, 32, 1),
    'ccs_mem_uncor_err_status': (reg_ccs_mem_uncor_err_status, 0x8344020c, 0x83440210, 32, 1),
    'ccs_axi_trans_err_status': (reg_ccs_axi_trans_err_status, 0x83440210, 0x83440214, 32, 1),
    'ccs_cmd_dispatcher_status': (reg_ccs_cmd_dispatcher_status, 0x83440214, 0x83440218, 32, 1),
    'ccs_b2n_proc_status'     : (reg_ccs_b2n_proc_status   , 0x83440218, 0x8344021c, 32, 1),
    'ccs_write_proc_status'   : (reg_ccs_write_proc_status , 0x8344021c, 0x83440220, 32, 1),
    'ccs_abort_done_status'   : (reg_ccs_abort_done_status , 0x83440220, 0x83440224, 32, 1),
    'ccs_misc_status'         : (reg_ccs_misc_status       , 0x83440224, 0x83440228, 32, 1),
    'ccs_b2n_proc_status_ext' : (reg_ccs_b2n_proc_status_ext, 0x83440228, 0x8344022c, 32, 1),
    'ccs_axi_attrib_range0_saddr0': (reg_ccs_axi_attrib_range0_saddr0, 0x83440280, 0x83440284, 32, 1),
    'ccs_axi_attrib_range0_saddr1': (reg_ccs_axi_attrib_range0_saddr1, 0x83440284, 0x83440288, 32, 1),
    'ccs_axi_attrib_range1_saddr0': (reg_ccs_axi_attrib_range1_saddr0, 0x83440288, 0x8344028c, 32, 1),
    'ccs_axi_attrib_range1_saddr1': (reg_ccs_axi_attrib_range1_saddr1, 0x8344028c, 0x83440290, 32, 1),
    'ccs_axi_attrib_range2_saddr0': (reg_ccs_axi_attrib_range2_saddr0, 0x83440290, 0x83440294, 32, 1),
    'ccs_axi_attrib_range2_saddr1': (reg_ccs_axi_attrib_range2_saddr1, 0x83440294, 0x83440298, 32, 1),
    'ccs_axi_attrib_range3_saddr0': (reg_ccs_axi_attrib_range3_saddr0, 0x83440298, 0x8344029c, 32, 1),
    'ccs_axi_attrib_range3_saddr1': (reg_ccs_axi_attrib_range3_saddr1, 0x8344029c, 0x834402a0, 32, 1),
    'ccs_axi_attrib_range0_eaddr0': (reg_ccs_axi_attrib_range0_eaddr0, 0x834402a0, 0x834402a4, 32, 1),
    'ccs_axi_attrib_range0_eaddr1': (reg_ccs_axi_attrib_range0_eaddr1, 0x834402a4, 0x834402a8, 32, 1),
    'ccs_axi_attrib_range1_eaddr0': (reg_ccs_axi_attrib_range1_eaddr0, 0x834402a8, 0x834402ac, 32, 1),
    'ccs_axi_attrib_range1_eaddr1': (reg_ccs_axi_attrib_range1_eaddr1, 0x834402ac, 0x834402b0, 32, 1),
    'ccs_axi_attrib_range2_eaddr0': (reg_ccs_axi_attrib_range2_eaddr0, 0x834402b0, 0x834402b4, 32, 1),
    'ccs_axi_attrib_range2_eaddr1': (reg_ccs_axi_attrib_range2_eaddr1, 0x834402b4, 0x834402b8, 32, 1),
    'ccs_axi_attrib_range3_eaddr0': (reg_ccs_axi_attrib_range3_eaddr0, 0x834402b8, 0x834402bc, 32, 1),
    'ccs_axi_attrib_range3_eaddr1': (reg_ccs_axi_attrib_range3_eaddr1, 0x834402bc, 0x834402c0, 32, 1),
    'ccs_axi_attrib_ctrl_0'   : (reg_ccs_axi_attrib_ctrl_0 , 0x834402c0, 0x834402c4, 32, 1),
    'ccs_axi_attrib_ctrl_1'   : (reg_ccs_axi_attrib_ctrl_1 , 0x834402c4, 0x834402c8, 32, 1),
    'ccs_pes_ctrl'            : (reg_ccs_pes_ctrl          , 0x83440300, 0x83440304, 32, 1),
    'ccs_mon_ctrl'            : (reg_ccs_mon_ctrl          , 0x83440380, 0x83440384, 32, 1),
    'ccs_mon_out'             : (reg_ccs_mon_out           , 0x83440384, 0x83440388, 32, 1),
    'b2n_prep_status'         : (reg_b2n_prep_status       , 0x83440400, 0x83440480, 32, 32),
    'b2n_tbl_status'          : (reg_b2n_tbl_status        , 0x83440480, 0x83440500, 32, 32),
    'stop_on_register'        : (reg_stop_on_register      , 0x83440500, 0x83440504, 32, 1),
    'ccs_raidc_status2'       : (reg_ccs_raidc_status2     , 0x83440504, 0x83440508, 32, 1),
    'sdsw_control'            : (reg_sdsw_control          , 0x83450000, 0x83450004, 32, 1),
    'sdsw_page_ccp_num_limit_ctrl': (reg_sdsw_page_ccp_num_limit_ctrl, 0x83450004, 0x83450008, 32, 1),
    'sdsw_seg_base_addr'      : (reg_sdsw_seg_base_addr    , 0x83450008, 0x8345000c, 32, 1),
    'sdsw_tr_comp_ctrl'       : (reg_sdsw_tr_comp_ctrl     , 0x8345000c, 0x83450010, 32, 1),
    'sdsw_gts_cnt_l'          : (reg_sdsw_gts_cnt_l        , 0x83450010, 0x83450014, 32, 1),
    'sdsw_gts_cnt_h'          : (reg_sdsw_gts_cnt_h        , 0x83450014, 0x83450018, 32, 1),
    'sdsw_status_1'           : (reg_sdsw_status_1         , 0x83450018, 0x8345001c, 32, 1),
    'sdsw_status_2'           : (reg_sdsw_status_2         , 0x8345001c, 0x83450020, 32, 1),
    'sdsw_status_3'           : (reg_sdsw_status_3         , 0x83450020, 0x83450024, 32, 1),
    'sdsw_status_4'           : (reg_sdsw_status_4         , 0x83450024, 0x83450028, 32, 1),
    'sdsw_status_5'           : (reg_sdsw_status_5         , 0x83450028, 0x8345002c, 32, 1),
    'sdsw_status_6'           : (reg_sdsw_status_6         , 0x8345002c, 0x83450030, 32, 1),
    'sdsw_status_7'           : (reg_sdsw_status_7         , 0x83450030, 0x83450034, 32, 1),
    'sdsw_fsm_status_0'       : (reg_sdsw_fsm_status_0     , 0x83450034, 0x83450038, 32, 1),
    'sdsw_fsm_status_1'       : (reg_sdsw_fsm_status_1     , 0x83450038, 0x8345003c, 32, 1),
    'sdsw_fsm_status_2'       : (reg_sdsw_fsm_status_2     , 0x8345003c, 0x83450040, 32, 1),
    'sdsw_cps_mem_ocpy_status': (reg_sdsw_cps_mem_ocpy_status, 0x83450040, 0x83450044, 32, 1),
    'sdsw_mon_ctrl'           : (reg_sdsw_mon_ctrl         , 0x83450044, 0x83450048, 32, 1),
    'sdsw_mon_out'            : (reg_sdsw_mon_out          , 0x83450048, 0x8345004c, 32, 1),
    'sdsw_mem_acc_ctrl'       : (reg_sdsw_mem_acc_ctrl     , 0x8345004c, 0x83450050, 32, 1),
    'sdsw_indir_dat_0'        : (reg_sdsw_indir_dat_0      , 0x83450050, 0x83450054, 32, 1),
    'sdsw_indir_dat_1'        : (reg_sdsw_indir_dat_1      , 0x83450054, 0x83450058, 32, 1),
    'sdsw_indir_dat_2'        : (reg_sdsw_indir_dat_2      , 0x83450058, 0x8345005c, 32, 1),
    'sdsw_indir_dat_3'        : (reg_sdsw_indir_dat_3      , 0x8345005c, 0x83450060, 32, 1),
    'sdsw_mem_err_inj_ctrl'   : (reg_sdsw_mem_err_inj_ctrl , 0x83450060, 0x83450064, 32, 1),
    'sdsw_mem_err_status_0'   : (reg_sdsw_mem_err_status_0 , 0x83450064, 0x83450068, 32, 1),
    'sdsw_mem_err_status_1'   : (reg_sdsw_mem_err_status_1 , 0x83450068, 0x8345006c, 32, 1),
    'sdsw_err_stat_intr_status': (reg_sdsw_err_stat_intr_status, 0x8345006c, 0x83450070, 32, 1),
    'sdsw_err_stat_intr_mask' : (reg_sdsw_err_stat_intr_mask, 0x83450070, 0x83450074, 32, 1),
    'sdsw_err_stat_intr_rc'   : (reg_sdsw_err_stat_intr_rc , 0x83450074, 0x83450078, 32, 1),
    'sdsw_err_stat_intr_shadow': (reg_sdsw_err_stat_intr_shadow, 0x83450078, 0x8345007c, 32, 1),
    'sdsw_aes_ctrl_0'         : (reg_sdsw_aes_ctrl_0       , 0x8345007c, 0x83450080, 32, 1),
    'sdsw_aes_ctrl_1'         : (reg_sdsw_aes_ctrl_1       , 0x83450080, 0x83450084, 32, 1),
    'sdsw_aes_stat_0'         : (reg_sdsw_aes_stat_0       , 0x83450084, 0x83450088, 32, 1),
    'sdsw_aes_stat_1'         : (reg_sdsw_aes_stat_1       , 0x83450088, 0x8345008c, 32, 1),
    'sdsw_rbuf_status_1'      : (reg_sdsw_rbuf_status_1    , 0x8345008c, 0x83450090, 32, 1),
    'sdsw_rbuf_status_2'      : (reg_sdsw_rbuf_status_2    , 0x83450090, 0x83450094, 32, 1),
    'sdsw_rbuf_size_status_0' : (reg_sdsw_rbuf_size_status_0, 0x83450094, 0x83450098, 32, 1),
    'sdsw_rbuf_size_status_1' : (reg_sdsw_rbuf_size_status_1, 0x83450098, 0x8345009c, 32, 1),
    'sdsw_rbuf_size_status_2' : (reg_sdsw_rbuf_size_status_2, 0x8345009c, 0x834500a0, 32, 1),
    'sdsw_rbuf_size_status_3' : (reg_sdsw_rbuf_size_status_3, 0x834500a0, 0x834500a4, 32, 1),
    'sdsw_rbuf_size_status_4' : (reg_sdsw_rbuf_size_status_4, 0x834500a4, 0x834500a8, 32, 1),
    'sdsw_rbuf_size_status_5' : (reg_sdsw_rbuf_size_status_5, 0x834500a8, 0x834500ac, 32, 1),
    'sdsw_rbuf_size_status_6' : (reg_sdsw_rbuf_size_status_6, 0x834500ac, 0x834500b0, 32, 1),
    'sdsw_rbuf_size_status_7' : (reg_sdsw_rbuf_size_status_7, 0x834500b0, 0x834500b4, 32, 1),
    'sdsw_rbuf_size_status_8' : (reg_sdsw_rbuf_size_status_8, 0x834500b4, 0x834500b8, 32, 1),
    'sdsw_rbuf_size_status_9' : (reg_sdsw_rbuf_size_status_9, 0x834500b8, 0x834500bc, 32, 1),
    'sdsw_rbuf_size_status_10': (reg_sdsw_rbuf_size_status_10, 0x834500bc, 0x834500c0, 32, 1),
    'sdsw_nvme_axi_par_err_cfg': (reg_sdsw_nvme_axi_par_err_cfg, 0x834500c0, 0x834500c4, 32, 1),
    'sdsw_nvme_axi_par_err_status': (reg_sdsw_nvme_axi_par_err_status, 0x834500c4, 0x834500c8, 32, 1),
    'sdsw_rbuf_err_status'    : (reg_sdsw_rbuf_err_status  , 0x834500c8, 0x834500cc, 32, 1),
    'sdsw_gc_wr_lba_mask_cfg_l': (reg_sdsw_gc_wr_lba_mask_cfg_l, 0x834500cc, 0x834500d0, 32, 1),
    'sdsw_gc_wr_lba_mask_cfg_h': (reg_sdsw_gc_wr_lba_mask_cfg_h, 0x834500d0, 0x834500d4, 32, 1),
    'sdsw_mem_ecc_en_ctrl'    : (reg_sdsw_mem_ecc_en_ctrl  , 0x834500d4, 0x834500d8, 32, 1),
    'sdsw_control_2'          : (reg_sdsw_control_2        , 0x834500d8, 0x834500dc, 32, 1),
    'sdsw_crdt_ctrl1'         : (reg_sdsw_crdt_ctrl1       , 0x834500dc, 0x834500e0, 32, 1),
    'sdsw_crdt_ctrl2'         : (reg_sdsw_crdt_ctrl2       , 0x834500e0, 0x834500e4, 32, 1),
    'sdsw_crdt_ctrl3'         : (reg_sdsw_crdt_ctrl3       , 0x834500e4, 0x834500e8, 32, 1),
    'sdsw_crdt_ctrl4'         : (reg_sdsw_crdt_ctrl4       , 0x834500e8, 0x834500ec, 32, 1),
    'sdsw_crdt_ctrl5'         : (reg_sdsw_crdt_ctrl5       , 0x834500ec, 0x834500f0, 32, 1),
    'sdsw_pi_crc32_init'      : (reg_sdsw_pi_crc32_init    , 0x834500f0, 0x834500f4, 32, 1),
    'sdsw_pi_crc16_init'      : (reg_sdsw_pi_crc16_init    , 0x834500f4, 0x834500f8, 32, 1),
    'sdsw_status_8'           : (reg_sdsw_status_8         , 0x834500f8, 0x834500fc, 32, 1),
    'sdsr_ctrl'               : (reg_sdsr_ctrl             , 0x83450200, 0x83450204, 32, 1),
    'sdsr_stat'               : (reg_sdsr_stat             , 0x83450208, 0x8345020c, 32, 1),
    'sdsr_mon_ctrl'           : (reg_sdsr_mon_ctrl         , 0x83450210, 0x83450214, 32, 1),
    'sdsr_mon_out'            : (reg_sdsr_mon_out          , 0x83450214, 0x83450218, 32, 1),
    'sdsr_mon_mode'           : (reg_sdsr_mon_mode         , 0x83450218, 0x8345021c, 32, 1),
    'sdsr_aes_ctrl_0'         : (reg_sdsr_aes_ctrl_0       , 0x83450220, 0x83450224, 32, 1),
    'sdsr_aes_ctrl_1'         : (reg_sdsr_aes_ctrl_1       , 0x83450224, 0x83450228, 32, 1),
    'sdsr_aes_stat_0'         : (reg_sdsr_aes_stat_0       , 0x83450228, 0x8345022c, 32, 1),
    'sdsr_aes_stat_1'         : (reg_sdsr_aes_stat_1       , 0x8345022c, 0x83450230, 32, 1),
    'sdsr_mem_acc_ctrl_0'     : (reg_sdsr_mem_acc_ctrl_0   , 0x83450230, 0x83450234, 32, 1),
    'sdsr_mem_acc_ctrl_1'     : (reg_sdsr_mem_acc_ctrl_1   , 0x83450234, 0x83450238, 32, 1),
    'sdsr_mem_acc_out_0'      : (reg_sdsr_mem_acc_out_0    , 0x83450238, 0x8345023c, 32, 1),
    'sdsr_mem_acc_out_1'      : (reg_sdsr_mem_acc_out_1    , 0x8345023c, 0x83450240, 32, 1),
    'sdsr_mem_acc_out_2'      : (reg_sdsr_mem_acc_out_2    , 0x83450240, 0x83450244, 32, 1),
    'sdsr_mem_acc_out_3'      : (reg_sdsr_mem_acc_out_3    , 0x83450244, 0x83450248, 32, 1),
    'sdsr_err_stat_intr_status': (reg_sdsr_err_stat_intr_status, 0x83450250, 0x83450254, 32, 1),
    'sdsr_err_stat_intr_mask' : (reg_sdsr_err_stat_intr_mask, 0x83450254, 0x83450258, 32, 1),
    'sdsr_err_stat_intr_rc'   : (reg_sdsr_err_stat_intr_rc , 0x83450258, 0x8345025c, 32, 1),
    'sdsr_err_stat_intr_shadow': (reg_sdsr_err_stat_intr_shadow, 0x8345025c, 0x83450260, 32, 1),
    'sdsr_gc_rd_lba_mask_cfg_l': (reg_sdsr_gc_rd_lba_mask_cfg_l, 0x83450260, 0x83450264, 32, 1),
    'sdsr_gc_rd_lba_mask_cfg_h': (reg_sdsr_gc_rd_lba_mask_cfg_h, 0x83450264, 0x83450268, 32, 1),
    'sdsr_bm_s1_base_addr_l'  : (reg_sdsr_bm_s1_base_addr_l, 0x83450280, 0x83450284, 32, 1),
    'sdsr_bm_s1_base_addr_h'  : (reg_sdsr_bm_s1_base_addr_h, 0x83450284, 0x83450288, 32, 1),
    'sdsr_bm_msg_s0_base_addr_l': (reg_sdsr_bm_msg_s0_base_addr_l, 0x83450288, 0x8345028c, 32, 1),
    'sdsr_bm_msg_s0_base_addr_h': (reg_sdsr_bm_msg_s0_base_addr_h, 0x8345028c, 0x83450290, 32, 1),
    'sdsw_tr_comp_0_ecc_en_0' : (reg_sdsw_tr_comp_0_ecc_en_0, 0x83450300, 0x83450304, 32, 1),
    'sdsw_tr_comp_0_ecc_en_1' : (reg_sdsw_tr_comp_0_ecc_en_1, 0x83450304, 0x83450308, 32, 1),
    'sdsw_tr_comp_0_ecc_en_2' : (reg_sdsw_tr_comp_0_ecc_en_2, 0x83450308, 0x8345030c, 32, 1),
    'sdsw_tr_comp_0_ecc_en_3' : (reg_sdsw_tr_comp_0_ecc_en_3, 0x8345030c, 0x83450310, 32, 1),
    'sdsw_tr_comp_0_cor_err_inj_0': (reg_sdsw_tr_comp_0_cor_err_inj_0, 0x83450310, 0x83450314, 32, 1),
    'sdsw_tr_comp_0_cor_err_inj_1': (reg_sdsw_tr_comp_0_cor_err_inj_1, 0x83450314, 0x83450318, 32, 1),
    'sdsw_tr_comp_0_cor_err_inj_2': (reg_sdsw_tr_comp_0_cor_err_inj_2, 0x83450318, 0x8345031c, 32, 1),
    'sdsw_tr_comp_0_cor_err_inj_3': (reg_sdsw_tr_comp_0_cor_err_inj_3, 0x8345031c, 0x83450320, 32, 1),
    'sdsw_tr_comp_0_uncor_err_inj_0': (reg_sdsw_tr_comp_0_uncor_err_inj_0, 0x83450320, 0x83450324, 32, 1),
    'sdsw_tr_comp_0_uncor_err_inj_1': (reg_sdsw_tr_comp_0_uncor_err_inj_1, 0x83450324, 0x83450328, 32, 1),
    'sdsw_tr_comp_0_uncor_err_inj_2': (reg_sdsw_tr_comp_0_uncor_err_inj_2, 0x83450328, 0x8345032c, 32, 1),
    'sdsw_tr_comp_0_uncor_err_inj_3': (reg_sdsw_tr_comp_0_uncor_err_inj_3, 0x8345032c, 0x83450330, 32, 1),
    'sdsw_tr_comp_0_cor_err_clr_0': (reg_sdsw_tr_comp_0_cor_err_clr_0, 0x83450330, 0x83450334, 32, 1),
    'sdsw_tr_comp_0_cor_err_clr_1': (reg_sdsw_tr_comp_0_cor_err_clr_1, 0x83450334, 0x83450338, 32, 1),
    'sdsw_tr_comp_0_cor_err_clr_2': (reg_sdsw_tr_comp_0_cor_err_clr_2, 0x83450338, 0x8345033c, 32, 1),
    'sdsw_tr_comp_0_cor_err_clr_3': (reg_sdsw_tr_comp_0_cor_err_clr_3, 0x8345033c, 0x83450340, 32, 1),
    'sdsw_tr_comp_0_uncor_err_clr_0': (reg_sdsw_tr_comp_0_uncor_err_clr_0, 0x83450340, 0x83450344, 32, 1),
    'sdsw_tr_comp_0_uncor_err_clr_1': (reg_sdsw_tr_comp_0_uncor_err_clr_1, 0x83450344, 0x83450348, 32, 1),
    'sdsw_tr_comp_0_uncor_err_clr_2': (reg_sdsw_tr_comp_0_uncor_err_clr_2, 0x83450348, 0x8345034c, 32, 1),
    'sdsw_tr_comp_0_uncor_err_clr_3': (reg_sdsw_tr_comp_0_uncor_err_clr_3, 0x8345034c, 0x83450350, 32, 1),
    'sdsw_tr_comp_0_cor_err_0': (reg_sdsw_tr_comp_0_cor_err_0, 0x83450350, 0x83450354, 32, 1),
    'sdsw_tr_comp_0_cor_err_1': (reg_sdsw_tr_comp_0_cor_err_1, 0x83450354, 0x83450358, 32, 1),
    'sdsw_tr_comp_0_cor_err_2': (reg_sdsw_tr_comp_0_cor_err_2, 0x83450358, 0x8345035c, 32, 1),
    'sdsw_tr_comp_0_cor_err_3': (reg_sdsw_tr_comp_0_cor_err_3, 0x8345035c, 0x83450360, 32, 1),
    'sdsw_tr_comp_0_uncor_err_0': (reg_sdsw_tr_comp_0_uncor_err_0, 0x83450360, 0x83450364, 32, 1),
    'sdsw_tr_comp_0_uncor_err_1': (reg_sdsw_tr_comp_0_uncor_err_1, 0x83450364, 0x83450368, 32, 1),
    'sdsw_tr_comp_0_uncor_err_2': (reg_sdsw_tr_comp_0_uncor_err_2, 0x83450368, 0x8345036c, 32, 1),
    'sdsw_tr_comp_0_uncor_err_3': (reg_sdsw_tr_comp_0_uncor_err_3, 0x8345036c, 0x83450370, 32, 1),
    'sdsw_tr_comp_1_ecc_en_0' : (reg_sdsw_tr_comp_1_ecc_en_0, 0x83450370, 0x83450374, 32, 1),
    'sdsw_tr_comp_1_ecc_en_1' : (reg_sdsw_tr_comp_1_ecc_en_1, 0x83450374, 0x83450378, 32, 1),
    'sdsw_tr_comp_1_ecc_en_2' : (reg_sdsw_tr_comp_1_ecc_en_2, 0x83450378, 0x8345037c, 32, 1),
    'sdsw_tr_comp_1_ecc_en_3' : (reg_sdsw_tr_comp_1_ecc_en_3, 0x8345037c, 0x83450380, 32, 1),
    'sdsw_tr_comp_1_cor_err_inj_0': (reg_sdsw_tr_comp_1_cor_err_inj_0, 0x83450380, 0x83450384, 32, 1),
    'sdsw_tr_comp_1_cor_err_inj_1': (reg_sdsw_tr_comp_1_cor_err_inj_1, 0x83450384, 0x83450388, 32, 1),
    'sdsw_tr_comp_1_cor_err_inj_2': (reg_sdsw_tr_comp_1_cor_err_inj_2, 0x83450388, 0x8345038c, 32, 1),
    'sdsw_tr_comp_1_cor_err_inj_3': (reg_sdsw_tr_comp_1_cor_err_inj_3, 0x8345038c, 0x83450390, 32, 1),
    'sdsw_tr_comp_1_uncor_err_inj_0': (reg_sdsw_tr_comp_1_uncor_err_inj_0, 0x83450390, 0x83450394, 32, 1),
    'sdsw_tr_comp_1_uncor_err_inj_1': (reg_sdsw_tr_comp_1_uncor_err_inj_1, 0x83450394, 0x83450398, 32, 1),
    'sdsw_tr_comp_1_uncor_err_inj_2': (reg_sdsw_tr_comp_1_uncor_err_inj_2, 0x83450398, 0x8345039c, 32, 1),
    'sdsw_tr_comp_1_uncor_err_inj_3': (reg_sdsw_tr_comp_1_uncor_err_inj_3, 0x8345039c, 0x834503a0, 32, 1),
    'sdsw_tr_comp_1_cor_err_clr_0': (reg_sdsw_tr_comp_1_cor_err_clr_0, 0x834503a0, 0x834503a4, 32, 1),
    'sdsw_tr_comp_1_cor_err_clr_1': (reg_sdsw_tr_comp_1_cor_err_clr_1, 0x834503a4, 0x834503a8, 32, 1),
    'sdsw_tr_comp_1_cor_err_clr_2': (reg_sdsw_tr_comp_1_cor_err_clr_2, 0x834503a8, 0x834503ac, 32, 1),
    'sdsw_tr_comp_1_cor_err_clr_3': (reg_sdsw_tr_comp_1_cor_err_clr_3, 0x834503ac, 0x834503b0, 32, 1),
    'sdsw_tr_comp_1_uncor_err_clr_0': (reg_sdsw_tr_comp_1_uncor_err_clr_0, 0x834503b0, 0x834503b4, 32, 1),
    'sdsw_tr_comp_1_uncor_err_clr_1': (reg_sdsw_tr_comp_1_uncor_err_clr_1, 0x834503b4, 0x834503b8, 32, 1),
    'sdsw_tr_comp_1_uncor_err_clr_2': (reg_sdsw_tr_comp_1_uncor_err_clr_2, 0x834503b8, 0x834503bc, 32, 1),
    'sdsw_tr_comp_1_uncor_err_clr_3': (reg_sdsw_tr_comp_1_uncor_err_clr_3, 0x834503bc, 0x834503c0, 32, 1),
    'sdsw_tr_comp_1_cor_err_0': (reg_sdsw_tr_comp_1_cor_err_0, 0x834503c0, 0x834503c4, 32, 1),
    'sdsw_tr_comp_1_cor_err_1': (reg_sdsw_tr_comp_1_cor_err_1, 0x834503c4, 0x834503c8, 32, 1),
    'sdsw_tr_comp_1_cor_err_2': (reg_sdsw_tr_comp_1_cor_err_2, 0x834503c8, 0x834503cc, 32, 1),
    'sdsw_tr_comp_1_cor_err_3': (reg_sdsw_tr_comp_1_cor_err_3, 0x834503cc, 0x834503d0, 32, 1),
    'sdsw_tr_comp_1_uncor_err_0': (reg_sdsw_tr_comp_1_uncor_err_0, 0x834503d0, 0x834503d4, 32, 1),
    'sdsw_tr_comp_1_uncor_err_1': (reg_sdsw_tr_comp_1_uncor_err_1, 0x834503d4, 0x834503d8, 32, 1),
    'sdsw_tr_comp_1_uncor_err_2': (reg_sdsw_tr_comp_1_uncor_err_2, 0x834503d8, 0x834503dc, 32, 1),
    'sdsw_tr_comp_1_uncor_err_3': (reg_sdsw_tr_comp_1_uncor_err_3, 0x834503dc, 0x834503e0, 32, 1),
    'sdsw_tr_comp_2_ecc_en_0' : (reg_sdsw_tr_comp_2_ecc_en_0, 0x834503e0, 0x834503e4, 32, 1),
    'sdsw_tr_comp_2_ecc_en_1' : (reg_sdsw_tr_comp_2_ecc_en_1, 0x834503e4, 0x834503e8, 32, 1),
    'sdsw_tr_comp_2_ecc_en_2' : (reg_sdsw_tr_comp_2_ecc_en_2, 0x834503e8, 0x834503ec, 32, 1),
    'sdsw_tr_comp_2_ecc_en_3' : (reg_sdsw_tr_comp_2_ecc_en_3, 0x834503ec, 0x834503f0, 32, 1),
    'sdsw_tr_comp_2_cor_err_inj_0': (reg_sdsw_tr_comp_2_cor_err_inj_0, 0x834503f0, 0x834503f4, 32, 1),
    'sdsw_tr_comp_2_cor_err_inj_1': (reg_sdsw_tr_comp_2_cor_err_inj_1, 0x834503f4, 0x834503f8, 32, 1),
    'sdsw_tr_comp_2_cor_err_inj_2': (reg_sdsw_tr_comp_2_cor_err_inj_2, 0x834503f8, 0x834503fc, 32, 1),
    'sdsw_tr_comp_2_cor_err_inj_3': (reg_sdsw_tr_comp_2_cor_err_inj_3, 0x834503fc, 0x83450400, 32, 1),
    'sdsw_tr_comp_2_uncor_err_inj_0': (reg_sdsw_tr_comp_2_uncor_err_inj_0, 0x83450400, 0x83450404, 32, 1),
    'sdsw_tr_comp_2_uncor_err_inj_1': (reg_sdsw_tr_comp_2_uncor_err_inj_1, 0x83450404, 0x83450408, 32, 1),
    'sdsw_tr_comp_2_uncor_err_inj_2': (reg_sdsw_tr_comp_2_uncor_err_inj_2, 0x83450408, 0x8345040c, 32, 1),
    'sdsw_tr_comp_2_uncor_err_inj_3': (reg_sdsw_tr_comp_2_uncor_err_inj_3, 0x8345040c, 0x83450410, 32, 1),
    'sdsw_tr_comp_2_cor_err_clr_0': (reg_sdsw_tr_comp_2_cor_err_clr_0, 0x83450410, 0x83450414, 32, 1),
    'sdsw_tr_comp_2_cor_err_clr_1': (reg_sdsw_tr_comp_2_cor_err_clr_1, 0x83450414, 0x83450418, 32, 1),
    'sdsw_tr_comp_2_cor_err_clr_2': (reg_sdsw_tr_comp_2_cor_err_clr_2, 0x83450418, 0x8345041c, 32, 1),
    'sdsw_tr_comp_2_cor_err_clr_3': (reg_sdsw_tr_comp_2_cor_err_clr_3, 0x8345041c, 0x83450420, 32, 1),
    'sdsw_tr_comp_2_uncor_err_clr_0': (reg_sdsw_tr_comp_2_uncor_err_clr_0, 0x83450420, 0x83450424, 32, 1),
    'sdsw_tr_comp_2_uncor_err_clr_1': (reg_sdsw_tr_comp_2_uncor_err_clr_1, 0x83450424, 0x83450428, 32, 1),
    'sdsw_tr_comp_2_uncor_err_clr_2': (reg_sdsw_tr_comp_2_uncor_err_clr_2, 0x83450428, 0x8345042c, 32, 1),
    'sdsw_tr_comp_2_uncor_err_clr_3': (reg_sdsw_tr_comp_2_uncor_err_clr_3, 0x8345042c, 0x83450430, 32, 1),
    'sdsw_tr_comp_2_cor_err_0': (reg_sdsw_tr_comp_2_cor_err_0, 0x83450430, 0x83450434, 32, 1),
    'sdsw_tr_comp_2_cor_err_1': (reg_sdsw_tr_comp_2_cor_err_1, 0x83450434, 0x83450438, 32, 1),
    'sdsw_tr_comp_2_cor_err_2': (reg_sdsw_tr_comp_2_cor_err_2, 0x83450438, 0x8345043c, 32, 1),
    'sdsw_tr_comp_2_cor_err_3': (reg_sdsw_tr_comp_2_cor_err_3, 0x8345043c, 0x83450440, 32, 1),
    'sdsw_tr_comp_2_uncor_err_0': (reg_sdsw_tr_comp_2_uncor_err_0, 0x83450440, 0x83450444, 32, 1),
    'sdsw_tr_comp_2_uncor_err_1': (reg_sdsw_tr_comp_2_uncor_err_1, 0x83450444, 0x83450448, 32, 1),
    'sdsw_tr_comp_2_uncor_err_2': (reg_sdsw_tr_comp_2_uncor_err_2, 0x83450448, 0x8345044c, 32, 1),
    'sdsw_tr_comp_2_uncor_err_3': (reg_sdsw_tr_comp_2_uncor_err_3, 0x8345044c, 0x83450450, 32, 1),
    'sdsw_tr_comp_3_ecc_en_0' : (reg_sdsw_tr_comp_3_ecc_en_0, 0x83450450, 0x83450454, 32, 1),
    'sdsw_tr_comp_3_ecc_en_1' : (reg_sdsw_tr_comp_3_ecc_en_1, 0x83450454, 0x83450458, 32, 1),
    'sdsw_tr_comp_3_ecc_en_2' : (reg_sdsw_tr_comp_3_ecc_en_2, 0x83450458, 0x8345045c, 32, 1),
    'sdsw_tr_comp_3_ecc_en_3' : (reg_sdsw_tr_comp_3_ecc_en_3, 0x8345045c, 0x83450460, 32, 1),
    'sdsw_tr_comp_3_cor_err_inj_0': (reg_sdsw_tr_comp_3_cor_err_inj_0, 0x83450460, 0x83450464, 32, 1),
    'sdsw_tr_comp_3_cor_err_inj_1': (reg_sdsw_tr_comp_3_cor_err_inj_1, 0x83450464, 0x83450468, 32, 1),
    'sdsw_tr_comp_3_cor_err_inj_2': (reg_sdsw_tr_comp_3_cor_err_inj_2, 0x83450468, 0x8345046c, 32, 1),
    'sdsw_tr_comp_3_cor_err_inj_3': (reg_sdsw_tr_comp_3_cor_err_inj_3, 0x8345046c, 0x83450470, 32, 1),
    'sdsw_tr_comp_3_uncor_err_inj_0': (reg_sdsw_tr_comp_3_uncor_err_inj_0, 0x83450470, 0x83450474, 32, 1),
    'sdsw_tr_comp_3_uncor_err_inj_1': (reg_sdsw_tr_comp_3_uncor_err_inj_1, 0x83450474, 0x83450478, 32, 1),
    'sdsw_tr_comp_3_uncor_err_inj_2': (reg_sdsw_tr_comp_3_uncor_err_inj_2, 0x83450478, 0x8345047c, 32, 1),
    'sdsw_tr_comp_3_uncor_err_inj_3': (reg_sdsw_tr_comp_3_uncor_err_inj_3, 0x8345047c, 0x83450480, 32, 1),
    'sdsw_tr_comp_3_cor_err_clr_0': (reg_sdsw_tr_comp_3_cor_err_clr_0, 0x83450480, 0x83450484, 32, 1),
    'sdsw_tr_comp_3_cor_err_clr_1': (reg_sdsw_tr_comp_3_cor_err_clr_1, 0x83450484, 0x83450488, 32, 1),
    'sdsw_tr_comp_3_cor_err_clr_2': (reg_sdsw_tr_comp_3_cor_err_clr_2, 0x83450488, 0x8345048c, 32, 1),
    'sdsw_tr_comp_3_cor_err_clr_3': (reg_sdsw_tr_comp_3_cor_err_clr_3, 0x8345048c, 0x83450490, 32, 1),
    'sdsw_tr_comp_3_uncor_err_clr_0': (reg_sdsw_tr_comp_3_uncor_err_clr_0, 0x83450490, 0x83450494, 32, 1),
    'sdsw_tr_comp_3_uncor_err_clr_1': (reg_sdsw_tr_comp_3_uncor_err_clr_1, 0x83450494, 0x83450498, 32, 1),
    'sdsw_tr_comp_3_uncor_err_clr_2': (reg_sdsw_tr_comp_3_uncor_err_clr_2, 0x83450498, 0x8345049c, 32, 1),
    'sdsw_tr_comp_3_uncor_err_clr_3': (reg_sdsw_tr_comp_3_uncor_err_clr_3, 0x8345049c, 0x834504a0, 32, 1),
    'sdsw_tr_comp_3_cor_err_0': (reg_sdsw_tr_comp_3_cor_err_0, 0x834504a0, 0x834504a4, 32, 1),
    'sdsw_tr_comp_3_cor_err_1': (reg_sdsw_tr_comp_3_cor_err_1, 0x834504a4, 0x834504a8, 32, 1),
    'sdsw_tr_comp_3_cor_err_2': (reg_sdsw_tr_comp_3_cor_err_2, 0x834504a8, 0x834504ac, 32, 1),
    'sdsw_tr_comp_3_cor_err_3': (reg_sdsw_tr_comp_3_cor_err_3, 0x834504ac, 0x834504b0, 32, 1),
    'sdsw_tr_comp_3_uncor_err_0': (reg_sdsw_tr_comp_3_uncor_err_0, 0x834504b0, 0x834504b4, 32, 1),
    'sdsw_tr_comp_3_uncor_err_1': (reg_sdsw_tr_comp_3_uncor_err_1, 0x834504b4, 0x834504b8, 32, 1),
    'sdsw_tr_comp_3_uncor_err_2': (reg_sdsw_tr_comp_3_uncor_err_2, 0x834504b8, 0x834504bc, 32, 1),
    'sdsw_tr_comp_3_uncor_err_3': (reg_sdsw_tr_comp_3_uncor_err_3, 0x834504bc, 0x834504c0, 32, 1),
    'sdsw_tr_decomp_0_ecc_en_0': (reg_sdsw_tr_decomp_0_ecc_en_0, 0x834504c0, 0x834504c4, 32, 1),
    'sdsw_tr_decomp_0_ecc_en_1': (reg_sdsw_tr_decomp_0_ecc_en_1, 0x834504c4, 0x834504c8, 32, 1),
    'sdsw_tr_decomp_0_cor_err_inj_0': (reg_sdsw_tr_decomp_0_cor_err_inj_0, 0x834504c8, 0x834504cc, 32, 1),
    'sdsw_tr_decomp_0_cor_err_inj_1': (reg_sdsw_tr_decomp_0_cor_err_inj_1, 0x834504cc, 0x834504d0, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_inj_0': (reg_sdsw_tr_decomp_0_uncor_err_inj_0, 0x834504d0, 0x834504d4, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_inj_1': (reg_sdsw_tr_decomp_0_uncor_err_inj_1, 0x834504d4, 0x834504d8, 32, 1),
    'sdsw_tr_decomp_0_cor_err_clr_0': (reg_sdsw_tr_decomp_0_cor_err_clr_0, 0x834504d8, 0x834504dc, 32, 1),
    'sdsw_tr_decomp_0_cor_err_clr_1': (reg_sdsw_tr_decomp_0_cor_err_clr_1, 0x834504dc, 0x834504e0, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_clr_0': (reg_sdsw_tr_decomp_0_uncor_err_clr_0, 0x834504e0, 0x834504e4, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_clr_1': (reg_sdsw_tr_decomp_0_uncor_err_clr_1, 0x834504e4, 0x834504e8, 32, 1),
    'sdsw_tr_decomp_0_cor_err_0': (reg_sdsw_tr_decomp_0_cor_err_0, 0x834504e8, 0x834504ec, 32, 1),
    'sdsw_tr_decomp_0_cor_err_1': (reg_sdsw_tr_decomp_0_cor_err_1, 0x834504ec, 0x834504f0, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_0': (reg_sdsw_tr_decomp_0_uncor_err_0, 0x834504f0, 0x834504f4, 32, 1),
    'sdsw_tr_decomp_0_uncor_err_1': (reg_sdsw_tr_decomp_0_uncor_err_1, 0x834504f4, 0x834504f8, 32, 1),
    'sdsw_tr_decomp_1_ecc_en_0': (reg_sdsw_tr_decomp_1_ecc_en_0, 0x834504f8, 0x834504fc, 32, 1),
    'sdsw_tr_decomp_1_ecc_en_1': (reg_sdsw_tr_decomp_1_ecc_en_1, 0x834504fc, 0x83450500, 32, 1),
    'sdsw_tr_decomp_1_cor_err_inj_0': (reg_sdsw_tr_decomp_1_cor_err_inj_0, 0x83450500, 0x83450504, 32, 1),
    'sdsw_tr_decomp_1_cor_err_inj_1': (reg_sdsw_tr_decomp_1_cor_err_inj_1, 0x83450504, 0x83450508, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_inj_0': (reg_sdsw_tr_decomp_1_uncor_err_inj_0, 0x83450508, 0x8345050c, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_inj_1': (reg_sdsw_tr_decomp_1_uncor_err_inj_1, 0x8345050c, 0x83450510, 32, 1),
    'sdsw_tr_decomp_1_cor_err_clr_0': (reg_sdsw_tr_decomp_1_cor_err_clr_0, 0x83450510, 0x83450514, 32, 1),
    'sdsw_tr_decomp_1_cor_err_clr_1': (reg_sdsw_tr_decomp_1_cor_err_clr_1, 0x83450514, 0x83450518, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_clr_0': (reg_sdsw_tr_decomp_1_uncor_err_clr_0, 0x83450518, 0x8345051c, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_clr_1': (reg_sdsw_tr_decomp_1_uncor_err_clr_1, 0x8345051c, 0x83450520, 32, 1),
    'sdsw_tr_decomp_1_cor_err_0': (reg_sdsw_tr_decomp_1_cor_err_0, 0x83450520, 0x83450524, 32, 1),
    'sdsw_tr_decomp_1_cor_err_1': (reg_sdsw_tr_decomp_1_cor_err_1, 0x83450524, 0x83450528, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_0': (reg_sdsw_tr_decomp_1_uncor_err_0, 0x83450528, 0x8345052c, 32, 1),
    'sdsw_tr_decomp_1_uncor_err_1': (reg_sdsw_tr_decomp_1_uncor_err_1, 0x8345052c, 0x83450530, 32, 1),
    'sdsr_tr_decomp_0_ecc_en_0': (reg_sdsr_tr_decomp_0_ecc_en_0, 0x83450530, 0x83450534, 32, 1),
    'sdsr_tr_decomp_0_ecc_en_1': (reg_sdsr_tr_decomp_0_ecc_en_1, 0x83450534, 0x83450538, 32, 1),
    'sdsr_tr_decomp_0_cor_err_inj_0': (reg_sdsr_tr_decomp_0_cor_err_inj_0, 0x83450538, 0x8345053c, 32, 1),
    'sdsr_tr_decomp_0_cor_err_inj_1': (reg_sdsr_tr_decomp_0_cor_err_inj_1, 0x8345053c, 0x83450540, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_inj_0': (reg_sdsr_tr_decomp_0_uncor_err_inj_0, 0x83450540, 0x83450544, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_inj_1': (reg_sdsr_tr_decomp_0_uncor_err_inj_1, 0x83450544, 0x83450548, 32, 1),
    'sdsr_tr_decomp_0_cor_err_clr_0': (reg_sdsr_tr_decomp_0_cor_err_clr_0, 0x83450548, 0x8345054c, 32, 1),
    'sdsr_tr_decomp_0_cor_err_clr_1': (reg_sdsr_tr_decomp_0_cor_err_clr_1, 0x8345054c, 0x83450550, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_clr_0': (reg_sdsr_tr_decomp_0_uncor_err_clr_0, 0x83450550, 0x83450554, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_clr_1': (reg_sdsr_tr_decomp_0_uncor_err_clr_1, 0x83450554, 0x83450558, 32, 1),
    'sdsr_tr_decomp_0_cor_err_0': (reg_sdsr_tr_decomp_0_cor_err_0, 0x83450558, 0x8345055c, 32, 1),
    'sdsr_tr_decomp_0_cor_err_1': (reg_sdsr_tr_decomp_0_cor_err_1, 0x8345055c, 0x83450560, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_0': (reg_sdsr_tr_decomp_0_uncor_err_0, 0x83450560, 0x83450564, 32, 1),
    'sdsr_tr_decomp_0_uncor_err_1': (reg_sdsr_tr_decomp_0_uncor_err_1, 0x83450564, 0x83450568, 32, 1),
    'sdsr_tr_decomp_1_ecc_en_0': (reg_sdsr_tr_decomp_1_ecc_en_0, 0x83450568, 0x8345056c, 32, 1),
    'sdsr_tr_decomp_1_ecc_en_1': (reg_sdsr_tr_decomp_1_ecc_en_1, 0x8345056c, 0x83450570, 32, 1),
    'sdsr_tr_decomp_1_cor_err_inj_0': (reg_sdsr_tr_decomp_1_cor_err_inj_0, 0x83450570, 0x83450574, 32, 1),
    'sdsr_tr_decomp_1_cor_err_inj_1': (reg_sdsr_tr_decomp_1_cor_err_inj_1, 0x83450574, 0x83450578, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_inj_0': (reg_sdsr_tr_decomp_1_uncor_err_inj_0, 0x83450578, 0x8345057c, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_inj_1': (reg_sdsr_tr_decomp_1_uncor_err_inj_1, 0x8345057c, 0x83450580, 32, 1),
    'sdsr_tr_decomp_1_cor_err_clr_0': (reg_sdsr_tr_decomp_1_cor_err_clr_0, 0x83450580, 0x83450584, 32, 1),
    'sdsr_tr_decomp_1_cor_err_clr_1': (reg_sdsr_tr_decomp_1_cor_err_clr_1, 0x83450584, 0x83450588, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_clr_0': (reg_sdsr_tr_decomp_1_uncor_err_clr_0, 0x83450588, 0x8345058c, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_clr_1': (reg_sdsr_tr_decomp_1_uncor_err_clr_1, 0x8345058c, 0x83450590, 32, 1),
    'sdsr_tr_decomp_1_cor_err_0': (reg_sdsr_tr_decomp_1_cor_err_0, 0x83450590, 0x83450594, 32, 1),
    'sdsr_tr_decomp_1_cor_err_1': (reg_sdsr_tr_decomp_1_cor_err_1, 0x83450594, 0x83450598, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_0': (reg_sdsr_tr_decomp_1_uncor_err_0, 0x83450598, 0x8345059c, 32, 1),
    'sdsr_tr_decomp_1_uncor_err_1': (reg_sdsr_tr_decomp_1_uncor_err_1, 0x8345059c, 0x834505a0, 32, 1),
    'sdsr_tr_decomp_2_ecc_en_0': (reg_sdsr_tr_decomp_2_ecc_en_0, 0x834505a0, 0x834505a4, 32, 1),
    'sdsr_tr_decomp_2_ecc_en_1': (reg_sdsr_tr_decomp_2_ecc_en_1, 0x834505a4, 0x834505a8, 32, 1),
    'sdsr_tr_decomp_2_cor_err_inj_0': (reg_sdsr_tr_decomp_2_cor_err_inj_0, 0x834505a8, 0x834505ac, 32, 1),
    'sdsr_tr_decomp_2_cor_err_inj_1': (reg_sdsr_tr_decomp_2_cor_err_inj_1, 0x834505ac, 0x834505b0, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_inj_0': (reg_sdsr_tr_decomp_2_uncor_err_inj_0, 0x834505b0, 0x834505b4, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_inj_1': (reg_sdsr_tr_decomp_2_uncor_err_inj_1, 0x834505b4, 0x834505b8, 32, 1),
    'sdsr_tr_decomp_2_cor_err_clr_0': (reg_sdsr_tr_decomp_2_cor_err_clr_0, 0x834505b8, 0x834505bc, 32, 1),
    'sdsr_tr_decomp_2_cor_err_clr_1': (reg_sdsr_tr_decomp_2_cor_err_clr_1, 0x834505bc, 0x834505c0, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_clr_0': (reg_sdsr_tr_decomp_2_uncor_err_clr_0, 0x834505c0, 0x834505c4, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_clr_1': (reg_sdsr_tr_decomp_2_uncor_err_clr_1, 0x834505c4, 0x834505c8, 32, 1),
    'sdsr_tr_decomp_2_cor_err_0': (reg_sdsr_tr_decomp_2_cor_err_0, 0x834505c8, 0x834505cc, 32, 1),
    'sdsr_tr_decomp_2_cor_err_1': (reg_sdsr_tr_decomp_2_cor_err_1, 0x834505cc, 0x834505d0, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_0': (reg_sdsr_tr_decomp_2_uncor_err_0, 0x834505d0, 0x834505d4, 32, 1),
    'sdsr_tr_decomp_2_uncor_err_1': (reg_sdsr_tr_decomp_2_uncor_err_1, 0x834505d4, 0x834505d8, 32, 1),
    'sdsr_mem_ecc_en'         : (reg_sdsr_mem_ecc_en       , 0x83450600, 0x83450604, 32, 1),
    'sdsr_mem_cor_err_inj'    : (reg_sdsr_mem_cor_err_inj  , 0x83450604, 0x83450608, 32, 1),
    'sdsr_mem_uncor_err_inj'  : (reg_sdsr_mem_uncor_err_inj, 0x83450608, 0x8345060c, 32, 1),
    'sdsr_mem_cor_err_clr'    : (reg_sdsr_mem_cor_err_clr  , 0x8345060c, 0x83450610, 32, 1),
    'sdsr_mem_uncor_err_clr'  : (reg_sdsr_mem_uncor_err_clr, 0x83450610, 0x83450614, 32, 1),
    'sdsr_mem_cor_err'        : (reg_sdsr_mem_cor_err      , 0x83450614, 0x83450618, 32, 1),
    'sdsr_mem_uncor_err'      : (reg_sdsr_mem_uncor_err    , 0x83450618, 0x8345061c, 32, 1),
    'sds_ip_clock_enable'     : (reg_sds_ip_clock_enable   , 0x8345061c, 0x83450620, 32, 1),
    'scratch_lo'              : (reg_scratch_lo            , 0x83400000, 0x83400004, 32, 1),
    'scratch_hi'              : (reg_scratch_hi            , 0x83400004, 0x83400008, 32, 1),
    'csr_pio_timeout'         : (reg_csr_pio_timeout       , 0x83400010, 0x83400014, 32, 1),
    'chip_control_0'          : (reg_chip_control_0        , 0x83400020, 0x83400024, 32, 1),
    'chip_control_1'          : (reg_chip_control_1        , 0x83400024, 0x83400028, 32, 1),
    'LBA_mask_0'              : (reg_LBA_mask_0            , 0x83400030, 0x83400034, 32, 1),
    'LBA_mask_1'              : (reg_LBA_mask_1            , 0x83400034, 0x83400038, 32, 1),
    'LBA_mask_2'              : (reg_LBA_mask_2            , 0x83400038, 0x8340003c, 32, 1),
    'LBA_mask_3'              : (reg_LBA_mask_3            , 0x8340003c, 0x83400040, 32, 1),
    'LBA_mask_4'              : (reg_LBA_mask_4            , 0x83400040, 0x83400044, 32, 1),
    'LBA_mask_5'              : (reg_LBA_mask_5            , 0x83400044, 0x83400048, 32, 1),
    'err_stat_intr_status'    : (reg_err_stat_intr_status  , 0x83400050, 0x83400054, 32, 1),
    'err_stat_intr_mask'      : (reg_err_stat_intr_mask    , 0x83400054, 0x83400058, 32, 1),
    'err_stat_intr_rc'        : (reg_err_stat_intr_rc      , 0x83400058, 0x8340005c, 32, 1),
    'err_stat_intr_shadow'    : (reg_err_stat_intr_shadow  , 0x8340005c, 0x83400060, 32, 1),
    'ddr0_parity_addr_0'      : (reg_ddr0_parity_addr_0    , 0x83400060, 0x83400064, 32, 1),
    'ddr0_parity_addr_1'      : (reg_ddr0_parity_addr_1    , 0x83400064, 0x83400068, 32, 1),
    'chip_mem_ctrl_0'         : (reg_chip_mem_ctrl_0       , 0x8340006c, 0x83400070, 32, 1),
    'chip_mem_err_inj_en'     : (reg_chip_mem_err_inj_en   , 0x83400070, 0x83400074, 32, 1),
    'chip_mem_err_inj_sel'    : (reg_chip_mem_err_inj_sel  , 0x83400074, 0x83400078, 32, 1),
    'chip_mem_err_inj_stat_0' : (reg_chip_mem_err_inj_stat_0, 0x83400078, 0x8340007c, 32, 1),
    'ddr1_parity_addr_0'      : (reg_ddr1_parity_addr_0    , 0x83400080, 0x83400084, 32, 1),
    'ddr1_parity_addr_1'      : (reg_ddr1_parity_addr_1    , 0x83400084, 0x83400088, 32, 1),
    'pcie_pio_indir_addr'     : (reg_pcie_pio_indir_addr   , 0x83504000, 0x83504004, 32, 1),
    'pcie_pio_indir_wr'       : (reg_pcie_pio_indir_wr     , 0x83504004, 0x83504008, 32, 1),
    'pcie_pio_indir_rd'       : (reg_pcie_pio_indir_rd     , 0x83504008, 0x8350400c, 32, 1),
    'pcie_pio_indir_status'   : (reg_pcie_pio_indir_status , 0x8350400c, 0x83504010, 32, 1),
    'pcie_pio_indir_addr_hi'  : (reg_pcie_pio_indir_addr_hi, 0x83504010, 0x83504014, 32, 1),
    'pcie_axinic_offset_lo'   : (reg_pcie_axinic_offset_lo , 0x83504014, 0x83504018, 32, 1),
    'pcie_axinic_offset_hi'   : (reg_pcie_axinic_offset_hi , 0x83504018, 0x8350401c, 32, 1),
    'pcie_mailbox'            : (reg_pcie_mailbox          , 0x83505000, 0x83505080, 32, 32),
    'inst0_tl_cfg_1'          : (reg_inst0_tl_cfg_1        , 0x83506000, 0x83506004, 32, 1),
    'inst1_tl_cfg_1'          : (reg_inst1_tl_cfg_1        , 0x83506004, 0x83506008, 32, 1),
    'lane_mux'                : (reg_lane_mux              , 0x83506008, 0x8350600c, 32, 1),
    'pcie_bw_cfg'             : (reg_pcie_bw_cfg           , 0x8350600c, 0x83506010, 32, 1),
    'pcie_pipe_cfg'           : (reg_pcie_pipe_cfg         , 0x83506010, 0x83506014, 32, 1),
    'scratch_lo'              : (reg_scratch_lo            , 0x83508010, 0x83508014, 32, 1),
    'scratch_hi'              : (reg_scratch_hi            , 0x83508014, 0x83508018, 32, 1),
    'pcie_port0_link_status'  : (reg_pcie_port0_link_status, 0x83508018, 0x8350801c, 32, 1),
    'pcie_port1_link_status'  : (reg_pcie_port1_link_status, 0x8350801c, 0x83508020, 32, 1),
    'pcie_port0_status'       : (reg_pcie_port0_status     , 0x83508028, 0x8350802c, 32, 1),
    'pcie_port1_status'       : (reg_pcie_port1_status     , 0x8350802c, 0x83508030, 32, 1),
    'pcie_err_ctrl'           : (reg_pcie_err_ctrl         , 0x83509000, 0x83509004, 32, 1),
    'pcie_tx_pll_ready_out_cnt_0': (reg_pcie_tx_pll_ready_out_cnt_0, 0x8350901c, 0x83509020, 32, 1),
    'pcie_tx_pll_ready_out_cnt_1': (reg_pcie_tx_pll_ready_out_cnt_1, 0x83509020, 0x83509024, 32, 1),
    'pcie_rx_pll_ready_out_cnt_0': (reg_pcie_rx_pll_ready_out_cnt_0, 0x83509024, 0x83509028, 32, 1),
    'pcie_rx_pll_ready_out_cnt_1': (reg_pcie_rx_pll_ready_out_cnt_1, 0x83509028, 0x8350902c, 32, 1),
    'pss_debug_select'        : (reg_pss_debug_select      , 0x8350ff00, 0x8350ff04, 32, 1),
    'pss_debug_monitor'       : (reg_pss_debug_monitor     , 0x8350ff04, 0x8350ff08, 32, 1),
    'pss_intr_status'         : (reg_pss_intr_status       , 0x8350ffa0, 0x8350ffa4, 32, 1),
    'pss_intr_mask'           : (reg_pss_intr_mask         , 0x8350ffa4, 0x8350ffa8, 32, 1),
    'pss_intr_rc'             : (reg_pss_intr_rc           , 0x8350ffa8, 0x8350ffac, 32, 1),
    'pss_intr_shadow'         : (reg_pss_intr_shadow       , 0x8350ffac, 0x8350ffb0, 32, 1),
    'fis_error_status'        : (reg_fis_error_status      , 0x8350ffd0, 0x8350ffd4, 32, 1),
    'fis_error_mask'          : (reg_fis_error_mask        , 0x8350ffd4, 0x8350ffd8, 32, 1),
    'fis_error_rc'            : (reg_fis_error_rc          , 0x8350ffd8, 0x8350ffdc, 32, 1),
    'fis_error_shadow'        : (reg_fis_error_shadow      , 0x8350ffdc, 0x8350ffe0, 32, 1),
    'inst0_pf_hook_vf'        : (reg_inst0_pf_hook_vf      , 0x83520000, 0x83520100, 32, 64),
    'bridge_ctrl_0'           : (reg_bridge_ctrl_0         , 0x83520100, 0x83520104, 32, 1),
    'inst0_test_in_bridge'    : (reg_inst0_test_in_bridge  , 0x83520104, 0x83520108, 32, 1),
    'inst1_test_in_bridge'    : (reg_inst1_test_in_bridge  , 0x83520108, 0x8352010c, 32, 1),
    'inst0_k_gen_0'           : (reg_inst0_k_gen_0         , 0x83520110, 0x83520114, 32, 1),
    'inst0_k_gen_1'           : (reg_inst0_k_gen_1         , 0x83520114, 0x83520118, 32, 1),
    'inst0_k_gen_2'           : (reg_inst0_k_gen_2         , 0x83520118, 0x8352011c, 32, 1),
    'inst1_k_gen_0'           : (reg_inst1_k_gen_0         , 0x83520120, 0x83520124, 32, 1),
    'inst1_k_gen_1'           : (reg_inst1_k_gen_1         , 0x83520124, 0x83520128, 32, 1),
    'inst1_k_gen_2'           : (reg_inst1_k_gen_2         , 0x83520128, 0x8352012c, 32, 1),
    'fsm_state_6'             : (reg_fsm_state_6           , 0x83521018, 0x8352101c, 32, 1),
    'fsm_state_7'             : (reg_fsm_state_7           , 0x8352101c, 0x83521020, 32, 1),
    'nvme_intr_cnt'           : (reg_nvme_intr_cnt         , 0x8352111c, 0x83521120, 32, 1),
    'pss_ctrl0'               : (reg_pss_ctrl0             , 0x83522000, 0x83522004, 32, 1),
    'pss_ctrl1'               : (reg_pss_ctrl1             , 0x83522004, 0x83522008, 32, 1),
    'pss_ctrl2'               : (reg_pss_ctrl2             , 0x83522008, 0x8352200c, 32, 1),
    'pss_ctrl3'               : (reg_pss_ctrl3             , 0x8352200c, 0x83522010, 32, 1),
    'pss_ctrl4'               : (reg_pss_ctrl4             , 0x83522010, 0x83522014, 32, 1),
    'pss_ctrl5'               : (reg_pss_ctrl5             , 0x83522014, 0x83522018, 32, 1),
    'pss_ctrl6'               : (reg_pss_ctrl6             , 0x83522018, 0x8352201c, 32, 1),
    'pss_sbus_mst0'           : (reg_pss_sbus_mst0         , 0x83522050, 0x83522054, 32, 1),
    'pss_sbus_mst1'           : (reg_pss_sbus_mst1         , 0x83522054, 0x83522058, 32, 1),
    'pss_sbus_mst2'           : (reg_pss_sbus_mst2         , 0x83522058, 0x8352205c, 32, 1),
    'pss_status0'             : (reg_pss_status0           , 0x83522100, 0x83522104, 32, 1),
    'fis_ctrl'                : (reg_fis_ctrl              , 0x83530000, 0x83530004, 32, 1),
    'fis_rst_ctrl'            : (reg_fis_rst_ctrl          , 0x83530008, 0x8353000c, 32, 1),
    'fis_rst_status'          : (reg_fis_rst_status        , 0x83530010, 0x83530014, 32, 1),
    'fis_rst_cnt_sticky'      : (reg_fis_rst_cnt_sticky    , 0x83530014, 0x83530018, 32, 1),
    'fis_pss_rst_cnt'         : (reg_fis_pss_rst_cnt       , 0x83530018, 0x8353001c, 32, 1),
    'fis_pss_rst_cnt_1'       : (reg_fis_pss_rst_cnt_1     , 0x8353001c, 0x83530020, 32, 1),
    'fis_clk_ctrl'            : (reg_fis_clk_ctrl          , 0x83530030, 0x83530034, 32, 1),
    'fis_clk_status'          : (reg_fis_clk_status        , 0x83530034, 0x83530038, 32, 1),
    'pcie_inst0_pf_0_flr_req' : (reg_pcie_inst0_pf_0_flr_req, 0x83530040, 0x83530044, 32, 1),
    'pcie_inst0_pf_1_flr_req' : (reg_pcie_inst0_pf_1_flr_req, 0x83530044, 0x83530048, 32, 1),
    'pcie_inst0_vf_flr_req'   : (reg_pcie_inst0_vf_flr_req , 0x83530048, 0x8353004c, 32, 1),
    'pcie_inst1_pf_flr_req'   : (reg_pcie_inst1_pf_flr_req , 0x8353004c, 0x83530050, 32, 1),
    'pcie_inst1_vf_flr_req'   : (reg_pcie_inst1_vf_flr_req , 0x83530050, 0x83530054, 32, 1),
    'pcie_inst0_pf_0_flr_ack' : (reg_pcie_inst0_pf_0_flr_ack, 0x83530054, 0x83530058, 32, 1),
    'pcie_inst0_pf_1_flr_ack' : (reg_pcie_inst0_pf_1_flr_ack, 0x83530058, 0x8353005c, 32, 1),
    'pcie_inst0_vf_flr_ack'   : (reg_pcie_inst0_vf_flr_ack , 0x83530060, 0x83530064, 32, 1),
    'pcie_inst1_pf_flr_ack'   : (reg_pcie_inst1_pf_flr_ack , 0x83530064, 0x83530068, 32, 1),
    'pcie_inst1_vf_flr_ack'   : (reg_pcie_inst1_vf_flr_ack , 0x83530068, 0x8353006c, 32, 1),
    'pss_spare_config_bus0'   : (reg_pss_spare_config_bus0 , 0x83530070, 0x83530074, 32, 1),
    'pss_spare_config_bus1'   : (reg_pss_spare_config_bus1 , 0x83530074, 0x83530078, 32, 1),
    'pss_spare_config_bus2'   : (reg_pss_spare_config_bus2 , 0x83530078, 0x8353007c, 32, 1),
    'pss_spare_config_bus3'   : (reg_pss_spare_config_bus3 , 0x8353007c, 0x83530080, 32, 1),
    'pss_spare_config_bus4'   : (reg_pss_spare_config_bus4 , 0x83530080, 0x83530084, 32, 1),
    'pss_spare_config_bus5'   : (reg_pss_spare_config_bus5 , 0x83530084, 0x83530088, 32, 1),
    'pss_spare_config_bus6'   : (reg_pss_spare_config_bus6 , 0x83530088, 0x8353008c, 32, 1),
    'inst0_pcie_test_in'      : (reg_inst0_pcie_test_in    , 0x835300a0, 0x835300a4, 32, 1),
    'inst1_pcie_test_in'      : (reg_inst1_pcie_test_in    , 0x835300a4, 0x835300a8, 32, 1),
    'inst0_pcie_test_in_errinj': (reg_inst0_pcie_test_in_errinj, 0x835300a8, 0x835300ac, 32, 1),
    'inst1_pcie_test_in_errinj': (reg_inst1_pcie_test_in_errinj, 0x835300ac, 0x835300b0, 32, 1),
    'inst0_tl_cfg'            : (reg_inst0_tl_cfg          , 0x835300b0, 0x835300b4, 32, 1),
    'inst1_tl_cfg'            : (reg_inst1_tl_cfg          , 0x835300b4, 0x835300b8, 32, 1),
    'fis_pipe_mode'           : (reg_fis_pipe_mode         , 0x835300b8, 0x835300bc, 32, 1),
    'inst0_l1ss_state'        : (reg_inst0_l1ss_state      , 0x835300c0, 0x835300c4, 32, 1),
    'inst1_l1ss_state'        : (reg_inst1_l1ss_state      , 0x835300c4, 0x835300c8, 32, 1),
    'inst0_axi4_slvl_func'    : (reg_inst0_axi4_slvl_func  , 0x83530124, 0x83530128, 32, 1),
    'inst0_func_map'          : (reg_inst0_func_map        , 0x83530200, 0x83530280, 32, 32),
    'inst1_axi4_slvl_func'    : (reg_inst1_axi4_slvl_func  , 0x83530500, 0x83530504, 32, 1),
    'all_pll_txready_rfc_d_out_0': (reg_all_pll_txready_rfc_d_out_0, 0x83532000, 0x83532004, 32, 1),
    'all_phy_config_done_pl_out_0': (reg_all_phy_config_done_pl_out_0, 0x83532004, 0x83532008, 32, 1),
    'all_pll_txready_rfc_d_out_1': (reg_all_pll_txready_rfc_d_out_1, 0x83532100, 0x83532104, 32, 1),
    'all_phy_config_done_pl_out_1': (reg_all_phy_config_done_pl_out_1, 0x83532104, 0x83532108, 32, 1),
    'all_pll_txready_s5c_re_out_0': (reg_all_pll_txready_s5c_re_out_0, 0x83532300, 0x83532304, 32, 1),
    'any_pll_txready_s5c_fe_out_0': (reg_any_pll_txready_s5c_fe_out_0, 0x83532304, 0x83532308, 32, 1),
    'all_pll_txready_s5c_re_out_1': (reg_all_pll_txready_s5c_re_out_1, 0x83532400, 0x83532404, 32, 1),
    'any_pll_txready_s5c_fe_out_1': (reg_any_pll_txready_s5c_fe_out_1, 0x83532404, 0x83532408, 32, 1),
    'fis_phy_ctrl_misc'       : (reg_fis_phy_ctrl_misc     , 0x835340d0, 0x835340d4, 32, 1),
    'phy_intr_status'         : (reg_phy_intr_status       , 0x835340e0, 0x835340e4, 32, 1),
    'phy_intr_mask'           : (reg_phy_intr_mask         , 0x835340e4, 0x835340e8, 32, 1),
    'phy_intr_rc'             : (reg_phy_intr_rc           , 0x835340e8, 0x835340ec, 32, 1),
    'phy_intr_shadow'         : (reg_phy_intr_shadow       , 0x835340ec, 0x835340f0, 32, 1),
    'p0l0_serdes_cfg_0'       : (reg_p0l0_serdes_cfg_0     , 0x83540000, 0x83540004, 32, 1),
    'p0l0_serdes_cfg_1'       : (reg_p0l0_serdes_cfg_1     , 0x83540004, 0x83540008, 32, 1),
    'p0l0_serdes_cfg_2'       : (reg_p0l0_serdes_cfg_2     , 0x83540008, 0x8354000c, 32, 1),
    'p0l0_serdes_cfg_3'       : (reg_p0l0_serdes_cfg_3     , 0x8354000c, 0x83540010, 32, 1),
    'p0l0_serdes_cfg_4'       : (reg_p0l0_serdes_cfg_4     , 0x83540010, 0x83540014, 32, 1),
    'p0l0_serdes_cfg_5'       : (reg_p0l0_serdes_cfg_5     , 0x83540014, 0x83540018, 32, 1),
    'p0l0_serdes_cfg_6'       : (reg_p0l0_serdes_cfg_6     , 0x83540018, 0x8354001c, 32, 1),
    'p0l0_serdes_cfg_7'       : (reg_p0l0_serdes_cfg_7     , 0x8354001c, 0x83540020, 32, 1),
    'p0l0_serdes_cfg_8'       : (reg_p0l0_serdes_cfg_8     , 0x83540020, 0x83540024, 32, 1),
    'p0l0_ctrl_0'             : (reg_p0l0_ctrl_0           , 0x83540024, 0x83540028, 32, 1),
    'p0l0_ctrl_1'             : (reg_p0l0_ctrl_1           , 0x83540028, 0x8354002c, 32, 1),
    'p0l0_ctrl_2'             : (reg_p0l0_ctrl_2           , 0x8354002c, 0x83540030, 32, 1),
    'p0l0_ctrl_3'             : (reg_p0l0_ctrl_3           , 0x83540030, 0x83540034, 32, 1),
    'p0l0_ctrl_4'             : (reg_p0l0_ctrl_4           , 0x83540034, 0x83540038, 32, 1),
    'p0l0_ctrl_5'             : (reg_p0l0_ctrl_5           , 0x83540038, 0x8354003c, 32, 1),
    'p0l0_ctrl_6'             : (reg_p0l0_ctrl_6           , 0x8354003c, 0x83540040, 32, 1),
    'p0l0_ctrl_7'             : (reg_p0l0_ctrl_7           , 0x83540040, 0x83540044, 32, 1),
    'p0l0_ctrl_8'             : (reg_p0l0_ctrl_8           , 0x83540044, 0x83540048, 32, 1),
    'p0l0_ctrl_9'             : (reg_p0l0_ctrl_9           , 0x83540048, 0x8354004c, 32, 1),
    'p0l0_ctrl_10'            : (reg_p0l0_ctrl_10          , 0x8354004c, 0x83540050, 32, 1),
    'p0l0_ctrl_11'            : (reg_p0l0_ctrl_11          , 0x83540050, 0x83540054, 32, 1),
    'p0l0_ctrl_12'            : (reg_p0l0_ctrl_12          , 0x83540054, 0x83540058, 32, 1),
    'p0l0_ctrl_13'            : (reg_p0l0_ctrl_13          , 0x83540058, 0x8354005c, 32, 1),
    'p0l0_ctrl_14'            : (reg_p0l0_ctrl_14          , 0x8354005c, 0x83540060, 32, 1),
    'p0l0_ctrl_15'            : (reg_p0l0_ctrl_15          , 0x83540060, 0x83540064, 32, 1),
    'p0l0_ctrl_16'            : (reg_p0l0_ctrl_16          , 0x83540064, 0x83540068, 32, 1),
    'p0l0_ctrl_17'            : (reg_p0l0_ctrl_17          , 0x83540068, 0x8354006c, 32, 1),
    'p0l0_ctrl_18'            : (reg_p0l0_ctrl_18          , 0x8354006c, 0x83540070, 32, 1),
    'p0l0_ctrl_19'            : (reg_p0l0_ctrl_19          , 0x83540070, 0x83540074, 32, 1),
    'p0l0_status_0'           : (reg_p0l0_status_0         , 0x83540074, 0x83540078, 32, 1),
    'p0l0_status_1'           : (reg_p0l0_status_1         , 0x83540078, 0x8354007c, 32, 1),
    'p0l0_status_2'           : (reg_p0l0_status_2         , 0x8354007c, 0x83540080, 32, 1),
    'p0l0_status_3'           : (reg_p0l0_status_3         , 0x83540080, 0x83540084, 32, 1),
    'p0l0_status_4'           : (reg_p0l0_status_4         , 0x83540084, 0x83540088, 32, 1),
    'p0l0_debug_sel'          : (reg_p0l0_debug_sel        , 0x83540088, 0x8354008c, 32, 1),
    'p0l0_debug_out'          : (reg_p0l0_debug_out        , 0x8354008c, 0x83540090, 32, 1),
    'p0l1_serdes_cfg_0'       : (reg_p0l1_serdes_cfg_0     , 0x83541000, 0x83541004, 32, 1),
    'p0l1_serdes_cfg_1'       : (reg_p0l1_serdes_cfg_1     , 0x83541004, 0x83541008, 32, 1),
    'p0l1_serdes_cfg_2'       : (reg_p0l1_serdes_cfg_2     , 0x83541008, 0x8354100c, 32, 1),
    'p0l1_serdes_cfg_3'       : (reg_p0l1_serdes_cfg_3     , 0x8354100c, 0x83541010, 32, 1),
    'p0l1_serdes_cfg_4'       : (reg_p0l1_serdes_cfg_4     , 0x83541010, 0x83541014, 32, 1),
    'p0l1_serdes_cfg_5'       : (reg_p0l1_serdes_cfg_5     , 0x83541014, 0x83541018, 32, 1),
    'p0l1_serdes_cfg_6'       : (reg_p0l1_serdes_cfg_6     , 0x83541018, 0x8354101c, 32, 1),
    'p0l1_serdes_cfg_7'       : (reg_p0l1_serdes_cfg_7     , 0x8354101c, 0x83541020, 32, 1),
    'p0l1_serdes_cfg_8'       : (reg_p0l1_serdes_cfg_8     , 0x83541020, 0x83541024, 32, 1),
    'p0l1_ctrl_0'             : (reg_p0l1_ctrl_0           , 0x83541024, 0x83541028, 32, 1),
    'p0l1_ctrl_1'             : (reg_p0l1_ctrl_1           , 0x83541028, 0x8354102c, 32, 1),
    'p0l1_ctrl_2'             : (reg_p0l1_ctrl_2           , 0x8354102c, 0x83541030, 32, 1),
    'p0l1_ctrl_3'             : (reg_p0l1_ctrl_3           , 0x83541030, 0x83541034, 32, 1),
    'p0l1_ctrl_4'             : (reg_p0l1_ctrl_4           , 0x83541034, 0x83541038, 32, 1),
    'p0l1_ctrl_5'             : (reg_p0l1_ctrl_5           , 0x83541038, 0x8354103c, 32, 1),
    'p0l1_ctrl_6'             : (reg_p0l1_ctrl_6           , 0x8354103c, 0x83541040, 32, 1),
    'p0l1_ctrl_7'             : (reg_p0l1_ctrl_7           , 0x83541040, 0x83541044, 32, 1),
    'p0l1_ctrl_8'             : (reg_p0l1_ctrl_8           , 0x83541044, 0x83541048, 32, 1),
    'p0l1_ctrl_9'             : (reg_p0l1_ctrl_9           , 0x83541048, 0x8354104c, 32, 1),
    'p0l1_ctrl_10'            : (reg_p0l1_ctrl_10          , 0x8354104c, 0x83541050, 32, 1),
    'p0l1_ctrl_11'            : (reg_p0l1_ctrl_11          , 0x83541050, 0x83541054, 32, 1),
    'p0l1_ctrl_12'            : (reg_p0l1_ctrl_12          , 0x83541054, 0x83541058, 32, 1),
    'p0l1_ctrl_13'            : (reg_p0l1_ctrl_13          , 0x83541058, 0x8354105c, 32, 1),
    'p0l1_ctrl_14'            : (reg_p0l1_ctrl_14          , 0x8354105c, 0x83541060, 32, 1),
    'p0l1_ctrl_15'            : (reg_p0l1_ctrl_15          , 0x83541060, 0x83541064, 32, 1),
    'p0l1_ctrl_16'            : (reg_p0l1_ctrl_16          , 0x83541064, 0x83541068, 32, 1),
    'p0l1_ctrl_17'            : (reg_p0l1_ctrl_17          , 0x83541068, 0x8354106c, 32, 1),
    'p0l1_ctrl_18'            : (reg_p0l1_ctrl_18          , 0x8354106c, 0x83541070, 32, 1),
    'p0l1_ctrl_19'            : (reg_p0l1_ctrl_19          , 0x83541070, 0x83541074, 32, 1),
    'p0l1_status_0'           : (reg_p0l1_status_0         , 0x83541074, 0x83541078, 32, 1),
    'p0l1_status_1'           : (reg_p0l1_status_1         , 0x83541078, 0x8354107c, 32, 1),
    'p0l1_status_2'           : (reg_p0l1_status_2         , 0x8354107c, 0x83541080, 32, 1),
    'p0l1_status_3'           : (reg_p0l1_status_3         , 0x83541080, 0x83541084, 32, 1),
    'p0l1_status_4'           : (reg_p0l1_status_4         , 0x83541084, 0x83541088, 32, 1),
    'p0l1_debug_sel'          : (reg_p0l1_debug_sel        , 0x83541088, 0x8354108c, 32, 1),
    'p0l1_debug_out'          : (reg_p0l1_debug_out        , 0x8354108c, 0x83541090, 32, 1),
    'p0l2_serdes_cfg_0'       : (reg_p0l2_serdes_cfg_0     , 0x83542000, 0x83542004, 32, 1),
    'p0l2_serdes_cfg_1'       : (reg_p0l2_serdes_cfg_1     , 0x83542004, 0x83542008, 32, 1),
    'p0l2_serdes_cfg_2'       : (reg_p0l2_serdes_cfg_2     , 0x83542008, 0x8354200c, 32, 1),
    'p0l2_serdes_cfg_3'       : (reg_p0l2_serdes_cfg_3     , 0x8354200c, 0x83542010, 32, 1),
    'p0l2_serdes_cfg_4'       : (reg_p0l2_serdes_cfg_4     , 0x83542010, 0x83542014, 32, 1),
    'p0l2_serdes_cfg_5'       : (reg_p0l2_serdes_cfg_5     , 0x83542014, 0x83542018, 32, 1),
    'p0l2_serdes_cfg_6'       : (reg_p0l2_serdes_cfg_6     , 0x83542018, 0x8354201c, 32, 1),
    'p0l2_serdes_cfg_7'       : (reg_p0l2_serdes_cfg_7     , 0x8354201c, 0x83542020, 32, 1),
    'p0l2_serdes_cfg_8'       : (reg_p0l2_serdes_cfg_8     , 0x83542020, 0x83542024, 32, 1),
    'p0l2_ctrl_0'             : (reg_p0l2_ctrl_0           , 0x83542024, 0x83542028, 32, 1),
    'p0l2_ctrl_1'             : (reg_p0l2_ctrl_1           , 0x83542028, 0x8354202c, 32, 1),
    'p0l2_ctrl_2'             : (reg_p0l2_ctrl_2           , 0x8354202c, 0x83542030, 32, 1),
    'p0l2_ctrl_3'             : (reg_p0l2_ctrl_3           , 0x83542030, 0x83542034, 32, 1),
    'p0l2_ctrl_4'             : (reg_p0l2_ctrl_4           , 0x83542034, 0x83542038, 32, 1),
    'p0l2_ctrl_5'             : (reg_p0l2_ctrl_5           , 0x83542038, 0x8354203c, 32, 1),
    'p0l2_ctrl_6'             : (reg_p0l2_ctrl_6           , 0x8354203c, 0x83542040, 32, 1),
    'p0l2_ctrl_7'             : (reg_p0l2_ctrl_7           , 0x83542040, 0x83542044, 32, 1),
    'p0l2_ctrl_8'             : (reg_p0l2_ctrl_8           , 0x83542044, 0x83542048, 32, 1),
    'p0l2_ctrl_9'             : (reg_p0l2_ctrl_9           , 0x83542048, 0x8354204c, 32, 1),
    'p0l2_ctrl_10'            : (reg_p0l2_ctrl_10          , 0x8354204c, 0x83542050, 32, 1),
    'p0l2_ctrl_11'            : (reg_p0l2_ctrl_11          , 0x83542050, 0x83542054, 32, 1),
    'p0l2_ctrl_12'            : (reg_p0l2_ctrl_12          , 0x83542054, 0x83542058, 32, 1),
    'p0l2_ctrl_13'            : (reg_p0l2_ctrl_13          , 0x83542058, 0x8354205c, 32, 1),
    'p0l2_ctrl_14'            : (reg_p0l2_ctrl_14          , 0x8354205c, 0x83542060, 32, 1),
    'p0l2_ctrl_15'            : (reg_p0l2_ctrl_15          , 0x83542060, 0x83542064, 32, 1),
    'p0l2_ctrl_16'            : (reg_p0l2_ctrl_16          , 0x83542064, 0x83542068, 32, 1),
    'p0l2_ctrl_17'            : (reg_p0l2_ctrl_17          , 0x83542068, 0x8354206c, 32, 1),
    'p0l2_ctrl_18'            : (reg_p0l2_ctrl_18          , 0x8354206c, 0x83542070, 32, 1),
    'p0l2_ctrl_19'            : (reg_p0l2_ctrl_19          , 0x83542070, 0x83542074, 32, 1),
    'p0l2_status_0'           : (reg_p0l2_status_0         , 0x83542074, 0x83542078, 32, 1),
    'p0l2_status_1'           : (reg_p0l2_status_1         , 0x83542078, 0x8354207c, 32, 1),
    'p0l2_status_2'           : (reg_p0l2_status_2         , 0x8354207c, 0x83542080, 32, 1),
    'p0l2_status_3'           : (reg_p0l2_status_3         , 0x83542080, 0x83542084, 32, 1),
    'p0l2_status_4'           : (reg_p0l2_status_4         , 0x83542084, 0x83542088, 32, 1),
    'p0l2_debug_sel'          : (reg_p0l2_debug_sel        , 0x83542088, 0x8354208c, 32, 1),
    'p0l2_debug_out'          : (reg_p0l2_debug_out        , 0x8354208c, 0x83542090, 32, 1),
    'p0l3_serdes_cfg_0'       : (reg_p0l3_serdes_cfg_0     , 0x83543000, 0x83543004, 32, 1),
    'p0l3_serdes_cfg_1'       : (reg_p0l3_serdes_cfg_1     , 0x83543004, 0x83543008, 32, 1),
    'p0l3_serdes_cfg_2'       : (reg_p0l3_serdes_cfg_2     , 0x83543008, 0x8354300c, 32, 1),
    'p0l3_serdes_cfg_3'       : (reg_p0l3_serdes_cfg_3     , 0x8354300c, 0x83543010, 32, 1),
    'p0l3_serdes_cfg_4'       : (reg_p0l3_serdes_cfg_4     , 0x83543010, 0x83543014, 32, 1),
    'p0l3_serdes_cfg_5'       : (reg_p0l3_serdes_cfg_5     , 0x83543014, 0x83543018, 32, 1),
    'p0l3_serdes_cfg_6'       : (reg_p0l3_serdes_cfg_6     , 0x83543018, 0x8354301c, 32, 1),
    'p0l3_serdes_cfg_7'       : (reg_p0l3_serdes_cfg_7     , 0x8354301c, 0x83543020, 32, 1),
    'p0l3_serdes_cfg_8'       : (reg_p0l3_serdes_cfg_8     , 0x83543020, 0x83543024, 32, 1),
    'p0l3_ctrl_0'             : (reg_p0l3_ctrl_0           , 0x83543024, 0x83543028, 32, 1),
    'p0l3_ctrl_1'             : (reg_p0l3_ctrl_1           , 0x83543028, 0x8354302c, 32, 1),
    'p0l3_ctrl_2'             : (reg_p0l3_ctrl_2           , 0x8354302c, 0x83543030, 32, 1),
    'p0l3_ctrl_3'             : (reg_p0l3_ctrl_3           , 0x83543030, 0x83543034, 32, 1),
    'p0l3_ctrl_4'             : (reg_p0l3_ctrl_4           , 0x83543034, 0x83543038, 32, 1),
    'p0l3_ctrl_5'             : (reg_p0l3_ctrl_5           , 0x83543038, 0x8354303c, 32, 1),
    'p0l3_ctrl_6'             : (reg_p0l3_ctrl_6           , 0x8354303c, 0x83543040, 32, 1),
    'p0l3_ctrl_7'             : (reg_p0l3_ctrl_7           , 0x83543040, 0x83543044, 32, 1),
    'p0l3_ctrl_8'             : (reg_p0l3_ctrl_8           , 0x83543044, 0x83543048, 32, 1),
    'p0l3_ctrl_9'             : (reg_p0l3_ctrl_9           , 0x83543048, 0x8354304c, 32, 1),
    'p0l3_ctrl_10'            : (reg_p0l3_ctrl_10          , 0x8354304c, 0x83543050, 32, 1),
    'p0l3_ctrl_11'            : (reg_p0l3_ctrl_11          , 0x83543050, 0x83543054, 32, 1),
    'p0l3_ctrl_12'            : (reg_p0l3_ctrl_12          , 0x83543054, 0x83543058, 32, 1),
    'p0l3_ctrl_13'            : (reg_p0l3_ctrl_13          , 0x83543058, 0x8354305c, 32, 1),
    'p0l3_ctrl_14'            : (reg_p0l3_ctrl_14          , 0x8354305c, 0x83543060, 32, 1),
    'p0l3_ctrl_15'            : (reg_p0l3_ctrl_15          , 0x83543060, 0x83543064, 32, 1),
    'p0l3_ctrl_16'            : (reg_p0l3_ctrl_16          , 0x83543064, 0x83543068, 32, 1),
    'p0l3_ctrl_17'            : (reg_p0l3_ctrl_17          , 0x83543068, 0x8354306c, 32, 1),
    'p0l3_ctrl_18'            : (reg_p0l3_ctrl_18          , 0x8354306c, 0x83543070, 32, 1),
    'p0l3_ctrl_19'            : (reg_p0l3_ctrl_19          , 0x83543070, 0x83543074, 32, 1),
    'p0l3_status_0'           : (reg_p0l3_status_0         , 0x83543074, 0x83543078, 32, 1),
    'p0l3_status_1'           : (reg_p0l3_status_1         , 0x83543078, 0x8354307c, 32, 1),
    'p0l3_status_2'           : (reg_p0l3_status_2         , 0x8354307c, 0x83543080, 32, 1),
    'p0l3_status_3'           : (reg_p0l3_status_3         , 0x83543080, 0x83543084, 32, 1),
    'p0l3_status_4'           : (reg_p0l3_status_4         , 0x83543084, 0x83543088, 32, 1),
    'p0l3_debug_sel'          : (reg_p0l3_debug_sel        , 0x83543088, 0x8354308c, 32, 1),
    'p0l3_debug_out'          : (reg_p0l3_debug_out        , 0x8354308c, 0x83543090, 32, 1),
    'p1l0_serdes_cfg_0'       : (reg_p1l0_serdes_cfg_0     , 0x83544000, 0x83544004, 32, 1),
    'p1l0_serdes_cfg_1'       : (reg_p1l0_serdes_cfg_1     , 0x83544004, 0x83544008, 32, 1),
    'p1l0_serdes_cfg_2'       : (reg_p1l0_serdes_cfg_2     , 0x83544008, 0x8354400c, 32, 1),
    'p1l0_serdes_cfg_3'       : (reg_p1l0_serdes_cfg_3     , 0x8354400c, 0x83544010, 32, 1),
    'p1l0_serdes_cfg_4'       : (reg_p1l0_serdes_cfg_4     , 0x83544010, 0x83544014, 32, 1),
    'p1l0_serdes_cfg_5'       : (reg_p1l0_serdes_cfg_5     , 0x83544014, 0x83544018, 32, 1),
    'p1l0_serdes_cfg_6'       : (reg_p1l0_serdes_cfg_6     , 0x83544018, 0x8354401c, 32, 1),
    'p1l0_serdes_cfg_7'       : (reg_p1l0_serdes_cfg_7     , 0x8354401c, 0x83544020, 32, 1),
    'p1l0_serdes_cfg_8'       : (reg_p1l0_serdes_cfg_8     , 0x83544020, 0x83544024, 32, 1),
    'p1l0_ctrl_0'             : (reg_p1l0_ctrl_0           , 0x83544024, 0x83544028, 32, 1),
    'p1l0_ctrl_1'             : (reg_p1l0_ctrl_1           , 0x83544028, 0x8354402c, 32, 1),
    'p1l0_ctrl_2'             : (reg_p1l0_ctrl_2           , 0x8354402c, 0x83544030, 32, 1),
    'p1l0_ctrl_3'             : (reg_p1l0_ctrl_3           , 0x83544030, 0x83544034, 32, 1),
    'p1l0_ctrl_4'             : (reg_p1l0_ctrl_4           , 0x83544034, 0x83544038, 32, 1),
    'p1l0_ctrl_5'             : (reg_p1l0_ctrl_5           , 0x83544038, 0x8354403c, 32, 1),
    'p1l0_ctrl_6'             : (reg_p1l0_ctrl_6           , 0x8354403c, 0x83544040, 32, 1),
    'p1l0_ctrl_7'             : (reg_p1l0_ctrl_7           , 0x83544040, 0x83544044, 32, 1),
    'p1l0_ctrl_8'             : (reg_p1l0_ctrl_8           , 0x83544044, 0x83544048, 32, 1),
    'p1l0_ctrl_9'             : (reg_p1l0_ctrl_9           , 0x83544048, 0x8354404c, 32, 1),
    'p1l0_ctrl_10'            : (reg_p1l0_ctrl_10          , 0x8354404c, 0x83544050, 32, 1),
    'p1l0_ctrl_11'            : (reg_p1l0_ctrl_11          , 0x83544050, 0x83544054, 32, 1),
    'p1l0_ctrl_12'            : (reg_p1l0_ctrl_12          , 0x83544054, 0x83544058, 32, 1),
    'p1l0_ctrl_13'            : (reg_p1l0_ctrl_13          , 0x83544058, 0x8354405c, 32, 1),
    'p1l0_ctrl_14'            : (reg_p1l0_ctrl_14          , 0x8354405c, 0x83544060, 32, 1),
    'p1l0_ctrl_15'            : (reg_p1l0_ctrl_15          , 0x83544060, 0x83544064, 32, 1),
    'p1l0_ctrl_16'            : (reg_p1l0_ctrl_16          , 0x83544064, 0x83544068, 32, 1),
    'p1l0_ctrl_17'            : (reg_p1l0_ctrl_17          , 0x83544068, 0x8354406c, 32, 1),
    'p1l0_ctrl_18'            : (reg_p1l0_ctrl_18          , 0x8354406c, 0x83544070, 32, 1),
    'p1l0_ctrl_19'            : (reg_p1l0_ctrl_19          , 0x83544070, 0x83544074, 32, 1),
    'p1l0_status_0'           : (reg_p1l0_status_0         , 0x83544074, 0x83544078, 32, 1),
    'p1l0_status_1'           : (reg_p1l0_status_1         , 0x83544078, 0x8354407c, 32, 1),
    'p1l0_status_2'           : (reg_p1l0_status_2         , 0x8354407c, 0x83544080, 32, 1),
    'p1l0_status_3'           : (reg_p1l0_status_3         , 0x83544080, 0x83544084, 32, 1),
    'p1l0_status_4'           : (reg_p1l0_status_4         , 0x83544084, 0x83544088, 32, 1),
    'p1l0_debug_sel'          : (reg_p1l0_debug_sel        , 0x83544088, 0x8354408c, 32, 1),
    'p1l0_debug_out'          : (reg_p1l0_debug_out        , 0x8354408c, 0x83544090, 32, 1),
    'p1l1_serdes_cfg_0'       : (reg_p1l1_serdes_cfg_0     , 0x83545000, 0x83545004, 32, 1),
    'p1l1_serdes_cfg_1'       : (reg_p1l1_serdes_cfg_1     , 0x83545004, 0x83545008, 32, 1),
    'p1l1_serdes_cfg_2'       : (reg_p1l1_serdes_cfg_2     , 0x83545008, 0x8354500c, 32, 1),
    'p1l1_serdes_cfg_3'       : (reg_p1l1_serdes_cfg_3     , 0x8354500c, 0x83545010, 32, 1),
    'p1l1_serdes_cfg_4'       : (reg_p1l1_serdes_cfg_4     , 0x83545010, 0x83545014, 32, 1),
    'p1l1_serdes_cfg_5'       : (reg_p1l1_serdes_cfg_5     , 0x83545014, 0x83545018, 32, 1),
    'p1l1_serdes_cfg_6'       : (reg_p1l1_serdes_cfg_6     , 0x83545018, 0x8354501c, 32, 1),
    'p1l1_serdes_cfg_7'       : (reg_p1l1_serdes_cfg_7     , 0x8354501c, 0x83545020, 32, 1),
    'p1l1_serdes_cfg_8'       : (reg_p1l1_serdes_cfg_8     , 0x83545020, 0x83545024, 32, 1),
    'p1l1_ctrl_0'             : (reg_p1l1_ctrl_0           , 0x83545024, 0x83545028, 32, 1),
    'p1l1_ctrl_1'             : (reg_p1l1_ctrl_1           , 0x83545028, 0x8354502c, 32, 1),
    'p1l1_ctrl_2'             : (reg_p1l1_ctrl_2           , 0x8354502c, 0x83545030, 32, 1),
    'p1l1_ctrl_3'             : (reg_p1l1_ctrl_3           , 0x83545030, 0x83545034, 32, 1),
    'p1l1_ctrl_4'             : (reg_p1l1_ctrl_4           , 0x83545034, 0x83545038, 32, 1),
    'p1l1_ctrl_5'             : (reg_p1l1_ctrl_5           , 0x83545038, 0x8354503c, 32, 1),
    'p1l1_ctrl_6'             : (reg_p1l1_ctrl_6           , 0x8354503c, 0x83545040, 32, 1),
    'p1l1_ctrl_7'             : (reg_p1l1_ctrl_7           , 0x83545040, 0x83545044, 32, 1),
    'p1l1_ctrl_8'             : (reg_p1l1_ctrl_8           , 0x83545044, 0x83545048, 32, 1),
    'p1l1_ctrl_9'             : (reg_p1l1_ctrl_9           , 0x83545048, 0x8354504c, 32, 1),
    'p1l1_ctrl_10'            : (reg_p1l1_ctrl_10          , 0x8354504c, 0x83545050, 32, 1),
    'p1l1_ctrl_11'            : (reg_p1l1_ctrl_11          , 0x83545050, 0x83545054, 32, 1),
    'p1l1_ctrl_12'            : (reg_p1l1_ctrl_12          , 0x83545054, 0x83545058, 32, 1),
    'p1l1_ctrl_13'            : (reg_p1l1_ctrl_13          , 0x83545058, 0x8354505c, 32, 1),
    'p1l1_ctrl_14'            : (reg_p1l1_ctrl_14          , 0x8354505c, 0x83545060, 32, 1),
    'p1l1_ctrl_15'            : (reg_p1l1_ctrl_15          , 0x83545060, 0x83545064, 32, 1),
    'p1l1_ctrl_16'            : (reg_p1l1_ctrl_16          , 0x83545064, 0x83545068, 32, 1),
    'p1l1_ctrl_17'            : (reg_p1l1_ctrl_17          , 0x83545068, 0x8354506c, 32, 1),
    'p1l1_ctrl_18'            : (reg_p1l1_ctrl_18          , 0x8354506c, 0x83545070, 32, 1),
    'p1l1_ctrl_19'            : (reg_p1l1_ctrl_19          , 0x83545070, 0x83545074, 32, 1),
    'p1l1_status_0'           : (reg_p1l1_status_0         , 0x83545074, 0x83545078, 32, 1),
    'p1l1_status_1'           : (reg_p1l1_status_1         , 0x83545078, 0x8354507c, 32, 1),
    'p1l1_status_2'           : (reg_p1l1_status_2         , 0x8354507c, 0x83545080, 32, 1),
    'p1l1_status_3'           : (reg_p1l1_status_3         , 0x83545080, 0x83545084, 32, 1),
    'p1l1_status_4'           : (reg_p1l1_status_4         , 0x83545084, 0x83545088, 32, 1),
    'p1l1_debug_sel'          : (reg_p1l1_debug_sel        , 0x83545088, 0x8354508c, 32, 1),
    'p1l1_debug_out'          : (reg_p1l1_debug_out        , 0x8354508c, 0x83545090, 32, 1),
    'spi_format'              : (reg_spi_format            , 0x83010010, 0x83010014, 32, 1),
    'spi_direct_io_ctrl_rw'   : (reg_spi_direct_io_ctrl_rw , 0x83010014, 0x83010018, 32, 1),
    'spi_direct_io_ctrl_r'    : (reg_spi_direct_io_ctrl_r  , 0x83010018, 0x8301001c, 32, 1),
    'spi_trans_ctrl'          : (reg_spi_trans_ctrl        , 0x8301001c, 0x83010020, 32, 1),
    'spi_cmd'                 : (reg_spi_cmd               , 0x83010020, 0x83010024, 32, 1),
    'spi_addr'                : (reg_spi_addr              , 0x83010024, 0x83010028, 32, 1),
    'spi_data'                : (reg_spi_data              , 0x83010028, 0x8301002c, 32, 1),
    'spi_ctrl'                : (reg_spi_ctrl              , 0x8301002c, 0x83010030, 32, 1),
    'spi_intr_en'             : (reg_spi_intr_en           , 0x83010030, 0x83010034, 32, 1),
    'spi_intr_sts'            : (reg_spi_intr_sts          , 0x83010034, 0x83010038, 32, 1),
    'spi_timing'              : (reg_spi_timing            , 0x83010038, 0x8301003c, 32, 1),
    'spi_sts'                 : (reg_spi_sts               , 0x83010040, 0x83010044, 32, 1),
    'spi_config'              : (reg_spi_config            , 0x83010044, 0x83010048, 32, 1),
    'spi_token_cnt'           : (reg_spi_token_cnt         , 0x83010048, 0x8301004c, 32, 1),
    'spi_trans_num'           : (reg_spi_trans_num         , 0x8301004c, 0x83010050, 32, 1),
    'spi_axi_base_addr'       : (reg_spi_axi_base_addr     , 0x83010050, 0x83010054, 32, 1),
    'spi_rclk_dly'            : (reg_spi_rclk_dly          , 0x83010054, 0x83010058, 32, 1),
    'spi_debug_sel'           : (reg_spi_debug_sel         , 0x83010058, 0x8301005c, 32, 1),
    'spi_debug_monitor'       : (reg_spi_debug_monitor     , 0x8301005c, 0x83010060, 32, 1),
    } #reg_list

